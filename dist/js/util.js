webpackJsonp([0],[,,function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar sum = __webpack_require__(40);\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input values\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction mean(x /*: Array<number> */)/*:number*/ {\n    // The mean of no numbers is null\n    if (x.length === 0) { return NaN; }\n\n    return sum(x) / x.length;\n}\n\nmodule.exports = mean;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21lYW4uanM/OGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgc3VtID0gcmVxdWlyZSgnLi9zdW0nKTtcblxuLyoqXG4gKiBUaGUgbWVhbiwgX2Fsc28ga25vd24gYXMgYXZlcmFnZV8sXG4gKiBpcyB0aGUgc3VtIG9mIGFsbCB2YWx1ZXMgb3ZlciB0aGUgbnVtYmVyIG9mIHZhbHVlcy5cbiAqIFRoaXMgaXMgYSBbbWVhc3VyZSBvZiBjZW50cmFsIHRlbmRlbmN5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50cmFsX3RlbmRlbmN5KTpcbiAqIGEgbWV0aG9kIG9mIGZpbmRpbmcgYSB0eXBpY2FsIG9yIGNlbnRyYWwgdmFsdWUgb2YgYSBzZXQgb2YgbnVtYmVycy5cbiAqXG4gKiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dCB2YWx1ZXNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IG1lYW5cbiAqIEBleGFtcGxlXG4gKiBtZWFuKFswLCAxMF0pOyAvLyA9PiA1XG4gKi9cbmZ1bmN0aW9uIG1lYW4oeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgLy8gVGhlIG1lYW4gb2Ygbm8gbnVtYmVycyBpcyBudWxsXG4gICAgaWYgKHgubGVuZ3RoID09PSAwKSB7IHJldHVybiBOYU47IH1cblxuICAgIHJldHVybiBzdW0oeCkgLyB4Lmxlbmd0aDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZWFuO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9tZWFuLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},,,function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * We use `Îµ`, epsilon, as a stopping criterion when we want to iterate\n * until we're \"close enough\". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n * where we're trying to find a local minimum of a function's derivative,\n * given by the `fDerivative` method.\n *\n * @example\n * // From calculation, we expect that the local minimum occurs at x=9/4\n * var x_old = 0;\n * // The algorithm starts at x=6\n * var x_new = 6;\n * var stepSize = 0.01;\n *\n * function fDerivative(x) {\n *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n * }\n *\n * // The loop runs until the difference between the previous\n * // value and the current value is smaller than epsilon - a rough\n * // meaure of 'close enough'\n * while (Math.abs(x_new - x_old) > ss.epsilon) {\n *   x_old = x_new;\n *   x_new = x_old - stepSize * fDerivative(x_old);\n * }\n *\n * console.log('Local minimum occurs at', x_new);\n */\nvar epsilon = 0.0001;\n\nmodule.exports = epsilon;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL2Vwc2lsb24uanM/MjA0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFdlIHVzZSBgzrVgLCBlcHNpbG9uLCBhcyBhIHN0b3BwaW5nIGNyaXRlcmlvbiB3aGVuIHdlIHdhbnQgdG8gaXRlcmF0ZVxuICogdW50aWwgd2UncmUgXCJjbG9zZSBlbm91Z2hcIi4gRXBzaWxvbiBpcyBhIHZlcnkgc21hbGwgbnVtYmVyOiBmb3JcbiAqIHNpbXBsZSBzdGF0aXN0aWNzLCB0aGF0IG51bWJlciBpcyAqKjAuMDAwMSoqXG4gKlxuICogVGhpcyBpcyB1c2VkIGluIGNhbGN1bGF0aW9ucyBsaWtlIHRoZSBiaW5vbWlhbERpc3RyaWJ1dGlvbiwgaW4gd2hpY2hcbiAqIHRoZSBwcm9jZXNzIG9mIGZpbmRpbmcgYSB2YWx1ZSBpcyBbaXRlcmF0aXZlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JdGVyYXRpdmVfbWV0aG9kKTpcbiAqIGl0IHByb2dyZXNzZXMgdW50aWwgaXQgaXMgY2xvc2UgZW5vdWdoLlxuICpcbiAqIEJlbG93IGlzIGFuIGV4YW1wbGUgb2YgdXNpbmcgZXBzaWxvbiBpbiBbZ3JhZGllbnQgZGVzY2VudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3JhZGllbnRfZGVzY2VudCksXG4gKiB3aGVyZSB3ZSdyZSB0cnlpbmcgdG8gZmluZCBhIGxvY2FsIG1pbmltdW0gb2YgYSBmdW5jdGlvbidzIGRlcml2YXRpdmUsXG4gKiBnaXZlbiBieSB0aGUgYGZEZXJpdmF0aXZlYCBtZXRob2QuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZyb20gY2FsY3VsYXRpb24sIHdlIGV4cGVjdCB0aGF0IHRoZSBsb2NhbCBtaW5pbXVtIG9jY3VycyBhdCB4PTkvNFxuICogdmFyIHhfb2xkID0gMDtcbiAqIC8vIFRoZSBhbGdvcml0aG0gc3RhcnRzIGF0IHg9NlxuICogdmFyIHhfbmV3ID0gNjtcbiAqIHZhciBzdGVwU2l6ZSA9IDAuMDE7XG4gKlxuICogZnVuY3Rpb24gZkRlcml2YXRpdmUoeCkge1xuICogICByZXR1cm4gNCAqIE1hdGgucG93KHgsIDMpIC0gOSAqIE1hdGgucG93KHgsIDIpO1xuICogfVxuICpcbiAqIC8vIFRoZSBsb29wIHJ1bnMgdW50aWwgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcHJldmlvdXNcbiAqIC8vIHZhbHVlIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBzbWFsbGVyIHRoYW4gZXBzaWxvbiAtIGEgcm91Z2hcbiAqIC8vIG1lYXVyZSBvZiAnY2xvc2UgZW5vdWdoJ1xuICogd2hpbGUgKE1hdGguYWJzKHhfbmV3IC0geF9vbGQpID4gc3MuZXBzaWxvbikge1xuICogICB4X29sZCA9IHhfbmV3O1xuICogICB4X25ldyA9IHhfb2xkIC0gc3RlcFNpemUgKiBmRGVyaXZhdGl2ZSh4X29sZCk7XG4gKiB9XG4gKlxuICogY29uc29sZS5sb2coJ0xvY2FsIG1pbmltdW0gb2NjdXJzIGF0JywgeF9uZXcpO1xuICovXG52YXIgZXBzaWxvbiA9IDAuMDAwMTtcblxubW9kdWxlLmV4cG9ydHMgPSBlcHNpbG9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9lcHNpbG9uLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar mean = __webpack_require__(2);\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * var variance = sumNthPowerDeviations(input) / input.length;\n */\nfunction sumNthPowerDeviations(x/*: Array<number> */, n/*: number */)/*:number*/ {\n    var meanValue = mean(x),\n        sum = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        sum += Math.pow(x[i] - meanValue, n);\n    }\n\n    return sum;\n}\n\nmodule.exports = sumNthPowerDeviations;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3N1bV9udGhfcG93ZXJfZGV2aWF0aW9ucy5qcz80OTk4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBtZWFuID0gcmVxdWlyZSgnLi9tZWFuJyk7XG5cbi8qKlxuICogVGhlIHN1bSBvZiBkZXZpYXRpb25zIHRvIHRoZSBOdGggcG93ZXIuXG4gKiBXaGVuIG49MiBpdCdzIHRoZSBzdW0gb2Ygc3F1YXJlZCBkZXZpYXRpb25zLlxuICogV2hlbiBuPTMgaXQncyB0aGUgc3VtIG9mIGN1YmVkIGRldmlhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4XG4gKiBAcGFyYW0ge251bWJlcn0gbiBwb3dlclxuICogQHJldHVybnMge251bWJlcn0gc3VtIG9mIG50aCBwb3dlciBkZXZpYXRpb25zXG4gKiBAZXhhbXBsZVxuICogdmFyIGlucHV0ID0gWzEsIDIsIDNdO1xuICogLy8gc2luY2UgdGhlIHZhcmlhbmNlIG9mIGEgc2V0IGlzIHRoZSBtZWFuIHNxdWFyZWRcbiAqIC8vIGRldmlhdGlvbnMsIHdlIGNhbiBjYWxjdWxhdGUgdGhhdCB3aXRoIHN1bU50aFBvd2VyRGV2aWF0aW9uczpcbiAqIHZhciB2YXJpYW5jZSA9IHN1bU50aFBvd2VyRGV2aWF0aW9ucyhpbnB1dCkgLyBpbnB1dC5sZW5ndGg7XG4gKi9cbmZ1bmN0aW9uIHN1bU50aFBvd2VyRGV2aWF0aW9ucyh4Lyo6IEFycmF5PG51bWJlcj4gKi8sIG4vKjogbnVtYmVyICovKS8qOm51bWJlciovIHtcbiAgICB2YXIgbWVhblZhbHVlID0gbWVhbih4KSxcbiAgICAgICAgc3VtID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdW0gKz0gTWF0aC5wb3coeFtpXSAtIG1lYW5WYWx1ZSwgbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1bTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdW1OdGhQb3dlckRldmlhdGlvbnM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3N1bV9udGhfcG93ZXJfZGV2aWF0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},,,,function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input\n * @returns {number} factorial: n!\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n /*: number */)/*: number */ {\n\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) { return NaN; }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    var accumulator = 1;\n    for (var i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\nmodule.exports = factorial;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9mYWN0b3JpYWwuanM/YzdlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIEEgW0ZhY3RvcmlhbF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmFjdG9yaWFsKSwgdXN1YWxseSB3cml0dGVuIG4hLCBpcyB0aGUgcHJvZHVjdCBvZiBhbGwgcG9zaXRpdmVcbiAqIGludGVnZXJzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBuLiBPZnRlbiBmYWN0b3JpYWwgaXMgaW1wbGVtZW50ZWRcbiAqIHJlY3Vyc2l2ZWx5LCBidXQgdGhpcyBpdGVyYXRpdmUgYXBwcm9hY2ggaXMgc2lnbmlmaWNhbnRseSBmYXN0ZXJcbiAqIGFuZCBzaW1wbGVyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBmYWN0b3JpYWw6IG4hXG4gKiBAZXhhbXBsZVxuICogZmFjdG9yaWFsKDUpOyAvLyA9PiAxMjBcbiAqL1xuZnVuY3Rpb24gZmFjdG9yaWFsKG4gLyo6IG51bWJlciAqLykvKjogbnVtYmVyICovIHtcblxuICAgIC8vIGZhY3RvcmlhbCBpcyBtYXRoZW1hdGljYWxseSB1bmRlZmluZWQgZm9yIG5lZ2F0aXZlIG51bWJlcnNcbiAgICBpZiAobiA8IDApIHsgcmV0dXJuIE5hTjsgfVxuXG4gICAgLy8gdHlwaWNhbGx5IHlvdSdsbCBleHBhbmQgdGhlIGZhY3RvcmlhbCBmdW5jdGlvbiBnb2luZyBkb3duLCBsaWtlXG4gICAgLy8gNSEgPSA1ICogNCAqIDMgKiAyICogMS4gVGhpcyBpcyBnb2luZyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLFxuICAgIC8vIGNvdW50aW5nIGZyb20gMiB1cCB0byB0aGUgbnVtYmVyIGluIHF1ZXN0aW9uLCBhbmQgc2luY2UgYW55dGhpbmdcbiAgICAvLyBtdWx0aXBsaWVkIGJ5IDEgaXMgaXRzZWxmLCB0aGUgbG9vcCBvbmx5IG5lZWRzIHRvIHN0YXJ0IGF0IDIuXG4gICAgdmFyIGFjY3VtdWxhdG9yID0gMTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8PSBuOyBpKyspIHtcbiAgICAgICAgLy8gZm9yIGVhY2ggbnVtYmVyIHVwIHRvIGFuZCBpbmNsdWRpbmcgdGhlIG51bWJlciBgbmAsIG11bHRpcGx5XG4gICAgICAgIC8vIHRoZSBhY2N1bXVsYXRvciBteSB0aGF0IG51bWJlci5cbiAgICAgICAgYWNjdW11bGF0b3IgKj0gaTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcmlhbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvZmFjdG9yaWFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar quantileSorted = __webpack_require__(12);\nvar quickselect = __webpack_require__(115);\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} sample a sample from the population\n * @param {number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(sample /*: Array<number> */, p /*: Array<number> | number */) {\n    var copy = sample.slice();\n\n    if (Array.isArray(p)) {\n        // rearrange elements so that each element corresponding to a requested\n        // quantile is on a place it would be if the array was fully sorted\n        multiQuantileSelect(copy, p);\n        // Initialize the result array\n        var results = [];\n        // For each requested quantile\n        for (var i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(copy, p[i]);\n        }\n        return results;\n    } else {\n        var idx = quantileIndex(copy.length, p);\n        quantileSelect(copy, idx, 0, copy.length - 1);\n        return quantileSorted(copy, p);\n    }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n    if (k % 1 === 0) {\n        quickselect(arr, k, left, right);\n    } else {\n        k = Math.floor(k);\n        quickselect(arr, k, left, right);\n        quickselect(arr, k + 1, k + 1, right);\n    }\n}\n\nfunction multiQuantileSelect(arr, p) {\n    var indices = [0];\n    for (var i = 0; i < p.length; i++) {\n        indices.push(quantileIndex(arr.length, p[i]));\n    }\n    indices.push(arr.length - 1);\n    indices.sort(compare);\n\n    var stack = [0, indices.length - 1];\n\n    while (stack.length) {\n        var r = Math.ceil(stack.pop());\n        var l = Math.floor(stack.pop());\n        if (r - l <= 1) continue;\n\n        var m = Math.floor((l + r) / 2);\n        quantileSelect(arr, indices[m], indices[l], indices[r]);\n\n        stack.push(l, m, m, r);\n    }\n}\n\nfunction compare(a, b) {\n    return a - b;\n}\n\nfunction quantileIndex(len /*: number */, p /*: number */)/*:number*/ {\n    var idx = len * p;\n    if (p === 1) {\n        // If p is 1, directly return the last index\n        return len - 1;\n    } else if (p === 0) {\n        // If p is 0, directly return the first index\n        return 0;\n    } else if (idx % 1 !== 0) {\n        // If index is not integer, return the next index in array\n        return Math.ceil(idx) - 1;\n    } else if (len % 2 === 0) {\n        // If the list has even-length, we'll return the middle of two indices\n        // around quantile to indicate that we need an average value of the two\n        return idx - 0.5;\n    } else {\n        // Finally, in the simple case of an integer index\n        // with an odd-length list, return the index\n        return idx;\n    }\n}\n\nmodule.exports = quantile;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9xdWFudGlsZS5qcz81MzYxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBxdWFudGlsZVNvcnRlZCA9IHJlcXVpcmUoJy4vcXVhbnRpbGVfc29ydGVkJyk7XG52YXIgcXVpY2tzZWxlY3QgPSByZXF1aXJlKCcuL3F1aWNrc2VsZWN0Jyk7XG5cbi8qKlxuICogVGhlIFtxdWFudGlsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhbnRpbGUpOlxuICogdGhpcyBpcyBhIHBvcHVsYXRpb24gcXVhbnRpbGUsIHNpbmNlIHdlIGFzc3VtZSB0byBrbm93IHRoZSBlbnRpcmVcbiAqIGRhdGFzZXQgaW4gdGhpcyBsaWJyYXJ5LiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICogW1F1YW50aWxlcyBvZiBhIFBvcHVsYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhbnRpbGUjUXVhbnRpbGVzX29mX2FfcG9wdWxhdGlvbilcbiAqIGFsZ29yaXRobSBmcm9tIHdpa2lwZWRpYS5cbiAqXG4gKiBTYW1wbGUgaXMgYSBvbmUtZGltZW5zaW9uYWwgYXJyYXkgb2YgbnVtYmVycyxcbiAqIGFuZCBwIGlzIGVpdGhlciBhIGRlY2ltYWwgbnVtYmVyIGZyb20gMCB0byAxIG9yIGFuIGFycmF5IG9mIGRlY2ltYWxcbiAqIG51bWJlcnMgZnJvbSAwIHRvIDEuXG4gKiBJbiB0ZXJtcyBvZiBhIGsvcSBxdWFudGlsZSwgcCA9IGsvcSAtIGl0J3MganVzdCBkZWFsaW5nIHdpdGggZnJhY3Rpb25zIG9yIGRlYWxpbmdcbiAqIHdpdGggZGVjaW1hbCB2YWx1ZXMuXG4gKiBXaGVuIHAgaXMgYW4gYXJyYXksIHRoZSByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGlzIGFsc28gYW4gYXJyYXkgY29udGFpbmluZyB0aGUgYXBwcm9wcmlhdGVcbiAqIHF1YW50aWxlcyBpbiBpbnB1dCBvcmRlclxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc2FtcGxlIGEgc2FtcGxlIGZyb20gdGhlIHBvcHVsYXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBwIHRoZSBkZXNpcmVkIHF1YW50aWxlLCBhcyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHF1YW50aWxlXG4gKiBAZXhhbXBsZVxuICogcXVhbnRpbGUoWzMsIDYsIDcsIDgsIDgsIDksIDEwLCAxMywgMTUsIDE2LCAyMF0sIDAuNSk7IC8vID0+IDlcbiAqL1xuZnVuY3Rpb24gcXVhbnRpbGUoc2FtcGxlIC8qOiBBcnJheTxudW1iZXI+ICovLCBwIC8qOiBBcnJheTxudW1iZXI+IHwgbnVtYmVyICovKSB7XG4gICAgdmFyIGNvcHkgPSBzYW1wbGUuc2xpY2UoKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHApKSB7XG4gICAgICAgIC8vIHJlYXJyYW5nZSBlbGVtZW50cyBzbyB0aGF0IGVhY2ggZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIGEgcmVxdWVzdGVkXG4gICAgICAgIC8vIHF1YW50aWxlIGlzIG9uIGEgcGxhY2UgaXQgd291bGQgYmUgaWYgdGhlIGFycmF5IHdhcyBmdWxseSBzb3J0ZWRcbiAgICAgICAgbXVsdGlRdWFudGlsZVNlbGVjdChjb3B5LCBwKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgcmVzdWx0IGFycmF5XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIC8vIEZvciBlYWNoIHJlcXVlc3RlZCBxdWFudGlsZVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdHNbaV0gPSBxdWFudGlsZVNvcnRlZChjb3B5LCBwW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaWR4ID0gcXVhbnRpbGVJbmRleChjb3B5Lmxlbmd0aCwgcCk7XG4gICAgICAgIHF1YW50aWxlU2VsZWN0KGNvcHksIGlkeCwgMCwgY29weS5sZW5ndGggLSAxKTtcbiAgICAgICAgcmV0dXJuIHF1YW50aWxlU29ydGVkKGNvcHksIHApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcXVhbnRpbGVTZWxlY3QoYXJyLCBrLCBsZWZ0LCByaWdodCkge1xuICAgIGlmIChrICUgMSA9PT0gMCkge1xuICAgICAgICBxdWlja3NlbGVjdChhcnIsIGssIGxlZnQsIHJpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBrID0gTWF0aC5mbG9vcihrKTtcbiAgICAgICAgcXVpY2tzZWxlY3QoYXJyLCBrLCBsZWZ0LCByaWdodCk7XG4gICAgICAgIHF1aWNrc2VsZWN0KGFyciwgayArIDEsIGsgKyAxLCByaWdodCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtdWx0aVF1YW50aWxlU2VsZWN0KGFyciwgcCkge1xuICAgIHZhciBpbmRpY2VzID0gWzBdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbmRpY2VzLnB1c2gocXVhbnRpbGVJbmRleChhcnIubGVuZ3RoLCBwW2ldKSk7XG4gICAgfVxuICAgIGluZGljZXMucHVzaChhcnIubGVuZ3RoIC0gMSk7XG4gICAgaW5kaWNlcy5zb3J0KGNvbXBhcmUpO1xuXG4gICAgdmFyIHN0YWNrID0gWzAsIGluZGljZXMubGVuZ3RoIC0gMV07XG5cbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIHZhciByID0gTWF0aC5jZWlsKHN0YWNrLnBvcCgpKTtcbiAgICAgICAgdmFyIGwgPSBNYXRoLmZsb29yKHN0YWNrLnBvcCgpKTtcbiAgICAgICAgaWYgKHIgLSBsIDw9IDEpIGNvbnRpbnVlO1xuXG4gICAgICAgIHZhciBtID0gTWF0aC5mbG9vcigobCArIHIpIC8gMik7XG4gICAgICAgIHF1YW50aWxlU2VsZWN0KGFyciwgaW5kaWNlc1ttXSwgaW5kaWNlc1tsXSwgaW5kaWNlc1tyXSk7XG5cbiAgICAgICAgc3RhY2sucHVzaChsLCBtLCBtLCByKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbn1cblxuZnVuY3Rpb24gcXVhbnRpbGVJbmRleChsZW4gLyo6IG51bWJlciAqLywgcCAvKjogbnVtYmVyICovKS8qOm51bWJlciovIHtcbiAgICB2YXIgaWR4ID0gbGVuICogcDtcbiAgICBpZiAocCA9PT0gMSkge1xuICAgICAgICAvLyBJZiBwIGlzIDEsIGRpcmVjdGx5IHJldHVybiB0aGUgbGFzdCBpbmRleFxuICAgICAgICByZXR1cm4gbGVuIC0gMTtcbiAgICB9IGVsc2UgaWYgKHAgPT09IDApIHtcbiAgICAgICAgLy8gSWYgcCBpcyAwLCBkaXJlY3RseSByZXR1cm4gdGhlIGZpcnN0IGluZGV4XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAoaWR4ICUgMSAhPT0gMCkge1xuICAgICAgICAvLyBJZiBpbmRleCBpcyBub3QgaW50ZWdlciwgcmV0dXJuIHRoZSBuZXh0IGluZGV4IGluIGFycmF5XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoaWR4KSAtIDE7XG4gICAgfSBlbHNlIGlmIChsZW4gJSAyID09PSAwKSB7XG4gICAgICAgIC8vIElmIHRoZSBsaXN0IGhhcyBldmVuLWxlbmd0aCwgd2UnbGwgcmV0dXJuIHRoZSBtaWRkbGUgb2YgdHdvIGluZGljZXNcbiAgICAgICAgLy8gYXJvdW5kIHF1YW50aWxlIHRvIGluZGljYXRlIHRoYXQgd2UgbmVlZCBhbiBhdmVyYWdlIHZhbHVlIG9mIHRoZSB0d29cbiAgICAgICAgcmV0dXJuIGlkeCAtIDAuNTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGaW5hbGx5LCBpbiB0aGUgc2ltcGxlIGNhc2Ugb2YgYW4gaW50ZWdlciBpbmRleFxuICAgICAgICAvLyB3aXRoIGFuIG9kZC1sZW5ndGggbGlzdCwgcmV0dXJuIHRoZSBpbmRleFxuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWFudGlsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcXVhbnRpbGUuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} sample input data\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(sample /*: Array<number> */, p /*: number */)/*:number*/ {\n    var idx = sample.length * p;\n    if (p < 0 || p > 1) {\n        return NaN;\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return sample[sample.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return sample[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return sample[Math.ceil(idx) - 1];\n    } else if (sample.length % 2 === 0) {\n        // If the list has even-length, we'll take the average of this number\n        // and the next value, if there is one\n        return (sample[idx - 1] + sample[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the sample value at the index.\n        return sample[idx];\n    }\n}\n\nmodule.exports = quantileSorted;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9xdWFudGlsZV9zb3J0ZWQuanM/ZTY5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIHF1YW50aWxlczogd2hlbiB5b3Uga25vd1xuICogdGhhdCB0aGUgb3JkZXIgaXMgc29ydGVkLCB5b3UgZG9uJ3QgbmVlZCB0byByZS1zb3J0IGl0LCBhbmQgdGhlIGNvbXB1dGF0aW9uc1xuICogYXJlIGZhc3Rlci5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNhbXBsZSBpbnB1dCBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gcCBkZXNpcmVkIHF1YW50aWxlOiBhIG51bWJlciBiZXR3ZWVuIDAgdG8gMSwgaW5jbHVzaXZlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBxdWFudGlsZSB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIHF1YW50aWxlU29ydGVkKFszLCA2LCA3LCA4LCA4LCA5LCAxMCwgMTMsIDE1LCAxNiwgMjBdLCAwLjUpOyAvLyA9PiA5XG4gKi9cbmZ1bmN0aW9uIHF1YW50aWxlU29ydGVkKHNhbXBsZSAvKjogQXJyYXk8bnVtYmVyPiAqLywgcCAvKjogbnVtYmVyICovKS8qOm51bWJlciovIHtcbiAgICB2YXIgaWR4ID0gc2FtcGxlLmxlbmd0aCAqIHA7XG4gICAgaWYgKHAgPCAwIHx8IHAgPiAxKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfSBlbHNlIGlmIChwID09PSAxKSB7XG4gICAgICAgIC8vIElmIHAgaXMgMSwgZGlyZWN0bHkgcmV0dXJuIHRoZSBsYXN0IGVsZW1lbnRcbiAgICAgICAgcmV0dXJuIHNhbXBsZVtzYW1wbGUubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIGlmIChwID09PSAwKSB7XG4gICAgICAgIC8vIElmIHAgaXMgMCwgZGlyZWN0bHkgcmV0dXJuIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICAgIHJldHVybiBzYW1wbGVbMF07XG4gICAgfSBlbHNlIGlmIChpZHggJSAxICE9PSAwKSB7XG4gICAgICAgIC8vIElmIHAgaXMgbm90IGludGVnZXIsIHJldHVybiB0aGUgbmV4dCBlbGVtZW50IGluIGFycmF5XG4gICAgICAgIHJldHVybiBzYW1wbGVbTWF0aC5jZWlsKGlkeCkgLSAxXTtcbiAgICB9IGVsc2UgaWYgKHNhbXBsZS5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgICAgIC8vIElmIHRoZSBsaXN0IGhhcyBldmVuLWxlbmd0aCwgd2UnbGwgdGFrZSB0aGUgYXZlcmFnZSBvZiB0aGlzIG51bWJlclxuICAgICAgICAvLyBhbmQgdGhlIG5leHQgdmFsdWUsIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgICByZXR1cm4gKHNhbXBsZVtpZHggLSAxXSArIHNhbXBsZVtpZHhdKSAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmluYWxseSwgaW4gdGhlIHNpbXBsZSBjYXNlIG9mIGFuIGludGVnZXIgdmFsdWVcbiAgICAgICAgLy8gd2l0aCBhbiBvZGQtbGVuZ3RoIGxpc3QsIHJldHVybiB0aGUgc2FtcGxlIHZhbHVlIGF0IHRoZSBpbmRleC5cbiAgICAgICAgcmV0dXJuIHNhbXBsZVtpZHhdO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWFudGlsZVNvcnRlZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcXVhbnRpbGVfc29ydGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar sampleVariance = __webpack_require__(14);\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);\n * // => '2.14'\n */\nfunction sampleStandardDeviation(x/*:Array<number>*/)/*:number*/ {\n    // The standard deviation of no numbers is null\n    var sampleVarianceX = sampleVariance(x);\n    if (isNaN(sampleVarianceX)) { return NaN; }\n    return Math.sqrt(sampleVarianceX);\n}\n\nmodule.exports = sampleStandardDeviation;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGVfc3RhbmRhcmRfZGV2aWF0aW9uLmpzPzRmY2EiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIHNhbXBsZVZhcmlhbmNlID0gcmVxdWlyZSgnLi9zYW1wbGVfdmFyaWFuY2UnKTtcblxuLyoqXG4gKiBUaGUgW3N0YW5kYXJkIGRldmlhdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdGFuZGFyZF9kZXZpYXRpb24pXG4gKiBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHZhcmlhbmNlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dCBhcnJheVxuICogQHJldHVybnMge251bWJlcn0gc2FtcGxlIHN0YW5kYXJkIGRldmlhdGlvblxuICogQGV4YW1wbGVcbiAqIHNhbXBsZVN0YW5kYXJkRGV2aWF0aW9uKFsyLCA0LCA0LCA0LCA1LCA1LCA3LCA5XSkudG9GaXhlZCgyKTtcbiAqIC8vID0+ICcyLjE0J1xuICovXG5mdW5jdGlvbiBzYW1wbGVTdGFuZGFyZERldmlhdGlvbih4Lyo6QXJyYXk8bnVtYmVyPiovKS8qOm51bWJlciovIHtcbiAgICAvLyBUaGUgc3RhbmRhcmQgZGV2aWF0aW9uIG9mIG5vIG51bWJlcnMgaXMgbnVsbFxuICAgIHZhciBzYW1wbGVWYXJpYW5jZVggPSBzYW1wbGVWYXJpYW5jZSh4KTtcbiAgICBpZiAoaXNOYU4oc2FtcGxlVmFyaWFuY2VYKSkgeyByZXR1cm4gTmFOOyB9XG4gICAgcmV0dXJuIE1hdGguc3FydChzYW1wbGVWYXJpYW5jZVgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhbXBsZVN0YW5kYXJkRGV2aWF0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGVfc3RhbmRhcmRfZGV2aWF0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar sumNthPowerDeviations = __webpack_require__(6);\n\n/**\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don't know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x input array\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); // => 2.5\n */\nfunction sampleVariance(x /*: Array<number> */)/*:number*/ {\n    // The variance of no numbers is null\n    if (x.length <= 1) { return NaN; }\n\n    var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    return sumSquaredDeviationsValue / besselsCorrection;\n}\n\nmodule.exports = sampleVariance;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGVfdmFyaWFuY2UuanM/MzQ0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgc3VtTnRoUG93ZXJEZXZpYXRpb25zID0gcmVxdWlyZSgnLi9zdW1fbnRoX3Bvd2VyX2RldmlhdGlvbnMnKTtcblxuLyoqXG4gKiBUaGUgW3NhbXBsZSB2YXJpYW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFyaWFuY2UjU2FtcGxlX3ZhcmlhbmNlKVxuICogaXMgdGhlIHN1bSBvZiBzcXVhcmVkIGRldmlhdGlvbnMgZnJvbSB0aGUgbWVhbi4gVGhlIHNhbXBsZSB2YXJpYW5jZVxuICogaXMgZGlzdGluZ3Vpc2hlZCBmcm9tIHRoZSB2YXJpYW5jZSBieSB0aGUgdXNhZ2Ugb2YgW0Jlc3NlbCdzIENvcnJlY3Rpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jlc3NlbCdzX2NvcnJlY3Rpb24pOlxuICogaW5zdGVhZCBvZiBkaXZpZGluZyB0aGUgc3VtIG9mIHNxdWFyZWQgZGV2aWF0aW9ucyBieSB0aGUgbGVuZ3RoIG9mIHRoZSBpbnB1dCxcbiAqIGl0IGlzIGRpdmlkZWQgYnkgdGhlIGxlbmd0aCBtaW51cyBvbmUuIFRoaXMgY29ycmVjdHMgdGhlIGJpYXMgaW4gZXN0aW1hdGluZ1xuICogYSB2YWx1ZSBmcm9tIGEgc2V0IHRoYXQgeW91IGRvbid0IGtub3cgaWYgZnVsbC5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICogKiBbV29sZnJhbSBNYXRoV29ybGQgb24gU2FtcGxlIFZhcmlhbmNlXShodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL1NhbXBsZVZhcmlhbmNlLmh0bWwpXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0IGFycmF5XG4gKiBAcmV0dXJuIHtudW1iZXJ9IHNhbXBsZSB2YXJpYW5jZVxuICogQGV4YW1wbGVcbiAqIHNhbXBsZVZhcmlhbmNlKFsxLCAyLCAzLCA0LCA1XSk7IC8vID0+IDIuNVxuICovXG5mdW5jdGlvbiBzYW1wbGVWYXJpYW5jZSh4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcbiAgICAvLyBUaGUgdmFyaWFuY2Ugb2Ygbm8gbnVtYmVycyBpcyBudWxsXG4gICAgaWYgKHgubGVuZ3RoIDw9IDEpIHsgcmV0dXJuIE5hTjsgfVxuXG4gICAgdmFyIHN1bVNxdWFyZWREZXZpYXRpb25zVmFsdWUgPSBzdW1OdGhQb3dlckRldmlhdGlvbnMoeCwgMik7XG5cbiAgICAvLyB0aGlzIGlzIEJlc3NlbHMnIENvcnJlY3Rpb246IGFuIGFkanVzdG1lbnQgbWFkZSB0byBzYW1wbGUgc3RhdGlzdGljc1xuICAgIC8vIHRoYXQgYWxsb3dzIGZvciB0aGUgcmVkdWNlZCBkZWdyZWUgb2YgZnJlZWRvbSBlbnRhaWxlZCBpbiBjYWxjdWxhdGluZ1xuICAgIC8vIHZhbHVlcyBmcm9tIHNhbXBsZXMgcmF0aGVyIHRoYW4gY29tcGxldGUgcG9wdWxhdGlvbnMuXG4gICAgdmFyIGJlc3NlbHNDb3JyZWN0aW9uID0geC5sZW5ndGggLSAxO1xuXG4gICAgLy8gRmluZCB0aGUgbWVhbiB2YWx1ZSBvZiB0aGF0IGxpc3RcbiAgICByZXR1cm4gc3VtU3F1YXJlZERldmlhdGlvbnNWYWx1ZSAvIGJlc3NlbHNDb3JyZWN0aW9uO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhbXBsZVZhcmlhbmNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGVfdmFyaWFuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},,function(module,exports,__webpack_require__){eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.exprEval = factory());\n}(this, (function () { 'use strict';\n\n/*!\n Based on ndef.parser, by Raphael Graf(r@undefined.ch)\n http://www.undefined.ch/mparser/index.html\n\n Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)\n\n You are free to use and modify this code in anyway you find useful. Please leave this comment in the code\n to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,\n but don't feel like you have to let me know or ask permission.\n*/\n\nfunction indexOf(array, obj) {\n  for (var i = 0; i < array.length; i++) {\n    if (array[i] === obj) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar INUMBER = 'INUMBER';\nvar IOP1 = 'IOP1';\nvar IOP2 = 'IOP2';\nvar IOP3 = 'IOP3';\nvar IVAR = 'IVAR';\nvar IFUNCALL = 'IFUNCALL';\nvar IEXPR = 'IEXPR';\nvar IMEMBER = 'IMEMBER';\n\nfunction Instruction(type, value) {\n  this.type = type;\n  this.value = (value !== undefined && value !== null) ? value : 0;\n}\n\nInstruction.prototype.toString = function () {\n  switch (this.type) {\n    case INUMBER:\n    case IOP1:\n    case IOP2:\n    case IOP3:\n    case IVAR:\n      return this.value;\n    case IFUNCALL:\n      return 'CALL ' + this.value;\n    case IMEMBER:\n      return '.' + this.value;\n    default:\n      return 'Invalid Instruction';\n  }\n};\n\nfunction Expression(tokens, parser) {\n  this.tokens = tokens;\n  this.parser = parser;\n  this.unaryOps = parser.unaryOps;\n  this.binaryOps = parser.binaryOps;\n  this.ternaryOps = parser.ternaryOps;\n  this.functions = parser.functions;\n}\n\nfunction escapeValue(v) {\n  if (typeof v === 'string') {\n    return JSON.stringify(v).replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n  }\n  return v;\n}\n\nfunction simplify(tokens, unaryOps, binaryOps, ternaryOps, values) {\n  var nstack = [];\n  var newexpression = [];\n  var n1, n2, n3;\n  var f;\n  for (var i = 0, L = tokens.length; i < L; i++) {\n    var item = tokens[i];\n    var type = item.type;\n    if (type === INUMBER) {\n      nstack.push(item);\n    } else if (type === IVAR && values.hasOwnProperty(item.value)) {\n      item = new Instruction(INUMBER, values[item.value]);\n      nstack.push(item);\n    } else if (type === IOP2 && nstack.length > 1) {\n      n2 = nstack.pop();\n      n1 = nstack.pop();\n      f = binaryOps[item.value];\n      item = new Instruction(INUMBER, f(n1.value, n2.value));\n      nstack.push(item);\n    } else if (type === IOP3 && nstack.length > 2) {\n      n3 = nstack.pop();\n      n2 = nstack.pop();\n      n1 = nstack.pop();\n      if (item.value === '?') {\n        nstack.push(n1.value ? n2.value : n3.value);\n      } else {\n        f = ternaryOps[item.value];\n        item = new Instruction(INUMBER, f(n1.value, n2.value, n3.value));\n        nstack.push(item);\n      }\n    } else if (type === IOP1 && nstack.length > 0) {\n      n1 = nstack.pop();\n      f = unaryOps[item.value];\n      item = new Instruction(INUMBER, f(n1.value));\n      nstack.push(item);\n    } else if (type === IEXPR) {\n      while (nstack.length > 0) {\n        newexpression.push(nstack.shift());\n      }\n      newexpression.push(new Instruction(IEXPR, simplify(item.value, unaryOps, binaryOps, ternaryOps, values)));\n    } else if (type === IMEMBER && nstack.length > 0) {\n      n1 = nstack.pop();\n      nstack.push(new Instruction(INUMBER, n1.value[item.value]));\n    } else {\n      while (nstack.length > 0) {\n        newexpression.push(nstack.shift());\n      }\n      newexpression.push(item);\n    }\n  }\n  while (nstack.length > 0) {\n    newexpression.push(nstack.shift());\n  }\n  return newexpression;\n}\n\nExpression.prototype.simplify = function (values) {\n  values = values || {};\n  return new Expression(simplify(this.tokens, this.unaryOps, this.binaryOps, this.ternaryOps, values), this.parser);\n};\n\nfunction substitute(tokens, variable, expr) {\n  var newexpression = [];\n  for (var i = 0, L = tokens.length; i < L; i++) {\n    var item = tokens[i];\n    var type = item.type;\n    if (type === IVAR && item.value === variable) {\n      for (var j = 0; j < expr.tokens.length; j++) {\n        var expritem = expr.tokens[j];\n        var replitem;\n        if (expritem.type === IOP1) {\n          replitem = unaryInstruction(expritem.value);\n        } else if (expritem.type === IOP2) {\n          replitem = binaryInstruction(expritem.value);\n        } else if (expritem.type === IOP3) {\n          replitem = ternaryInstruction(expritem.value);\n        } else {\n          replitem = new Instruction(expritem.type, expritem.value);\n        }\n        newexpression.push(replitem);\n      }\n    } else if (type === IEXPR) {\n      newexpression.push(new Instruction(IEXPR, substitute(item.value, variable, expr)));\n    } else {\n      newexpression.push(item);\n    }\n  }\n  return newexpression;\n}\n\nExpression.prototype.substitute = function (variable, expr) {\n  if (!(expr instanceof Expression)) {\n    expr = this.parser.parse(String(expr));\n  }\n\n  return new Expression(substitute(this.tokens, variable, expr), this.parser);\n};\n\nfunction evaluate(tokens, expr, values) {\n  var nstack = [];\n  var n1, n2, n3;\n  var f;\n  for (var i = 0, L = tokens.length; i < L; i++) {\n    var item = tokens[i];\n    var type = item.type;\n    if (type === INUMBER) {\n      nstack.push(item.value);\n    } else if (type === IOP2) {\n      n2 = nstack.pop();\n      n1 = nstack.pop();\n      f = expr.binaryOps[item.value];\n      nstack.push(f(n1, n2));\n    } else if (type === IOP3) {\n      n3 = nstack.pop();\n      n2 = nstack.pop();\n      n1 = nstack.pop();\n      if (item.value === '?') {\n        nstack.push(evaluate(n1 ? n2 : n3, expr, values));\n      } else {\n        f = expr.ternaryOps[item.value];\n        nstack.push(f(n1, n2, n3));\n      }\n    } else if (type === IVAR) {\n      if (item.value in expr.functions) {\n        nstack.push(expr.functions[item.value]);\n      } else {\n        var v = values[item.value];\n        if (v !== undefined) {\n          nstack.push(v);\n        } else {\n          throw new Error('undefined variable: ' + item.value);\n        }\n      }\n    } else if (type === IOP1) {\n      n1 = nstack.pop();\n      f = expr.unaryOps[item.value];\n      nstack.push(f(n1));\n    } else if (type === IFUNCALL) {\n      var argCount = item.value;\n      var args = [];\n      while (argCount-- > 0) {\n        args.unshift(nstack.pop());\n      }\n      f = nstack.pop();\n      if (f.apply && f.call) {\n        nstack.push(f.apply(undefined, args));\n      } else {\n        throw new Error(f + ' is not a function');\n      }\n    } else if (type === IEXPR) {\n      nstack.push(item.value);\n    } else if (type === IMEMBER) {\n      n1 = nstack.pop();\n      nstack.push(n1[item.value]);\n    } else {\n      throw new Error('invalid Expression');\n    }\n  }\n  if (nstack.length > 1) {\n    throw new Error('invalid Expression (parity)');\n  }\n  return nstack[0];\n}\n\nExpression.prototype.evaluate = function (values) {\n  values = values || {};\n  return evaluate(this.tokens, this, values);\n};\n\nfunction expressionToString(tokens, toJS) {\n  var nstack = [];\n  var n1, n2, n3;\n  var f;\n  for (var i = 0, L = tokens.length; i < L; i++) {\n    var item = tokens[i];\n    var type = item.type;\n    if (type === INUMBER) {\n      if (typeof item.value === 'number' && item.value < 0) {\n        nstack.push('(' + item.value + ')');\n      } else {\n        nstack.push(escapeValue(item.value));\n      }\n    } else if (type === IOP2) {\n      n2 = nstack.pop();\n      n1 = nstack.pop();\n      f = item.value;\n      if (toJS) {\n        if (f === '^') {\n          nstack.push('Math.pow(' + n1 + ', ' + n2 + ')');\n        } else if (f === 'and') {\n          nstack.push('(!!' + n1 + ' && !!' + n2 + ')');\n        } else if (f === 'or') {\n          nstack.push('(!!' + n1 + ' || !!' + n2 + ')');\n        } else if (f === '||') {\n          nstack.push('(String(' + n1 + ') + String(' + n2 + '))');\n        } else if (f === '==') {\n          nstack.push('(' + n1 + ' === ' + n2 + ')');\n        } else if (f === '!=') {\n          nstack.push('(' + n1 + ' !== ' + n2 + ')');\n        } else {\n          nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');\n        }\n      } else {\n        nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');\n      }\n    } else if (type === IOP3) {\n      n3 = nstack.pop();\n      n2 = nstack.pop();\n      n1 = nstack.pop();\n      f = item.value;\n      if (f === '?') {\n        nstack.push('(' + n1 + ' ? ' + n2 + ' : ' + n3 + ')');\n      } else {\n        throw new Error('invalid Expression');\n      }\n    } else if (type === IVAR) {\n      nstack.push(item.value);\n    } else if (type === IOP1) {\n      n1 = nstack.pop();\n      f = item.value;\n      if (f === '-' || f === '+') {\n        nstack.push('(' + f + n1 + ')');\n      } else if (toJS) {\n        if (f === 'not') {\n          nstack.push('(' + '!' + n1 + ')');\n        } else if (f === '!') {\n          nstack.push('fac(' + n1 + ')');\n        } else {\n          nstack.push(f + '(' + n1 + ')');\n        }\n      } else if (f === '!') {\n        nstack.push('(' + n1 + '!)');\n      } else {\n        nstack.push('(' + f + ' ' + n1 + ')');\n      }\n    } else if (type === IFUNCALL) {\n      var argCount = item.value;\n      var args = [];\n      while (argCount-- > 0) {\n        args.unshift(nstack.pop());\n      }\n      f = nstack.pop();\n      nstack.push(f + '(' + args.join(', ') + ')');\n    } else if (type === IMEMBER) {\n      n1 = nstack.pop();\n      nstack.push(n1 + '.' + item.value);\n    } else if (type === IEXPR) {\n      nstack.push('(' + expressionToString(item.value, toJS) + ')');\n    } else {\n      throw new Error('invalid Expression');\n    }\n  }\n  if (nstack.length > 1) {\n    throw new Error('invalid Expression (parity)');\n  }\n  return nstack[0];\n}\n\nExpression.prototype.toString = function () {\n  return expressionToString(this.tokens, false);\n};\n\nfunction getSymbols(tokens, symbols) {\n  for (var i = 0, L = tokens.length; i < L; i++) {\n    var item = tokens[i];\n    if (item.type === IVAR && (indexOf(symbols, item.value) === -1)) {\n      symbols.push(item.value);\n    } else if (item.type === IEXPR) {\n      getSymbols(item.value, symbols);\n    }\n  }\n}\n\nExpression.prototype.symbols = function () {\n  var vars = [];\n  getSymbols(this.tokens, vars);\n  return vars;\n};\n\nExpression.prototype.variables = function () {\n  var vars = [];\n  getSymbols(this.tokens, vars);\n  var functions = this.functions;\n  return vars.filter(function (name) {\n    return !(name in functions);\n  });\n};\n\nExpression.prototype.toJSFunction = function (param, variables) {\n  var expr = this;\n  var f = new Function(param, 'with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return ' + expressionToString(this.simplify(variables).tokens, true) + '; }'); // eslint-disable-line no-new-func\n  return function () {\n    return f.apply(expr, arguments);\n  };\n};\n\nfunction add(a, b) {\n  return Number(a) + Number(b);\n}\nfunction sub(a, b) {\n  return a - b;\n}\nfunction mul(a, b) {\n  return a * b;\n}\nfunction div(a, b) {\n  return a / b;\n}\nfunction mod(a, b) {\n  return a % b;\n}\nfunction concat(a, b) {\n  return '' + a + b;\n}\nfunction equal(a, b) {\n  return a === b;\n}\nfunction notEqual(a, b) {\n  return a !== b;\n}\nfunction greaterThan(a, b) {\n  return a > b;\n}\nfunction lessThan(a, b) {\n  return a < b;\n}\nfunction greaterThanEqual(a, b) {\n  return a >= b;\n}\nfunction lessThanEqual(a, b) {\n  return a <= b;\n}\nfunction andOperator(a, b) {\n  return Boolean(a && b);\n}\nfunction orOperator(a, b) {\n  return Boolean(a || b);\n}\nfunction sinh(a) {\n  return ((Math.exp(a) - Math.exp(-a)) / 2);\n}\nfunction cosh(a) {\n  return ((Math.exp(a) + Math.exp(-a)) / 2);\n}\nfunction tanh(a) {\n  if (a === Infinity) return 1;\n  if (a === -Infinity) return -1;\n  return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a));\n}\nfunction asinh(a) {\n  if (a === -Infinity) return a;\n  return Math.log(a + Math.sqrt(a * a + 1));\n}\nfunction acosh(a) {\n  return Math.log(a + Math.sqrt(a * a - 1));\n}\nfunction atanh(a) {\n  return (Math.log((1 + a) / (1 - a)) / 2);\n}\nfunction log10(a) {\n  return Math.log(a) * Math.LOG10E;\n}\nfunction neg(a) {\n  return -a;\n}\nfunction not(a) {\n  return !a;\n}\nfunction trunc(a) {\n  return a < 0 ? Math.ceil(a) : Math.floor(a);\n}\nfunction random(a) {\n  return Math.random() * (a || 1);\n}\nfunction factorial(a) { // a!\n  return gamma(a + 1);\n}\nfunction stringLength(s) {\n  return String(s).length;\n}\n\nfunction hypot() {\n  var sum = 0;\n  var larg = 0;\n  for (var i = 0, L = arguments.length; i < L; i++) {\n    var arg = Math.abs(arguments[i]);\n    var div;\n    if (larg < arg) {\n      div = larg / arg;\n      sum = sum * div * div + 1;\n      larg = arg;\n    } else if (arg > 0) {\n      div = arg / larg;\n      sum += div * div;\n    } else {\n      sum += arg;\n    }\n  }\n  return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n}\n\nfunction condition(cond, yep, nope) {\n  return cond ? yep : nope;\n}\n\nfunction isInteger(value) {\n  return isFinite(value) && (value === Math.round(value));\n}\n\nvar GAMMA_G = 4.7421875;\nvar GAMMA_P = [\n  0.99999999999999709182,\n  57.156235665862923517, -59.597960355475491248,\n  14.136097974741747174, -0.49191381609762019978,\n  0.33994649984811888699e-4,\n  0.46523628927048575665e-4, -0.98374475304879564677e-4,\n  0.15808870322491248884e-3, -0.21026444172410488319e-3,\n  0.21743961811521264320e-3, -0.16431810653676389022e-3,\n  0.84418223983852743293e-4, -0.26190838401581408670e-4,\n  0.36899182659531622704e-5\n];\n\n// Gamma function from math.js\nfunction gamma(n) {\n  var t, x;\n\n  if (isInteger(n)) {\n    if (n <= 0) {\n      return isFinite(n) ? Infinity : NaN;\n    }\n\n    if (n > 171) {\n      return Infinity; // Will overflow\n    }\n\n    var value = n - 2;\n    var res = n - 1;\n    while (value > 1) {\n      res *= value;\n      value--;\n    }\n\n    if (res === 0) {\n      res = 1; // 0! is per definition 1\n    }\n\n    return res;\n  }\n\n  if (n < 0.5) {\n    return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));\n  }\n\n  if (n >= 171.35) {\n    return Infinity; // will overflow\n  }\n\n  if (n > 85.0) { // Extended Stirling Approx\n    var twoN = n * n;\n    var threeN = twoN * n;\n    var fourN = threeN * n;\n    var fiveN = fourN * n;\n    return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *\n      (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -\n      571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +\n      5246819 / (75246796800 * fiveN * n));\n  }\n\n  --n;\n  x = GAMMA_P[0];\n  for (var i = 1; i < GAMMA_P.length; ++i) {\n    x += GAMMA_P[i] / (n + i);\n  }\n\n  t = n + GAMMA_G + 0.5;\n  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n}\n\nvar TEOF = 'TEOF';\nvar TOP = 'TOP';\nvar TNUMBER = 'TNUMBER';\nvar TSTRING = 'TSTRING';\nvar TPAREN = 'TPAREN';\nvar TCOMMA = 'TCOMMA';\nvar TNAME = 'TNAME';\n\nfunction Token(type, value, line, column) {\n  this.type = type;\n  this.value = value;\n  this.line = line;\n  this.column = column;\n}\n\nToken.prototype.toString = function () {\n  return this.type + ': ' + this.value;\n};\n\nfunction TokenStream(expression, unaryOps, binaryOps, ternaryOps, consts) {\n  this.pos = 0;\n  this.line = 0;\n  this.column = 0;\n  this.current = null;\n  this.unaryOps = unaryOps;\n  this.binaryOps = binaryOps;\n  this.ternaryOps = ternaryOps;\n  this.consts = consts;\n  this.expression = expression;\n  this.savedPosition = 0;\n  this.savedCurrent = null;\n  this.savedLine = 0;\n  this.savedColumn = 0;\n}\n\nTokenStream.prototype.newToken = function (type, value, line, column) {\n  return new Token(type, value, line != null ? line : this.line, column != null ? column : this.column);\n};\n\nTokenStream.prototype.save = function () {\n  this.savedPosition = this.pos;\n  this.savedCurrent = this.current;\n  this.savedLine = this.line;\n  this.savedColumn = this.column;\n};\n\nTokenStream.prototype.restore = function () {\n  this.pos = this.savedPosition;\n  this.current = this.savedCurrent;\n  this.line = this.savedLine;\n  this.column = this.savedColumn;\n};\n\nTokenStream.prototype.next = function () {\n  if (this.pos >= this.expression.length) {\n    return this.newToken(TEOF, 'EOF');\n  }\n\n  if (this.isWhitespace() || this.isComment()) {\n    return this.next();\n  } else if (this.isNumber() ||\n      this.isOperator() ||\n      this.isString() ||\n      this.isParen() ||\n      this.isComma() ||\n      this.isNamedOp() ||\n      this.isConst() ||\n      this.isName()) {\n    return this.current;\n  } else {\n    this.parseError('Unknown character \"' + this.expression.charAt(this.pos) + '\"');\n  }\n};\n\nTokenStream.prototype.isString = function () {\n  var r = false;\n  var startLine = this.line;\n  var startColumn = this.column;\n  var startPos = this.pos;\n  var quote = this.expression.charAt(startPos);\n\n  if (quote === '\\'' || quote === '\"') {\n    this.pos++;\n    this.column++;\n    var index = this.expression.indexOf(quote, startPos + 1);\n    while (index >= 0 && this.pos < this.expression.length) {\n      this.pos = index + 1;\n      if (this.expression.charAt(index - 1) !== '\\\\') {\n        var rawString = this.expression.substring(startPos + 1, index);\n        this.current = this.newToken(TSTRING, this.unescape(rawString), startLine, startColumn);\n        var newLine = rawString.indexOf('\\n');\n        var lastNewline = -1;\n        while (newLine >= 0) {\n          this.line++;\n          this.column = 0;\n          lastNewline = newLine;\n          newLine = rawString.indexOf('\\n', newLine + 1);\n        }\n        this.column += rawString.length - lastNewline;\n        r = true;\n        break;\n      }\n      index = this.expression.indexOf(quote, index + 1);\n    }\n  }\n  return r;\n};\n\nTokenStream.prototype.isParen = function () {\n  var char = this.expression.charAt(this.pos);\n  if (char === '(' || char === ')') {\n    this.current = this.newToken(TPAREN, char);\n    this.pos++;\n    this.column++;\n    return true;\n  }\n  return false;\n};\n\nTokenStream.prototype.isComma = function () {\n  var char = this.expression.charAt(this.pos);\n  if (char === ',') {\n    this.current = this.newToken(TCOMMA, ',');\n    this.pos++;\n    this.column++;\n    return true;\n  }\n  return false;\n};\n\nTokenStream.prototype.isConst = function () {\n  var startPos = this.pos;\n  var i = startPos;\n  for (; i < this.expression.length; i++) {\n    var c = this.expression.charAt(i);\n    if (c.toUpperCase() === c.toLowerCase()) {\n      if (i === this.pos || (c !== '_' && c !== '.' && (c < '0' || c > '9'))) {\n        break;\n      }\n    }\n  }\n  if (i > startPos) {\n    var str = this.expression.substring(startPos, i);\n    if (str in this.consts) {\n      this.current = this.newToken(TNUMBER, this.consts[str]);\n      this.pos += str.length;\n      this.column += str.length;\n      return true;\n    }\n  }\n  return false;\n};\n\nTokenStream.prototype.isNamedOp = function () {\n  var startPos = this.pos;\n  var i = startPos;\n  for (; i < this.expression.length; i++) {\n    var c = this.expression.charAt(i);\n    if (c.toUpperCase() === c.toLowerCase()) {\n      if (i === this.pos || (c !== '_' && (c < '0' || c > '9'))) {\n        break;\n      }\n    }\n  }\n  if (i > startPos) {\n    var str = this.expression.substring(startPos, i);\n    if (str in this.binaryOps || str in this.unaryOps || str in this.ternaryOps) {\n      this.current = this.newToken(TOP, str);\n      this.pos += str.length;\n      this.column += str.length;\n      return true;\n    }\n  }\n  return false;\n};\n\nTokenStream.prototype.isName = function () {\n  var startPos = this.pos;\n  var i = startPos;\n  for (; i < this.expression.length; i++) {\n    var c = this.expression.charAt(i);\n    if (c.toUpperCase() === c.toLowerCase()) {\n      if (i === this.pos || (c !== '_' && (c < '0' || c > '9'))) {\n        break;\n      }\n    }\n  }\n  if (i > startPos) {\n    var str = this.expression.substring(startPos, i);\n    this.current = this.newToken(TNAME, str);\n    this.pos += str.length;\n    this.column += str.length;\n    return true;\n  }\n  return false;\n};\n\nTokenStream.prototype.isWhitespace = function () {\n  var r = false;\n  var char = this.expression.charAt(this.pos);\n  while (char === ' ' || char === '\\t' || char === '\\n' || char === '\\r') {\n    r = true;\n    this.pos++;\n    this.column++;\n    if (char === '\\n') {\n      this.line++;\n      this.column = 0;\n    }\n    if (this.pos >= this.expression.length) {\n      break;\n    }\n    char = this.expression.charAt(this.pos);\n  }\n  return r;\n};\n\nvar codePointPattern = /^[0-9a-f]{4}$/i;\n\nTokenStream.prototype.unescape = function (v) {\n  var index = v.indexOf('\\\\');\n  if (index < 0) {\n    return v;\n  }\n\n  var buffer = v.substring(0, index);\n  while (index >= 0) {\n    var c = v.charAt(++index);\n    switch (c) {\n      case '\\'':\n        buffer += '\\'';\n        break;\n      case '\"':\n        buffer += '\"';\n        break;\n      case '\\\\':\n        buffer += '\\\\';\n        break;\n      case '/':\n        buffer += '/';\n        break;\n      case 'b':\n        buffer += '\\b';\n        break;\n      case 'f':\n        buffer += '\\f';\n        break;\n      case 'n':\n        buffer += '\\n';\n        break;\n      case 'r':\n        buffer += '\\r';\n        break;\n      case 't':\n        buffer += '\\t';\n        break;\n      case 'u':\n        // interpret the following 4 characters as the hex of the unicode code point\n        var codePoint = v.substring(index + 1, index + 5);\n        if (!codePointPattern.test(codePoint)) {\n          this.parseError('Illegal escape sequence: \\\\u' + codePoint);\n        }\n        buffer += String.fromCharCode(parseInt(codePoint, 16));\n        index += 4;\n        break;\n      default:\n        throw this.parseError('Illegal escape sequence: \"\\\\' + c + '\"');\n    }\n    ++index;\n    var backslash = v.indexOf('\\\\', index);\n    buffer += v.substring(index, backslash < 0 ? v.length : backslash);\n    index = backslash;\n  }\n\n  return buffer;\n};\n\nTokenStream.prototype.isComment = function () {\n  var char = this.expression.charAt(this.pos);\n  if (char === '/' && this.expression.charAt(this.pos + 1) === '*') {\n    var startPos = this.pos;\n    this.pos = this.expression.indexOf('*/', this.pos) + 2;\n    if (this.pos === 1) {\n      this.pos = this.expression.length;\n    }\n    var comment = this.expression.substring(startPos, this.pos);\n    var newline = comment.indexOf('\\n');\n    while (newline >= 0) {\n      this.line++;\n      this.column = comment.length - newline;\n      newline = comment.indexOf('\\n', newline + 1);\n    }\n    return true;\n  }\n  return false;\n};\n\nTokenStream.prototype.isNumber = function () {\n  var valid = false;\n  var pos = this.pos;\n  var startPos = pos;\n  var resetPos = pos;\n  var column = this.column;\n  var resetColumn = column;\n  var foundDot = false;\n  var foundDigits = false;\n  var char;\n\n  while (pos < this.expression.length) {\n    char = this.expression.charAt(pos);\n    if ((char >= '0' && char <= '9') || (!foundDot && char === '.')) {\n      if (char === '.') {\n        foundDot = true;\n      } else {\n        foundDigits = true;\n      }\n      pos++;\n      column++;\n      valid = foundDigits;\n    } else {\n      break;\n    }\n  }\n\n  if (valid) {\n    resetPos = pos;\n    resetColumn = column;\n  }\n\n  if (char === 'e' || char === 'E') {\n    pos++;\n    column++;\n    var acceptSign = true;\n    var validExponent = false;\n    while (pos < this.expression.length) {\n      char = this.expression.charAt(pos);\n      if (acceptSign && (char === '+' || char === '-')) {\n        acceptSign = false;\n      } else if (char >= '0' && char <= '9') {\n        validExponent = true;\n        acceptSign = false;\n      } else {\n        break;\n      }\n      pos++;\n      column++;\n    }\n\n    if (!validExponent) {\n      pos = resetPos;\n      column = resetColumn;\n    }\n  }\n\n  if (valid) {\n    this.current = this.newToken(TNUMBER, parseFloat(this.expression.substring(startPos, pos)));\n    this.pos = pos;\n    this.column = column;\n  } else {\n    this.pos = resetPos;\n    this.column = resetColumn;\n  }\n  return valid;\n};\n\nTokenStream.prototype.isOperator = function () {\n  var char = this.expression.charAt(this.pos);\n\n  if (char === '+' || char === '-' || char === '*' || char === '/' || char === '%' || char === '^' || char === '?' || char === ':' || char === '.') {\n    this.current = this.newToken(TOP, char);\n  } else if (char === 'â' || char === 'â¢') {\n    this.current = this.newToken(TOP, '*');\n  } else if (char === '>') {\n    if (this.expression.charAt(this.pos + 1) === '=') {\n      this.current = this.newToken(TOP, '>=');\n      this.pos++;\n      this.column++;\n    } else {\n      this.current = this.newToken(TOP, '>');\n    }\n  } else if (char === '<') {\n    if (this.expression.charAt(this.pos + 1) === '=') {\n      this.current = this.newToken(TOP, '<=');\n      this.pos++;\n      this.column++;\n    } else {\n      this.current = this.newToken(TOP, '<');\n    }\n  } else if (char === '|') {\n    if (this.expression.charAt(this.pos + 1) === '|') {\n      this.current = this.newToken(TOP, '||');\n      this.pos++;\n      this.column++;\n    } else {\n      return false;\n    }\n  } else if (char === '=') {\n    if (this.expression.charAt(this.pos + 1) === '=') {\n      this.current = this.newToken(TOP, '==');\n      this.pos++;\n      this.column++;\n    } else {\n      return false;\n    }\n  } else if (char === '!') {\n    if (this.expression.charAt(this.pos + 1) === '=') {\n      this.current = this.newToken(TOP, '!=');\n      this.pos++;\n      this.column++;\n    } else {\n      this.current = this.newToken(TOP, char);\n    }\n  } else {\n    return false;\n  }\n  this.pos++;\n  this.column++;\n  return true;\n};\n\nTokenStream.prototype.parseError = function (msg) {\n  throw new Error('parse error [' + (this.line + 1) + ':' + (this.column + 1) + ']: ' + msg);\n};\n\nvar unaryInstructionCache = {};\nfunction unaryInstruction(value) {\n  var inst = unaryInstructionCache[value];\n  if (!inst) {\n    inst = unaryInstructionCache[value] = new Instruction(IOP1, value);\n  }\n  return inst;\n}\n\nvar binaryInstructionCache = {};\nfunction binaryInstruction(value) {\n  var inst = binaryInstructionCache[value];\n  if (!inst) {\n    inst = binaryInstructionCache[value] = new Instruction(IOP2, value);\n  }\n  return inst;\n}\n\nvar ternaryInstructionCache = {};\nfunction ternaryInstruction(value) {\n  var inst = ternaryInstructionCache[value];\n  if (!inst) {\n    inst = ternaryInstructionCache[value] = new Instruction(IOP3, value);\n  }\n  return inst;\n}\n\nfunction ParserState(parser, tokenStream) {\n  this.parser = parser;\n  this.tokens = tokenStream;\n  this.current = null;\n  this.nextToken = null;\n  this.next();\n  this.savedCurrent = null;\n  this.savedNextToken = null;\n}\n\nParserState.prototype.next = function () {\n  this.current = this.nextToken;\n  return (this.nextToken = this.tokens.next());\n};\n\nParserState.prototype.tokenMatches = function (token, value) {\n  if (typeof value === 'undefined') {\n    return true;\n  } else if (Array.isArray(value)) {\n    return indexOf(value, token.value) >= 0;\n  } else if (typeof value === 'function') {\n    return value(token);\n  } else {\n    return token.value === value;\n  }\n};\n\nParserState.prototype.save = function () {\n  this.savedCurrent = this.current;\n  this.savedNextToken = this.nextToken;\n  this.tokens.save();\n};\n\nParserState.prototype.restore = function () {\n  this.tokens.restore();\n  this.current = this.savedCurrent;\n  this.nextToken = this.savedNextToken;\n};\n\nParserState.prototype.accept = function (type, value) {\n  if (this.nextToken.type === type && this.tokenMatches(this.nextToken, value)) {\n    this.next();\n    return true;\n  }\n  return false;\n};\n\nParserState.prototype.expect = function (type, value) {\n  if (!this.accept(type, value)) {\n    throw new Error('parse error [' + this.tokens.line + ':' + this.tokens.column + ']: Expected ' + (value || type));\n  }\n};\n\nParserState.prototype.parseAtom = function (instr) {\n  if (this.accept(TNAME)) {\n    instr.push(new Instruction(IVAR, this.current.value));\n  } else if (this.accept(TNUMBER)) {\n    instr.push(new Instruction(INUMBER, this.current.value));\n  } else if (this.accept(TSTRING)) {\n    instr.push(new Instruction(INUMBER, this.current.value));\n  } else if (this.accept(TPAREN, '(')) {\n    this.parseExpression(instr);\n    this.expect(TPAREN, ')');\n  } else {\n    throw new Error('unexpected ' + this.nextToken);\n  }\n};\n\nParserState.prototype.parseExpression = function (instr) {\n  this.parseConditionalExpression(instr);\n};\n\nParserState.prototype.parseConditionalExpression = function (instr) {\n  this.parseOrExpression(instr);\n  while (this.accept(TOP, '?')) {\n    var trueBranch = [];\n    var falseBranch = [];\n    this.parseConditionalExpression(trueBranch);\n    this.expect(TOP, ':');\n    this.parseConditionalExpression(falseBranch);\n    instr.push(new Instruction(IEXPR, trueBranch));\n    instr.push(new Instruction(IEXPR, falseBranch));\n    instr.push(ternaryInstruction('?'));\n  }\n};\n\nParserState.prototype.parseOrExpression = function (instr) {\n  this.parseAndExpression(instr);\n  while (this.accept(TOP, 'or')) {\n    this.parseAndExpression(instr);\n    instr.push(binaryInstruction('or'));\n  }\n};\n\nParserState.prototype.parseAndExpression = function (instr) {\n  this.parseComparison(instr);\n  while (this.accept(TOP, 'and')) {\n    this.parseComparison(instr);\n    instr.push(binaryInstruction('and'));\n  }\n};\n\nParserState.prototype.parseComparison = function (instr) {\n  this.parseAddSub(instr);\n  while (this.accept(TOP, ['==', '!=', '<', '<=', '>=', '>'])) {\n    var op = this.current;\n    this.parseAddSub(instr);\n    instr.push(binaryInstruction(op.value));\n  }\n};\n\nParserState.prototype.parseAddSub = function (instr) {\n  this.parseTerm(instr);\n  while (this.accept(TOP, ['+', '-', '||'])) {\n    var op = this.current;\n    this.parseTerm(instr);\n    instr.push(binaryInstruction(op.value));\n  }\n};\n\nParserState.prototype.parseTerm = function (instr) {\n  this.parseFactor(instr);\n  while (this.accept(TOP, ['*', '/', '%'])) {\n    var op = this.current;\n    this.parseFactor(instr);\n    instr.push(binaryInstruction(op.value));\n  }\n};\n\nParserState.prototype.parseFactor = function (instr) {\n  var unaryOps = this.tokens.unaryOps;\n  function isPrefixOperator(token) {\n    return token.value in unaryOps;\n  }\n\n  this.save();\n  if (this.accept(TOP, isPrefixOperator)) {\n    if ((this.current.value !== '-' && this.current.value !== '+' && this.nextToken.type === TPAREN && this.nextToken.value === '(')) {\n      this.restore();\n      this.parseExponential(instr);\n    } else {\n      var op = this.current;\n      this.parseFactor(instr);\n      instr.push(unaryInstruction(op.value));\n    }\n  } else {\n    this.parseExponential(instr);\n  }\n};\n\nParserState.prototype.parseExponential = function (instr) {\n  this.parsePostfixExpression(instr);\n  while (this.accept(TOP, '^')) {\n    this.parseFactor(instr);\n    instr.push(binaryInstruction('^'));\n  }\n};\n\nParserState.prototype.parsePostfixExpression = function (instr) {\n  this.parseFunctionCall(instr);\n  while (this.accept(TOP, '!')) {\n    instr.push(unaryInstruction('!'));\n  }\n};\n\nParserState.prototype.parseFunctionCall = function (instr) {\n  var unaryOps = this.tokens.unaryOps;\n  function isPrefixOperator(token) {\n    return token.value in unaryOps;\n  }\n\n  if (this.accept(TOP, isPrefixOperator)) {\n    var op = this.current;\n    this.parseAtom(instr);\n    instr.push(unaryInstruction(op.value));\n  } else {\n    this.parseMemberExpression(instr);\n    while (this.accept(TPAREN, '(')) {\n      if (this.accept(TPAREN, ')')) {\n        instr.push(new Instruction(IFUNCALL, 0));\n      } else {\n        var argCount = this.parseArgumentList(instr);\n        instr.push(new Instruction(IFUNCALL, argCount));\n      }\n    }\n  }\n};\n\nParserState.prototype.parseArgumentList = function (instr) {\n  var argCount = 0;\n\n  while (!this.accept(TPAREN, ')')) {\n    this.parseExpression(instr);\n    ++argCount;\n    while (this.accept(TCOMMA)) {\n      this.parseExpression(instr);\n      ++argCount;\n    }\n  }\n\n  return argCount;\n};\n\nParserState.prototype.parseMemberExpression = function (instr) {\n  this.parseAtom(instr);\n  while (this.accept(TOP, '.')) {\n    this.expect(TNAME);\n    instr.push(new Instruction(IMEMBER, this.current.value));\n  }\n};\n\nfunction Parser() {\n  this.unaryOps = {\n    sin: Math.sin,\n    cos: Math.cos,\n    tan: Math.tan,\n    asin: Math.asin,\n    acos: Math.acos,\n    atan: Math.atan,\n    sinh: Math.sinh || sinh,\n    cosh: Math.cosh || cosh,\n    tanh: Math.tanh || tanh,\n    asinh: Math.asinh || asinh,\n    acosh: Math.acosh || acosh,\n    atanh: Math.atanh || atanh,\n    sqrt: Math.sqrt,\n    log: Math.log,\n    ln: Math.log,\n    lg: Math.log10 || log10,\n    log10: Math.log10 || log10,\n    abs: Math.abs,\n    ceil: Math.ceil,\n    floor: Math.floor,\n    round: Math.round,\n    trunc: Math.trunc || trunc,\n    '-': neg,\n    '+': Number,\n    exp: Math.exp,\n    not: not,\n    length: stringLength,\n    '!': factorial\n  };\n\n  this.binaryOps = {\n    '+': add,\n    '-': sub,\n    '*': mul,\n    '/': div,\n    '%': mod,\n    '^': Math.pow,\n    '||': concat,\n    '==': equal,\n    '!=': notEqual,\n    '>': greaterThan,\n    '<': lessThan,\n    '>=': greaterThanEqual,\n    '<=': lessThanEqual,\n    and: andOperator,\n    or: orOperator\n  };\n\n  this.ternaryOps = {\n    '?': condition\n  };\n\n  this.functions = {\n    random: random,\n    fac: factorial,\n    min: Math.min,\n    max: Math.max,\n    hypot: Math.hypot || hypot,\n    pyt: Math.hypot || hypot, // backward compat\n    pow: Math.pow,\n    atan2: Math.atan2,\n    'if': condition,\n    gamma: gamma\n  };\n\n  this.consts = {\n    E: Math.E,\n    PI: Math.PI,\n    'true': true,\n    'false': false\n  };\n}\n\nParser.parse = function (expr) {\n  return new Parser().parse(expr);\n};\n\nParser.evaluate = function (expr, variables) {\n  return Parser.parse(expr).evaluate(variables);\n};\n\nParser.prototype = {\n  parse: function (expr) {\n    var instr = [];\n    var parserState = new ParserState(this, new TokenStream(expr, this.unaryOps, this.binaryOps, this.ternaryOps, this.consts));\n    parserState.parseExpression(instr);\n    parserState.expect(TEOF, 'EOF');\n\n    return new Expression(instr, this);\n  },\n\n  evaluate: function (expr, variables) {\n    return this.parse(expr).evaluate(variables);\n  }\n};\n\nvar parser = {\n  Parser: Parser,\n  Expression: Expression\n};\n\nreturn parser;\n\n})));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2V4cHItZXZhbC9kaXN0L2J1bmRsZS5qcz9mZGU5Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbC5leHByRXZhbCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuLyohXG4gQmFzZWQgb24gbmRlZi5wYXJzZXIsIGJ5IFJhcGhhZWwgR3JhZihyQHVuZGVmaW5lZC5jaClcbiBodHRwOi8vd3d3LnVuZGVmaW5lZC5jaC9tcGFyc2VyL2luZGV4Lmh0bWxcblxuIFBvcnRlZCB0byBKYXZhU2NyaXB0IGFuZCBtb2RpZmllZCBieSBNYXR0aGV3IENydW1sZXkgKGVtYWlsQG1hdHRoZXdjcnVtbGV5LmNvbSwgaHR0cDovL3NpbGVudG1hdHQuY29tLylcblxuIFlvdSBhcmUgZnJlZSB0byB1c2UgYW5kIG1vZGlmeSB0aGlzIGNvZGUgaW4gYW55d2F5IHlvdSBmaW5kIHVzZWZ1bC4gUGxlYXNlIGxlYXZlIHRoaXMgY29tbWVudCBpbiB0aGUgY29kZVxuIHRvIGFja25vd2xlZGdlIGl0cyBvcmlnaW5hbCBzb3VyY2UuIElmIHlvdSBmZWVsIGxpa2UgaXQsIEkgZW5qb3kgaGVhcmluZyBhYm91dCBwcm9qZWN0cyB0aGF0IHVzZSBteSBjb2RlLFxuIGJ1dCBkb24ndCBmZWVsIGxpa2UgeW91IGhhdmUgdG8gbGV0IG1lIGtub3cgb3IgYXNrIHBlcm1pc3Npb24uXG4qL1xuXG5mdW5jdGlvbiBpbmRleE9mKGFycmF5LCBvYmopIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJheVtpXSA9PT0gb2JqKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG52YXIgSU5VTUJFUiA9ICdJTlVNQkVSJztcbnZhciBJT1AxID0gJ0lPUDEnO1xudmFyIElPUDIgPSAnSU9QMic7XG52YXIgSU9QMyA9ICdJT1AzJztcbnZhciBJVkFSID0gJ0lWQVInO1xudmFyIElGVU5DQUxMID0gJ0lGVU5DQUxMJztcbnZhciBJRVhQUiA9ICdJRVhQUic7XG52YXIgSU1FTUJFUiA9ICdJTUVNQkVSJztcblxuZnVuY3Rpb24gSW5zdHJ1Y3Rpb24odHlwZSwgdmFsdWUpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy52YWx1ZSA9ICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSA/IHZhbHVlIDogMDtcbn1cblxuSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgIGNhc2UgSU5VTUJFUjpcbiAgICBjYXNlIElPUDE6XG4gICAgY2FzZSBJT1AyOlxuICAgIGNhc2UgSU9QMzpcbiAgICBjYXNlIElWQVI6XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICBjYXNlIElGVU5DQUxMOlxuICAgICAgcmV0dXJuICdDQUxMICcgKyB0aGlzLnZhbHVlO1xuICAgIGNhc2UgSU1FTUJFUjpcbiAgICAgIHJldHVybiAnLicgKyB0aGlzLnZhbHVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ0ludmFsaWQgSW5zdHJ1Y3Rpb24nO1xuICB9XG59O1xuXG5mdW5jdGlvbiBFeHByZXNzaW9uKHRva2VucywgcGFyc2VyKSB7XG4gIHRoaXMudG9rZW5zID0gdG9rZW5zO1xuICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgdGhpcy51bmFyeU9wcyA9IHBhcnNlci51bmFyeU9wcztcbiAgdGhpcy5iaW5hcnlPcHMgPSBwYXJzZXIuYmluYXJ5T3BzO1xuICB0aGlzLnRlcm5hcnlPcHMgPSBwYXJzZXIudGVybmFyeU9wcztcbiAgdGhpcy5mdW5jdGlvbnMgPSBwYXJzZXIuZnVuY3Rpb25zO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVWYWx1ZSh2KSB7XG4gIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodikucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JykucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jyk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5KHRva2VucywgdW5hcnlPcHMsIGJpbmFyeU9wcywgdGVybmFyeU9wcywgdmFsdWVzKSB7XG4gIHZhciBuc3RhY2sgPSBbXTtcbiAgdmFyIG5ld2V4cHJlc3Npb24gPSBbXTtcbiAgdmFyIG4xLCBuMiwgbjM7XG4gIHZhciBmO1xuICBmb3IgKHZhciBpID0gMCwgTCA9IHRva2Vucy5sZW5ndGg7IGkgPCBMOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHRva2Vuc1tpXTtcbiAgICB2YXIgdHlwZSA9IGl0ZW0udHlwZTtcbiAgICBpZiAodHlwZSA9PT0gSU5VTUJFUikge1xuICAgICAgbnN0YWNrLnB1c2goaXRlbSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJVkFSICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpdGVtLnZhbHVlKSkge1xuICAgICAgaXRlbSA9IG5ldyBJbnN0cnVjdGlvbihJTlVNQkVSLCB2YWx1ZXNbaXRlbS52YWx1ZV0pO1xuICAgICAgbnN0YWNrLnB1c2goaXRlbSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJT1AyICYmIG5zdGFjay5sZW5ndGggPiAxKSB7XG4gICAgICBuMiA9IG5zdGFjay5wb3AoKTtcbiAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgZiA9IGJpbmFyeU9wc1tpdGVtLnZhbHVlXTtcbiAgICAgIGl0ZW0gPSBuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgZihuMS52YWx1ZSwgbjIudmFsdWUpKTtcbiAgICAgIG5zdGFjay5wdXNoKGl0ZW0pO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU9QMyAmJiBuc3RhY2subGVuZ3RoID4gMikge1xuICAgICAgbjMgPSBuc3RhY2sucG9wKCk7XG4gICAgICBuMiA9IG5zdGFjay5wb3AoKTtcbiAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgaWYgKGl0ZW0udmFsdWUgPT09ICc/Jykge1xuICAgICAgICBuc3RhY2sucHVzaChuMS52YWx1ZSA/IG4yLnZhbHVlIDogbjMudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZiA9IHRlcm5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICAgIGl0ZW0gPSBuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgZihuMS52YWx1ZSwgbjIudmFsdWUsIG4zLnZhbHVlKSk7XG4gICAgICAgIG5zdGFjay5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU9QMSAmJiBuc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICBmID0gdW5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICBpdGVtID0gbmV3IEluc3RydWN0aW9uKElOVU1CRVIsIGYobjEudmFsdWUpKTtcbiAgICAgIG5zdGFjay5wdXNoKGl0ZW0pO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSUVYUFIpIHtcbiAgICAgIHdoaWxlIChuc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICBuZXdleHByZXNzaW9uLnB1c2gobnN0YWNrLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgICAgbmV3ZXhwcmVzc2lvbi5wdXNoKG5ldyBJbnN0cnVjdGlvbihJRVhQUiwgc2ltcGxpZnkoaXRlbS52YWx1ZSwgdW5hcnlPcHMsIGJpbmFyeU9wcywgdGVybmFyeU9wcywgdmFsdWVzKSkpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU1FTUJFUiAmJiBuc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICBuc3RhY2sucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgbjEudmFsdWVbaXRlbS52YWx1ZV0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKG5zdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIG5ld2V4cHJlc3Npb24ucHVzaChuc3RhY2suc2hpZnQoKSk7XG4gICAgICB9XG4gICAgICBuZXdleHByZXNzaW9uLnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChuc3RhY2subGVuZ3RoID4gMCkge1xuICAgIG5ld2V4cHJlc3Npb24ucHVzaChuc3RhY2suc2hpZnQoKSk7XG4gIH1cbiAgcmV0dXJuIG5ld2V4cHJlc3Npb247XG59XG5cbkV4cHJlc3Npb24ucHJvdG90eXBlLnNpbXBsaWZ5ID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICB2YWx1ZXMgPSB2YWx1ZXMgfHwge307XG4gIHJldHVybiBuZXcgRXhwcmVzc2lvbihzaW1wbGlmeSh0aGlzLnRva2VucywgdGhpcy51bmFyeU9wcywgdGhpcy5iaW5hcnlPcHMsIHRoaXMudGVybmFyeU9wcywgdmFsdWVzKSwgdGhpcy5wYXJzZXIpO1xufTtcblxuZnVuY3Rpb24gc3Vic3RpdHV0ZSh0b2tlbnMsIHZhcmlhYmxlLCBleHByKSB7XG4gIHZhciBuZXdleHByZXNzaW9uID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBMID0gdG9rZW5zLmxlbmd0aDsgaSA8IEw7IGkrKykge1xuICAgIHZhciBpdGVtID0gdG9rZW5zW2ldO1xuICAgIHZhciB0eXBlID0gaXRlbS50eXBlO1xuICAgIGlmICh0eXBlID09PSBJVkFSICYmIGl0ZW0udmFsdWUgPT09IHZhcmlhYmxlKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGV4cHIudG9rZW5zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBleHByaXRlbSA9IGV4cHIudG9rZW5zW2pdO1xuICAgICAgICB2YXIgcmVwbGl0ZW07XG4gICAgICAgIGlmIChleHByaXRlbS50eXBlID09PSBJT1AxKSB7XG4gICAgICAgICAgcmVwbGl0ZW0gPSB1bmFyeUluc3RydWN0aW9uKGV4cHJpdGVtLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChleHByaXRlbS50eXBlID09PSBJT1AyKSB7XG4gICAgICAgICAgcmVwbGl0ZW0gPSBiaW5hcnlJbnN0cnVjdGlvbihleHByaXRlbS52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhwcml0ZW0udHlwZSA9PT0gSU9QMykge1xuICAgICAgICAgIHJlcGxpdGVtID0gdGVybmFyeUluc3RydWN0aW9uKGV4cHJpdGVtLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsaXRlbSA9IG5ldyBJbnN0cnVjdGlvbihleHByaXRlbS50eXBlLCBleHByaXRlbS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3ZXhwcmVzc2lvbi5wdXNoKHJlcGxpdGVtKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElFWFBSKSB7XG4gICAgICBuZXdleHByZXNzaW9uLnB1c2gobmV3IEluc3RydWN0aW9uKElFWFBSLCBzdWJzdGl0dXRlKGl0ZW0udmFsdWUsIHZhcmlhYmxlLCBleHByKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdleHByZXNzaW9uLnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdleHByZXNzaW9uO1xufVxuXG5FeHByZXNzaW9uLnByb3RvdHlwZS5zdWJzdGl0dXRlID0gZnVuY3Rpb24gKHZhcmlhYmxlLCBleHByKSB7XG4gIGlmICghKGV4cHIgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSkge1xuICAgIGV4cHIgPSB0aGlzLnBhcnNlci5wYXJzZShTdHJpbmcoZXhwcikpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBFeHByZXNzaW9uKHN1YnN0aXR1dGUodGhpcy50b2tlbnMsIHZhcmlhYmxlLCBleHByKSwgdGhpcy5wYXJzZXIpO1xufTtcblxuZnVuY3Rpb24gZXZhbHVhdGUodG9rZW5zLCBleHByLCB2YWx1ZXMpIHtcbiAgdmFyIG5zdGFjayA9IFtdO1xuICB2YXIgbjEsIG4yLCBuMztcbiAgdmFyIGY7XG4gIGZvciAodmFyIGkgPSAwLCBMID0gdG9rZW5zLmxlbmd0aDsgaSA8IEw7IGkrKykge1xuICAgIHZhciBpdGVtID0gdG9rZW5zW2ldO1xuICAgIHZhciB0eXBlID0gaXRlbS50eXBlO1xuICAgIGlmICh0eXBlID09PSBJTlVNQkVSKSB7XG4gICAgICBuc3RhY2sucHVzaChpdGVtLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElPUDIpIHtcbiAgICAgIG4yID0gbnN0YWNrLnBvcCgpO1xuICAgICAgbjEgPSBuc3RhY2sucG9wKCk7XG4gICAgICBmID0gZXhwci5iaW5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICBuc3RhY2sucHVzaChmKG4xLCBuMikpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU9QMykge1xuICAgICAgbjMgPSBuc3RhY2sucG9wKCk7XG4gICAgICBuMiA9IG5zdGFjay5wb3AoKTtcbiAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgaWYgKGl0ZW0udmFsdWUgPT09ICc/Jykge1xuICAgICAgICBuc3RhY2sucHVzaChldmFsdWF0ZShuMSA/IG4yIDogbjMsIGV4cHIsIHZhbHVlcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZiA9IGV4cHIudGVybmFyeU9wc1tpdGVtLnZhbHVlXTtcbiAgICAgICAgbnN0YWNrLnB1c2goZihuMSwgbjIsIG4zKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJVkFSKSB7XG4gICAgICBpZiAoaXRlbS52YWx1ZSBpbiBleHByLmZ1bmN0aW9ucykge1xuICAgICAgICBuc3RhY2sucHVzaChleHByLmZ1bmN0aW9uc1tpdGVtLnZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdiA9IHZhbHVlc1tpdGVtLnZhbHVlXTtcbiAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5zdGFjay5wdXNoKHYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5kZWZpbmVkIHZhcmlhYmxlOiAnICsgaXRlbS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElPUDEpIHtcbiAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgZiA9IGV4cHIudW5hcnlPcHNbaXRlbS52YWx1ZV07XG4gICAgICBuc3RhY2sucHVzaChmKG4xKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJRlVOQ0FMTCkge1xuICAgICAgdmFyIGFyZ0NvdW50ID0gaXRlbS52YWx1ZTtcbiAgICAgIHZhciBhcmdzID0gW107XG4gICAgICB3aGlsZSAoYXJnQ291bnQtLSA+IDApIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KG5zdGFjay5wb3AoKSk7XG4gICAgICB9XG4gICAgICBmID0gbnN0YWNrLnBvcCgpO1xuICAgICAgaWYgKGYuYXBwbHkgJiYgZi5jYWxsKSB7XG4gICAgICAgIG5zdGFjay5wdXNoKGYuYXBwbHkodW5kZWZpbmVkLCBhcmdzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZiArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElFWFBSKSB7XG4gICAgICBuc3RhY2sucHVzaChpdGVtLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElNRU1CRVIpIHtcbiAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgbnN0YWNrLnB1c2gobjFbaXRlbS52YWx1ZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgRXhwcmVzc2lvbicpO1xuICAgIH1cbiAgfVxuICBpZiAobnN0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgRXhwcmVzc2lvbiAocGFyaXR5KScpO1xuICB9XG4gIHJldHVybiBuc3RhY2tbMF07XG59XG5cbkV4cHJlc3Npb24ucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICB2YWx1ZXMgPSB2YWx1ZXMgfHwge307XG4gIHJldHVybiBldmFsdWF0ZSh0aGlzLnRva2VucywgdGhpcywgdmFsdWVzKTtcbn07XG5cbmZ1bmN0aW9uIGV4cHJlc3Npb25Ub1N0cmluZyh0b2tlbnMsIHRvSlMpIHtcbiAgdmFyIG5zdGFjayA9IFtdO1xuICB2YXIgbjEsIG4yLCBuMztcbiAgdmFyIGY7XG4gIGZvciAodmFyIGkgPSAwLCBMID0gdG9rZW5zLmxlbmd0aDsgaSA8IEw7IGkrKykge1xuICAgIHZhciBpdGVtID0gdG9rZW5zW2ldO1xuICAgIHZhciB0eXBlID0gaXRlbS50eXBlO1xuICAgIGlmICh0eXBlID09PSBJTlVNQkVSKSB7XG4gICAgICBpZiAodHlwZW9mIGl0ZW0udmFsdWUgPT09ICdudW1iZXInICYmIGl0ZW0udmFsdWUgPCAwKSB7XG4gICAgICAgIG5zdGFjay5wdXNoKCcoJyArIGl0ZW0udmFsdWUgKyAnKScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbnN0YWNrLnB1c2goZXNjYXBlVmFsdWUoaXRlbS52YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSU9QMikge1xuICAgICAgbjIgPSBuc3RhY2sucG9wKCk7XG4gICAgICBuMSA9IG5zdGFjay5wb3AoKTtcbiAgICAgIGYgPSBpdGVtLnZhbHVlO1xuICAgICAgaWYgKHRvSlMpIHtcbiAgICAgICAgaWYgKGYgPT09ICdeJykge1xuICAgICAgICAgIG5zdGFjay5wdXNoKCdNYXRoLnBvdygnICsgbjEgKyAnLCAnICsgbjIgKyAnKScpO1xuICAgICAgICB9IGVsc2UgaWYgKGYgPT09ICdhbmQnKSB7XG4gICAgICAgICAgbnN0YWNrLnB1c2goJyghIScgKyBuMSArICcgJiYgISEnICsgbjIgKyAnKScpO1xuICAgICAgICB9IGVsc2UgaWYgKGYgPT09ICdvcicpIHtcbiAgICAgICAgICBuc3RhY2sucHVzaCgnKCEhJyArIG4xICsgJyB8fCAhIScgKyBuMiArICcpJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZiA9PT0gJ3x8Jykge1xuICAgICAgICAgIG5zdGFjay5wdXNoKCcoU3RyaW5nKCcgKyBuMSArICcpICsgU3RyaW5nKCcgKyBuMiArICcpKScpO1xuICAgICAgICB9IGVsc2UgaWYgKGYgPT09ICc9PScpIHtcbiAgICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBuMSArICcgPT09ICcgKyBuMiArICcpJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZiA9PT0gJyE9Jykge1xuICAgICAgICAgIG5zdGFjay5wdXNoKCcoJyArIG4xICsgJyAhPT0gJyArIG4yICsgJyknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBuMSArICcgJyArIGYgKyAnICcgKyBuMiArICcpJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5zdGFjay5wdXNoKCcoJyArIG4xICsgJyAnICsgZiArICcgJyArIG4yICsgJyknKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElPUDMpIHtcbiAgICAgIG4zID0gbnN0YWNrLnBvcCgpO1xuICAgICAgbjIgPSBuc3RhY2sucG9wKCk7XG4gICAgICBuMSA9IG5zdGFjay5wb3AoKTtcbiAgICAgIGYgPSBpdGVtLnZhbHVlO1xuICAgICAgaWYgKGYgPT09ICc/Jykge1xuICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBuMSArICcgPyAnICsgbjIgKyAnIDogJyArIG4zICsgJyknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBFeHByZXNzaW9uJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJVkFSKSB7XG4gICAgICBuc3RhY2sucHVzaChpdGVtLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IElPUDEpIHtcbiAgICAgIG4xID0gbnN0YWNrLnBvcCgpO1xuICAgICAgZiA9IGl0ZW0udmFsdWU7XG4gICAgICBpZiAoZiA9PT0gJy0nIHx8IGYgPT09ICcrJykge1xuICAgICAgICBuc3RhY2sucHVzaCgnKCcgKyBmICsgbjEgKyAnKScpO1xuICAgICAgfSBlbHNlIGlmICh0b0pTKSB7XG4gICAgICAgIGlmIChmID09PSAnbm90Jykge1xuICAgICAgICAgIG5zdGFjay5wdXNoKCcoJyArICchJyArIG4xICsgJyknKTtcbiAgICAgICAgfSBlbHNlIGlmIChmID09PSAnIScpIHtcbiAgICAgICAgICBuc3RhY2sucHVzaCgnZmFjKCcgKyBuMSArICcpJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbnN0YWNrLnB1c2goZiArICcoJyArIG4xICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChmID09PSAnIScpIHtcbiAgICAgICAgbnN0YWNrLnB1c2goJygnICsgbjEgKyAnISknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5zdGFjay5wdXNoKCcoJyArIGYgKyAnICcgKyBuMSArICcpJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJRlVOQ0FMTCkge1xuICAgICAgdmFyIGFyZ0NvdW50ID0gaXRlbS52YWx1ZTtcbiAgICAgIHZhciBhcmdzID0gW107XG4gICAgICB3aGlsZSAoYXJnQ291bnQtLSA+IDApIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KG5zdGFjay5wb3AoKSk7XG4gICAgICB9XG4gICAgICBmID0gbnN0YWNrLnBvcCgpO1xuICAgICAgbnN0YWNrLnB1c2goZiArICcoJyArIGFyZ3Muam9pbignLCAnKSArICcpJyk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJTUVNQkVSKSB7XG4gICAgICBuMSA9IG5zdGFjay5wb3AoKTtcbiAgICAgIG5zdGFjay5wdXNoKG4xICsgJy4nICsgaXRlbS52YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBJRVhQUikge1xuICAgICAgbnN0YWNrLnB1c2goJygnICsgZXhwcmVzc2lvblRvU3RyaW5nKGl0ZW0udmFsdWUsIHRvSlMpICsgJyknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIEV4cHJlc3Npb24nKTtcbiAgICB9XG4gIH1cbiAgaWYgKG5zdGFjay5sZW5ndGggPiAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIEV4cHJlc3Npb24gKHBhcml0eSknKTtcbiAgfVxuICByZXR1cm4gbnN0YWNrWzBdO1xufVxuXG5FeHByZXNzaW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGV4cHJlc3Npb25Ub1N0cmluZyh0aGlzLnRva2VucywgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gZ2V0U3ltYm9scyh0b2tlbnMsIHN5bWJvbHMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIEwgPSB0b2tlbnMubGVuZ3RoOyBpIDwgTDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSB0b2tlbnNbaV07XG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gSVZBUiAmJiAoaW5kZXhPZihzeW1ib2xzLCBpdGVtLnZhbHVlKSA9PT0gLTEpKSB7XG4gICAgICBzeW1ib2xzLnB1c2goaXRlbS52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IElFWFBSKSB7XG4gICAgICBnZXRTeW1ib2xzKGl0ZW0udmFsdWUsIHN5bWJvbHMpO1xuICAgIH1cbiAgfVxufVxuXG5FeHByZXNzaW9uLnByb3RvdHlwZS5zeW1ib2xzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmFycyA9IFtdO1xuICBnZXRTeW1ib2xzKHRoaXMudG9rZW5zLCB2YXJzKTtcbiAgcmV0dXJuIHZhcnM7XG59O1xuXG5FeHByZXNzaW9uLnByb3RvdHlwZS52YXJpYWJsZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2YXJzID0gW107XG4gIGdldFN5bWJvbHModGhpcy50b2tlbnMsIHZhcnMpO1xuICB2YXIgZnVuY3Rpb25zID0gdGhpcy5mdW5jdGlvbnM7XG4gIHJldHVybiB2YXJzLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiAhKG5hbWUgaW4gZnVuY3Rpb25zKTtcbiAgfSk7XG59O1xuXG5FeHByZXNzaW9uLnByb3RvdHlwZS50b0pTRnVuY3Rpb24gPSBmdW5jdGlvbiAocGFyYW0sIHZhcmlhYmxlcykge1xuICB2YXIgZXhwciA9IHRoaXM7XG4gIHZhciBmID0gbmV3IEZ1bmN0aW9uKHBhcmFtLCAnd2l0aCh0aGlzLmZ1bmN0aW9ucykgd2l0aCAodGhpcy50ZXJuYXJ5T3BzKSB3aXRoICh0aGlzLmJpbmFyeU9wcykgd2l0aCAodGhpcy51bmFyeU9wcykgeyByZXR1cm4gJyArIGV4cHJlc3Npb25Ub1N0cmluZyh0aGlzLnNpbXBsaWZ5KHZhcmlhYmxlcykudG9rZW5zLCB0cnVlKSArICc7IH0nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmLmFwcGx5KGV4cHIsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBhZGQoYSwgYikge1xuICByZXR1cm4gTnVtYmVyKGEpICsgTnVtYmVyKGIpO1xufVxuZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuZnVuY3Rpb24gbXVsKGEsIGIpIHtcbiAgcmV0dXJuIGEgKiBiO1xufVxuZnVuY3Rpb24gZGl2KGEsIGIpIHtcbiAgcmV0dXJuIGEgLyBiO1xufVxuZnVuY3Rpb24gbW9kKGEsIGIpIHtcbiAgcmV0dXJuIGEgJSBiO1xufVxuZnVuY3Rpb24gY29uY2F0KGEsIGIpIHtcbiAgcmV0dXJuICcnICsgYSArIGI7XG59XG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuZnVuY3Rpb24gbm90RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuKGEsIGIpIHtcbiAgcmV0dXJuIGEgPiBiO1xufVxuZnVuY3Rpb24gbGVzc1RoYW4oYSwgYikge1xuICByZXR1cm4gYSA8IGI7XG59XG5mdW5jdGlvbiBncmVhdGVyVGhhbkVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPj0gYjtcbn1cbmZ1bmN0aW9uIGxlc3NUaGFuRXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA8PSBiO1xufVxuZnVuY3Rpb24gYW5kT3BlcmF0b3IoYSwgYikge1xuICByZXR1cm4gQm9vbGVhbihhICYmIGIpO1xufVxuZnVuY3Rpb24gb3JPcGVyYXRvcihhLCBiKSB7XG4gIHJldHVybiBCb29sZWFuKGEgfHwgYik7XG59XG5mdW5jdGlvbiBzaW5oKGEpIHtcbiAgcmV0dXJuICgoTWF0aC5leHAoYSkgLSBNYXRoLmV4cCgtYSkpIC8gMik7XG59XG5mdW5jdGlvbiBjb3NoKGEpIHtcbiAgcmV0dXJuICgoTWF0aC5leHAoYSkgKyBNYXRoLmV4cCgtYSkpIC8gMik7XG59XG5mdW5jdGlvbiB0YW5oKGEpIHtcbiAgaWYgKGEgPT09IEluZmluaXR5KSByZXR1cm4gMTtcbiAgaWYgKGEgPT09IC1JbmZpbml0eSkgcmV0dXJuIC0xO1xuICByZXR1cm4gKE1hdGguZXhwKGEpIC0gTWF0aC5leHAoLWEpKSAvIChNYXRoLmV4cChhKSArIE1hdGguZXhwKC1hKSk7XG59XG5mdW5jdGlvbiBhc2luaChhKSB7XG4gIGlmIChhID09PSAtSW5maW5pdHkpIHJldHVybiBhO1xuICByZXR1cm4gTWF0aC5sb2coYSArIE1hdGguc3FydChhICogYSArIDEpKTtcbn1cbmZ1bmN0aW9uIGFjb3NoKGEpIHtcbiAgcmV0dXJuIE1hdGgubG9nKGEgKyBNYXRoLnNxcnQoYSAqIGEgLSAxKSk7XG59XG5mdW5jdGlvbiBhdGFuaChhKSB7XG4gIHJldHVybiAoTWF0aC5sb2coKDEgKyBhKSAvICgxIC0gYSkpIC8gMik7XG59XG5mdW5jdGlvbiBsb2cxMChhKSB7XG4gIHJldHVybiBNYXRoLmxvZyhhKSAqIE1hdGguTE9HMTBFO1xufVxuZnVuY3Rpb24gbmVnKGEpIHtcbiAgcmV0dXJuIC1hO1xufVxuZnVuY3Rpb24gbm90KGEpIHtcbiAgcmV0dXJuICFhO1xufVxuZnVuY3Rpb24gdHJ1bmMoYSkge1xuICByZXR1cm4gYSA8IDAgPyBNYXRoLmNlaWwoYSkgOiBNYXRoLmZsb29yKGEpO1xufVxuZnVuY3Rpb24gcmFuZG9tKGEpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAoYSB8fCAxKTtcbn1cbmZ1bmN0aW9uIGZhY3RvcmlhbChhKSB7IC8vIGEhXG4gIHJldHVybiBnYW1tYShhICsgMSk7XG59XG5mdW5jdGlvbiBzdHJpbmdMZW5ndGgocykge1xuICByZXR1cm4gU3RyaW5nKHMpLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gaHlwb3QoKSB7XG4gIHZhciBzdW0gPSAwO1xuICB2YXIgbGFyZyA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBMID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IEw7IGkrKykge1xuICAgIHZhciBhcmcgPSBNYXRoLmFicyhhcmd1bWVudHNbaV0pO1xuICAgIHZhciBkaXY7XG4gICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgbGFyZyA9IGFyZztcbiAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdW0gKz0gYXJnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbn1cblxuZnVuY3Rpb24gY29uZGl0aW9uKGNvbmQsIHllcCwgbm9wZSkge1xuICByZXR1cm4gY29uZCA/IHllcCA6IG5vcGU7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gaXNGaW5pdGUodmFsdWUpICYmICh2YWx1ZSA9PT0gTWF0aC5yb3VuZCh2YWx1ZSkpO1xufVxuXG52YXIgR0FNTUFfRyA9IDQuNzQyMTg3NTtcbnZhciBHQU1NQV9QID0gW1xuICAwLjk5OTk5OTk5OTk5OTk5NzA5MTgyLFxuICA1Ny4xNTYyMzU2NjU4NjI5MjM1MTcsIC01OS41OTc5NjAzNTU0NzU0OTEyNDgsXG4gIDE0LjEzNjA5Nzk3NDc0MTc0NzE3NCwgLTAuNDkxOTEzODE2MDk3NjIwMTk5NzgsXG4gIDAuMzM5OTQ2NDk5ODQ4MTE4ODg2OTllLTQsXG4gIDAuNDY1MjM2Mjg5MjcwNDg1NzU2NjVlLTQsIC0wLjk4Mzc0NDc1MzA0ODc5NTY0Njc3ZS00LFxuICAwLjE1ODA4ODcwMzIyNDkxMjQ4ODg0ZS0zLCAtMC4yMTAyNjQ0NDE3MjQxMDQ4ODMxOWUtMyxcbiAgMC4yMTc0Mzk2MTgxMTUyMTI2NDMyMGUtMywgLTAuMTY0MzE4MTA2NTM2NzYzODkwMjJlLTMsXG4gIDAuODQ0MTgyMjM5ODM4NTI3NDMyOTNlLTQsIC0wLjI2MTkwODM4NDAxNTgxNDA4NjcwZS00LFxuICAwLjM2ODk5MTgyNjU5NTMxNjIyNzA0ZS01XG5dO1xuXG4vLyBHYW1tYSBmdW5jdGlvbiBmcm9tIG1hdGguanNcbmZ1bmN0aW9uIGdhbW1hKG4pIHtcbiAgdmFyIHQsIHg7XG5cbiAgaWYgKGlzSW50ZWdlcihuKSkge1xuICAgIGlmIChuIDw9IDApIHtcbiAgICAgIHJldHVybiBpc0Zpbml0ZShuKSA/IEluZmluaXR5IDogTmFOO1xuICAgIH1cblxuICAgIGlmIChuID4gMTcxKSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7IC8vIFdpbGwgb3ZlcmZsb3dcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBuIC0gMjtcbiAgICB2YXIgcmVzID0gbiAtIDE7XG4gICAgd2hpbGUgKHZhbHVlID4gMSkge1xuICAgICAgcmVzICo9IHZhbHVlO1xuICAgICAgdmFsdWUtLTtcbiAgICB9XG5cbiAgICBpZiAocmVzID09PSAwKSB7XG4gICAgICByZXMgPSAxOyAvLyAwISBpcyBwZXIgZGVmaW5pdGlvbiAxXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIGlmIChuIDwgMC41KSB7XG4gICAgcmV0dXJuIE1hdGguUEkgLyAoTWF0aC5zaW4oTWF0aC5QSSAqIG4pICogZ2FtbWEoMSAtIG4pKTtcbiAgfVxuXG4gIGlmIChuID49IDE3MS4zNSkge1xuICAgIHJldHVybiBJbmZpbml0eTsgLy8gd2lsbCBvdmVyZmxvd1xuICB9XG5cbiAgaWYgKG4gPiA4NS4wKSB7IC8vIEV4dGVuZGVkIFN0aXJsaW5nIEFwcHJveFxuICAgIHZhciB0d29OID0gbiAqIG47XG4gICAgdmFyIHRocmVlTiA9IHR3b04gKiBuO1xuICAgIHZhciBmb3VyTiA9IHRocmVlTiAqIG47XG4gICAgdmFyIGZpdmVOID0gZm91ck4gKiBuO1xuICAgIHJldHVybiBNYXRoLnNxcnQoMiAqIE1hdGguUEkgLyBuKSAqIE1hdGgucG93KChuIC8gTWF0aC5FKSwgbikgKlxuICAgICAgKDEgKyAxIC8gKDEyICogbikgKyAxIC8gKDI4OCAqIHR3b04pIC0gMTM5IC8gKDUxODQwICogdGhyZWVOKSAtXG4gICAgICA1NzEgLyAoMjQ4ODMyMCAqIGZvdXJOKSArIDE2Mzg3OSAvICgyMDkwMTg4ODAgKiBmaXZlTikgK1xuICAgICAgNTI0NjgxOSAvICg3NTI0Njc5NjgwMCAqIGZpdmVOICogbikpO1xuICB9XG5cbiAgLS1uO1xuICB4ID0gR0FNTUFfUFswXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBHQU1NQV9QLmxlbmd0aDsgKytpKSB7XG4gICAgeCArPSBHQU1NQV9QW2ldIC8gKG4gKyBpKTtcbiAgfVxuXG4gIHQgPSBuICsgR0FNTUFfRyArIDAuNTtcbiAgcmV0dXJuIE1hdGguc3FydCgyICogTWF0aC5QSSkgKiBNYXRoLnBvdyh0LCBuICsgMC41KSAqIE1hdGguZXhwKC10KSAqIHg7XG59XG5cbnZhciBURU9GID0gJ1RFT0YnO1xudmFyIFRPUCA9ICdUT1AnO1xudmFyIFROVU1CRVIgPSAnVE5VTUJFUic7XG52YXIgVFNUUklORyA9ICdUU1RSSU5HJztcbnZhciBUUEFSRU4gPSAnVFBBUkVOJztcbnZhciBUQ09NTUEgPSAnVENPTU1BJztcbnZhciBUTkFNRSA9ICdUTkFNRSc7XG5cbmZ1bmN0aW9uIFRva2VuKHR5cGUsIHZhbHVlLCBsaW5lLCBjb2x1bW4pIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmxpbmUgPSBsaW5lO1xuICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbn1cblxuVG9rZW4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy50eXBlICsgJzogJyArIHRoaXMudmFsdWU7XG59O1xuXG5mdW5jdGlvbiBUb2tlblN0cmVhbShleHByZXNzaW9uLCB1bmFyeU9wcywgYmluYXJ5T3BzLCB0ZXJuYXJ5T3BzLCBjb25zdHMpIHtcbiAgdGhpcy5wb3MgPSAwO1xuICB0aGlzLmxpbmUgPSAwO1xuICB0aGlzLmNvbHVtbiA9IDA7XG4gIHRoaXMuY3VycmVudCA9IG51bGw7XG4gIHRoaXMudW5hcnlPcHMgPSB1bmFyeU9wcztcbiAgdGhpcy5iaW5hcnlPcHMgPSBiaW5hcnlPcHM7XG4gIHRoaXMudGVybmFyeU9wcyA9IHRlcm5hcnlPcHM7XG4gIHRoaXMuY29uc3RzID0gY29uc3RzO1xuICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICB0aGlzLnNhdmVkUG9zaXRpb24gPSAwO1xuICB0aGlzLnNhdmVkQ3VycmVudCA9IG51bGw7XG4gIHRoaXMuc2F2ZWRMaW5lID0gMDtcbiAgdGhpcy5zYXZlZENvbHVtbiA9IDA7XG59XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5uZXdUb2tlbiA9IGZ1bmN0aW9uICh0eXBlLCB2YWx1ZSwgbGluZSwgY29sdW1uKSB7XG4gIHJldHVybiBuZXcgVG9rZW4odHlwZSwgdmFsdWUsIGxpbmUgIT0gbnVsbCA/IGxpbmUgOiB0aGlzLmxpbmUsIGNvbHVtbiAhPSBudWxsID8gY29sdW1uIDogdGhpcy5jb2x1bW4pO1xufTtcblxuVG9rZW5TdHJlYW0ucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2F2ZWRQb3NpdGlvbiA9IHRoaXMucG9zO1xuICB0aGlzLnNhdmVkQ3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgdGhpcy5zYXZlZExpbmUgPSB0aGlzLmxpbmU7XG4gIHRoaXMuc2F2ZWRDb2x1bW4gPSB0aGlzLmNvbHVtbjtcbn07XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnBvcyA9IHRoaXMuc2F2ZWRQb3NpdGlvbjtcbiAgdGhpcy5jdXJyZW50ID0gdGhpcy5zYXZlZEN1cnJlbnQ7XG4gIHRoaXMubGluZSA9IHRoaXMuc2F2ZWRMaW5lO1xuICB0aGlzLmNvbHVtbiA9IHRoaXMuc2F2ZWRDb2x1bW47XG59O1xuXG5Ub2tlblN0cmVhbS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucG9zID49IHRoaXMuZXhwcmVzc2lvbi5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5uZXdUb2tlbihURU9GLCAnRU9GJyk7XG4gIH1cblxuICBpZiAodGhpcy5pc1doaXRlc3BhY2UoKSB8fCB0aGlzLmlzQ29tbWVudCgpKSB7XG4gICAgcmV0dXJuIHRoaXMubmV4dCgpO1xuICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIoKSB8fFxuICAgICAgdGhpcy5pc09wZXJhdG9yKCkgfHxcbiAgICAgIHRoaXMuaXNTdHJpbmcoKSB8fFxuICAgICAgdGhpcy5pc1BhcmVuKCkgfHxcbiAgICAgIHRoaXMuaXNDb21tYSgpIHx8XG4gICAgICB0aGlzLmlzTmFtZWRPcCgpIHx8XG4gICAgICB0aGlzLmlzQ29uc3QoKSB8fFxuICAgICAgdGhpcy5pc05hbWUoKSkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wYXJzZUVycm9yKCdVbmtub3duIGNoYXJhY3RlciBcIicgKyB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zKSArICdcIicpO1xuICB9XG59O1xuXG5Ub2tlblN0cmVhbS5wcm90b3R5cGUuaXNTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByID0gZmFsc2U7XG4gIHZhciBzdGFydExpbmUgPSB0aGlzLmxpbmU7XG4gIHZhciBzdGFydENvbHVtbiA9IHRoaXMuY29sdW1uO1xuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnBvcztcbiAgdmFyIHF1b3RlID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdChzdGFydFBvcyk7XG5cbiAgaWYgKHF1b3RlID09PSAnXFwnJyB8fCBxdW90ZSA9PT0gJ1wiJykge1xuICAgIHRoaXMucG9zKys7XG4gICAgdGhpcy5jb2x1bW4rKztcbiAgICB2YXIgaW5kZXggPSB0aGlzLmV4cHJlc3Npb24uaW5kZXhPZihxdW90ZSwgc3RhcnRQb3MgKyAxKTtcbiAgICB3aGlsZSAoaW5kZXggPj0gMCAmJiB0aGlzLnBvcyA8IHRoaXMuZXhwcmVzc2lvbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMucG9zID0gaW5kZXggKyAxO1xuICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQoaW5kZXggLSAxKSAhPT0gJ1xcXFwnKSB7XG4gICAgICAgIHZhciByYXdTdHJpbmcgPSB0aGlzLmV4cHJlc3Npb24uc3Vic3RyaW5nKHN0YXJ0UG9zICsgMSwgaW5kZXgpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRTVFJJTkcsIHRoaXMudW5lc2NhcGUocmF3U3RyaW5nKSwgc3RhcnRMaW5lLCBzdGFydENvbHVtbik7XG4gICAgICAgIHZhciBuZXdMaW5lID0gcmF3U3RyaW5nLmluZGV4T2YoJ1xcbicpO1xuICAgICAgICB2YXIgbGFzdE5ld2xpbmUgPSAtMTtcbiAgICAgICAgd2hpbGUgKG5ld0xpbmUgPj0gMCkge1xuICAgICAgICAgIHRoaXMubGluZSsrO1xuICAgICAgICAgIHRoaXMuY29sdW1uID0gMDtcbiAgICAgICAgICBsYXN0TmV3bGluZSA9IG5ld0xpbmU7XG4gICAgICAgICAgbmV3TGluZSA9IHJhd1N0cmluZy5pbmRleE9mKCdcXG4nLCBuZXdMaW5lICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb2x1bW4gKz0gcmF3U3RyaW5nLmxlbmd0aCAtIGxhc3ROZXdsaW5lO1xuICAgICAgICByID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpbmRleCA9IHRoaXMuZXhwcmVzc2lvbi5pbmRleE9mKHF1b3RlLCBpbmRleCArIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjtcbn07XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5pc1BhcmVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2hhciA9IHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQodGhpcy5wb3MpO1xuICBpZiAoY2hhciA9PT0gJygnIHx8IGNoYXIgPT09ICcpJykge1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVFBBUkVOLCBjaGFyKTtcbiAgICB0aGlzLnBvcysrO1xuICAgIHRoaXMuY29sdW1uKys7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzQ29tbWEgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaGFyID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyk7XG4gIGlmIChjaGFyID09PSAnLCcpIHtcbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRDT01NQSwgJywnKTtcbiAgICB0aGlzLnBvcysrO1xuICAgIHRoaXMuY29sdW1uKys7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzQ29uc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGFydFBvcyA9IHRoaXMucG9zO1xuICB2YXIgaSA9IHN0YXJ0UG9zO1xuICBmb3IgKDsgaSA8IHRoaXMuZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdChpKTtcbiAgICBpZiAoYy50b1VwcGVyQ2FzZSgpID09PSBjLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGlmIChpID09PSB0aGlzLnBvcyB8fCAoYyAhPT0gJ18nICYmIGMgIT09ICcuJyAmJiAoYyA8ICcwJyB8fCBjID4gJzknKSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpID4gc3RhcnRQb3MpIHtcbiAgICB2YXIgc3RyID0gdGhpcy5leHByZXNzaW9uLnN1YnN0cmluZyhzdGFydFBvcywgaSk7XG4gICAgaWYgKHN0ciBpbiB0aGlzLmNvbnN0cykge1xuICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUTlVNQkVSLCB0aGlzLmNvbnN0c1tzdHJdKTtcbiAgICAgIHRoaXMucG9zICs9IHN0ci5sZW5ndGg7XG4gICAgICB0aGlzLmNvbHVtbiArPSBzdHIubGVuZ3RoO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5pc05hbWVkT3AgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGFydFBvcyA9IHRoaXMucG9zO1xuICB2YXIgaSA9IHN0YXJ0UG9zO1xuICBmb3IgKDsgaSA8IHRoaXMuZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdChpKTtcbiAgICBpZiAoYy50b1VwcGVyQ2FzZSgpID09PSBjLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGlmIChpID09PSB0aGlzLnBvcyB8fCAoYyAhPT0gJ18nICYmIChjIDwgJzAnIHx8IGMgPiAnOScpKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGkgPiBzdGFydFBvcykge1xuICAgIHZhciBzdHIgPSB0aGlzLmV4cHJlc3Npb24uc3Vic3RyaW5nKHN0YXJ0UG9zLCBpKTtcbiAgICBpZiAoc3RyIGluIHRoaXMuYmluYXJ5T3BzIHx8IHN0ciBpbiB0aGlzLnVuYXJ5T3BzIHx8IHN0ciBpbiB0aGlzLnRlcm5hcnlPcHMpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCBzdHIpO1xuICAgICAgdGhpcy5wb3MgKz0gc3RyLmxlbmd0aDtcbiAgICAgIHRoaXMuY29sdW1uICs9IHN0ci5sZW5ndGg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5wb3M7XG4gIHZhciBpID0gc3RhcnRQb3M7XG4gIGZvciAoOyBpIDwgdGhpcy5leHByZXNzaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGMgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KGkpO1xuICAgIGlmIChjLnRvVXBwZXJDYXNlKCkgPT09IGMudG9Mb3dlckNhc2UoKSkge1xuICAgICAgaWYgKGkgPT09IHRoaXMucG9zIHx8IChjICE9PSAnXycgJiYgKGMgPCAnMCcgfHwgYyA+ICc5JykpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaSA+IHN0YXJ0UG9zKSB7XG4gICAgdmFyIHN0ciA9IHRoaXMuZXhwcmVzc2lvbi5zdWJzdHJpbmcoc3RhcnRQb3MsIGkpO1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE5BTUUsIHN0cik7XG4gICAgdGhpcy5wb3MgKz0gc3RyLmxlbmd0aDtcbiAgICB0aGlzLmNvbHVtbiArPSBzdHIubGVuZ3RoO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5pc1doaXRlc3BhY2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByID0gZmFsc2U7XG4gIHZhciBjaGFyID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyk7XG4gIHdoaWxlIChjaGFyID09PSAnICcgfHwgY2hhciA9PT0gJ1xcdCcgfHwgY2hhciA9PT0gJ1xcbicgfHwgY2hhciA9PT0gJ1xccicpIHtcbiAgICByID0gdHJ1ZTtcbiAgICB0aGlzLnBvcysrO1xuICAgIHRoaXMuY29sdW1uKys7XG4gICAgaWYgKGNoYXIgPT09ICdcXG4nKSB7XG4gICAgICB0aGlzLmxpbmUrKztcbiAgICAgIHRoaXMuY29sdW1uID0gMDtcbiAgICB9XG4gICAgaWYgKHRoaXMucG9zID49IHRoaXMuZXhwcmVzc2lvbi5sZW5ndGgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjaGFyID0gdGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyk7XG4gIH1cbiAgcmV0dXJuIHI7XG59O1xuXG52YXIgY29kZVBvaW50UGF0dGVybiA9IC9eWzAtOWEtZl17NH0kL2k7XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS51bmVzY2FwZSA9IGZ1bmN0aW9uICh2KSB7XG4gIHZhciBpbmRleCA9IHYuaW5kZXhPZignXFxcXCcpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICB2YXIgYnVmZmVyID0gdi5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICB3aGlsZSAoaW5kZXggPj0gMCkge1xuICAgIHZhciBjID0gdi5jaGFyQXQoKytpbmRleCk7XG4gICAgc3dpdGNoIChjKSB7XG4gICAgICBjYXNlICdcXCcnOlxuICAgICAgICBidWZmZXIgKz0gJ1xcJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnXCInOlxuICAgICAgICBidWZmZXIgKz0gJ1wiJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgYnVmZmVyICs9ICdcXFxcJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICcvJzpcbiAgICAgICAgYnVmZmVyICs9ICcvJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdiJzpcbiAgICAgICAgYnVmZmVyICs9ICdcXGInO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2YnOlxuICAgICAgICBidWZmZXIgKz0gJ1xcZic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbic6XG4gICAgICAgIGJ1ZmZlciArPSAnXFxuJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyJzpcbiAgICAgICAgYnVmZmVyICs9ICdcXHInO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3QnOlxuICAgICAgICBidWZmZXIgKz0gJ1xcdCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndSc6XG4gICAgICAgIC8vIGludGVycHJldCB0aGUgZm9sbG93aW5nIDQgY2hhcmFjdGVycyBhcyB0aGUgaGV4IG9mIHRoZSB1bmljb2RlIGNvZGUgcG9pbnRcbiAgICAgICAgdmFyIGNvZGVQb2ludCA9IHYuc3Vic3RyaW5nKGluZGV4ICsgMSwgaW5kZXggKyA1KTtcbiAgICAgICAgaWYgKCFjb2RlUG9pbnRQYXR0ZXJuLnRlc3QoY29kZVBvaW50KSkge1xuICAgICAgICAgIHRoaXMucGFyc2VFcnJvcignSWxsZWdhbCBlc2NhcGUgc2VxdWVuY2U6IFxcXFx1JyArIGNvZGVQb2ludCk7XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoY29kZVBvaW50LCAxNikpO1xuICAgICAgICBpbmRleCArPSA0O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IHRoaXMucGFyc2VFcnJvcignSWxsZWdhbCBlc2NhcGUgc2VxdWVuY2U6IFwiXFxcXCcgKyBjICsgJ1wiJyk7XG4gICAgfVxuICAgICsraW5kZXg7XG4gICAgdmFyIGJhY2tzbGFzaCA9IHYuaW5kZXhPZignXFxcXCcsIGluZGV4KTtcbiAgICBidWZmZXIgKz0gdi5zdWJzdHJpbmcoaW5kZXgsIGJhY2tzbGFzaCA8IDAgPyB2Lmxlbmd0aCA6IGJhY2tzbGFzaCk7XG4gICAgaW5kZXggPSBiYWNrc2xhc2g7XG4gIH1cblxuICByZXR1cm4gYnVmZmVyO1xufTtcblxuVG9rZW5TdHJlYW0ucHJvdG90eXBlLmlzQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNoYXIgPSB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zKTtcbiAgaWYgKGNoYXIgPT09ICcvJyAmJiB0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zICsgMSkgPT09ICcqJykge1xuICAgIHZhciBzdGFydFBvcyA9IHRoaXMucG9zO1xuICAgIHRoaXMucG9zID0gdGhpcy5leHByZXNzaW9uLmluZGV4T2YoJyovJywgdGhpcy5wb3MpICsgMjtcbiAgICBpZiAodGhpcy5wb3MgPT09IDEpIHtcbiAgICAgIHRoaXMucG9zID0gdGhpcy5leHByZXNzaW9uLmxlbmd0aDtcbiAgICB9XG4gICAgdmFyIGNvbW1lbnQgPSB0aGlzLmV4cHJlc3Npb24uc3Vic3RyaW5nKHN0YXJ0UG9zLCB0aGlzLnBvcyk7XG4gICAgdmFyIG5ld2xpbmUgPSBjb21tZW50LmluZGV4T2YoJ1xcbicpO1xuICAgIHdoaWxlIChuZXdsaW5lID49IDApIHtcbiAgICAgIHRoaXMubGluZSsrO1xuICAgICAgdGhpcy5jb2x1bW4gPSBjb21tZW50Lmxlbmd0aCAtIG5ld2xpbmU7XG4gICAgICBuZXdsaW5lID0gY29tbWVudC5pbmRleE9mKCdcXG4nLCBuZXdsaW5lICsgMSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5pc051bWJlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZhbGlkID0gZmFsc2U7XG4gIHZhciBwb3MgPSB0aGlzLnBvcztcbiAgdmFyIHN0YXJ0UG9zID0gcG9zO1xuICB2YXIgcmVzZXRQb3MgPSBwb3M7XG4gIHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbjtcbiAgdmFyIHJlc2V0Q29sdW1uID0gY29sdW1uO1xuICB2YXIgZm91bmREb3QgPSBmYWxzZTtcbiAgdmFyIGZvdW5kRGlnaXRzID0gZmFsc2U7XG4gIHZhciBjaGFyO1xuXG4gIHdoaWxlIChwb3MgPCB0aGlzLmV4cHJlc3Npb24ubGVuZ3RoKSB7XG4gICAgY2hhciA9IHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQocG9zKTtcbiAgICBpZiAoKGNoYXIgPj0gJzAnICYmIGNoYXIgPD0gJzknKSB8fCAoIWZvdW5kRG90ICYmIGNoYXIgPT09ICcuJykpIHtcbiAgICAgIGlmIChjaGFyID09PSAnLicpIHtcbiAgICAgICAgZm91bmREb3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm91bmREaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9zKys7XG4gICAgICBjb2x1bW4rKztcbiAgICAgIHZhbGlkID0gZm91bmREaWdpdHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh2YWxpZCkge1xuICAgIHJlc2V0UG9zID0gcG9zO1xuICAgIHJlc2V0Q29sdW1uID0gY29sdW1uO1xuICB9XG5cbiAgaWYgKGNoYXIgPT09ICdlJyB8fCBjaGFyID09PSAnRScpIHtcbiAgICBwb3MrKztcbiAgICBjb2x1bW4rKztcbiAgICB2YXIgYWNjZXB0U2lnbiA9IHRydWU7XG4gICAgdmFyIHZhbGlkRXhwb25lbnQgPSBmYWxzZTtcbiAgICB3aGlsZSAocG9zIDwgdGhpcy5leHByZXNzaW9uLmxlbmd0aCkge1xuICAgICAgY2hhciA9IHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQocG9zKTtcbiAgICAgIGlmIChhY2NlcHRTaWduICYmIChjaGFyID09PSAnKycgfHwgY2hhciA9PT0gJy0nKSkge1xuICAgICAgICBhY2NlcHRTaWduID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGNoYXIgPj0gJzAnICYmIGNoYXIgPD0gJzknKSB7XG4gICAgICAgIHZhbGlkRXhwb25lbnQgPSB0cnVlO1xuICAgICAgICBhY2NlcHRTaWduID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHBvcysrO1xuICAgICAgY29sdW1uKys7XG4gICAgfVxuXG4gICAgaWYgKCF2YWxpZEV4cG9uZW50KSB7XG4gICAgICBwb3MgPSByZXNldFBvcztcbiAgICAgIGNvbHVtbiA9IHJlc2V0Q29sdW1uO1xuICAgIH1cbiAgfVxuXG4gIGlmICh2YWxpZCkge1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE5VTUJFUiwgcGFyc2VGbG9hdCh0aGlzLmV4cHJlc3Npb24uc3Vic3RyaW5nKHN0YXJ0UG9zLCBwb3MpKSk7XG4gICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wb3MgPSByZXNldFBvcztcbiAgICB0aGlzLmNvbHVtbiA9IHJlc2V0Q29sdW1uO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn07XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5pc09wZXJhdG9yID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2hhciA9IHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQodGhpcy5wb3MpO1xuXG4gIGlmIChjaGFyID09PSAnKycgfHwgY2hhciA9PT0gJy0nIHx8IGNoYXIgPT09ICcqJyB8fCBjaGFyID09PSAnLycgfHwgY2hhciA9PT0gJyUnIHx8IGNoYXIgPT09ICdeJyB8fCBjaGFyID09PSAnPycgfHwgY2hhciA9PT0gJzonIHx8IGNoYXIgPT09ICcuJykge1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCBjaGFyKTtcbiAgfSBlbHNlIGlmIChjaGFyID09PSAn4oiZJyB8fCBjaGFyID09PSAn4oCiJykge1xuICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCAnKicpO1xuICB9IGVsc2UgaWYgKGNoYXIgPT09ICc+Jykge1xuICAgIGlmICh0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zICsgMSkgPT09ICc9Jykge1xuICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUT1AsICc+PScpO1xuICAgICAgdGhpcy5wb3MrKztcbiAgICAgIHRoaXMuY29sdW1uKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCAnPicpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaGFyID09PSAnPCcpIHtcbiAgICBpZiAodGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyArIDEpID09PSAnPScpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCAnPD0nKTtcbiAgICAgIHRoaXMucG9zKys7XG4gICAgICB0aGlzLmNvbHVtbisrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRPUCwgJzwnKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY2hhciA9PT0gJ3wnKSB7XG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbi5jaGFyQXQodGhpcy5wb3MgKyAxKSA9PT0gJ3wnKSB7XG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5ld1Rva2VuKFRPUCwgJ3x8Jyk7XG4gICAgICB0aGlzLnBvcysrO1xuICAgICAgdGhpcy5jb2x1bW4rKztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaGFyID09PSAnPScpIHtcbiAgICBpZiAodGhpcy5leHByZXNzaW9uLmNoYXJBdCh0aGlzLnBvcyArIDEpID09PSAnPScpIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCAnPT0nKTtcbiAgICAgIHRoaXMucG9zKys7XG4gICAgICB0aGlzLmNvbHVtbisrO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNoYXIgPT09ICchJykge1xuICAgIGlmICh0aGlzLmV4cHJlc3Npb24uY2hhckF0KHRoaXMucG9zICsgMSkgPT09ICc9Jykge1xuICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5uZXdUb2tlbihUT1AsICchPScpO1xuICAgICAgdGhpcy5wb3MrKztcbiAgICAgIHRoaXMuY29sdW1uKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubmV3VG9rZW4oVE9QLCBjaGFyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRoaXMucG9zKys7XG4gIHRoaXMuY29sdW1uKys7XG4gIHJldHVybiB0cnVlO1xufTtcblxuVG9rZW5TdHJlYW0ucHJvdG90eXBlLnBhcnNlRXJyb3IgPSBmdW5jdGlvbiAobXNnKSB7XG4gIHRocm93IG5ldyBFcnJvcigncGFyc2UgZXJyb3IgWycgKyAodGhpcy5saW5lICsgMSkgKyAnOicgKyAodGhpcy5jb2x1bW4gKyAxKSArICddOiAnICsgbXNnKTtcbn07XG5cbnZhciB1bmFyeUluc3RydWN0aW9uQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIHVuYXJ5SW5zdHJ1Y3Rpb24odmFsdWUpIHtcbiAgdmFyIGluc3QgPSB1bmFyeUluc3RydWN0aW9uQ2FjaGVbdmFsdWVdO1xuICBpZiAoIWluc3QpIHtcbiAgICBpbnN0ID0gdW5hcnlJbnN0cnVjdGlvbkNhY2hlW3ZhbHVlXSA9IG5ldyBJbnN0cnVjdGlvbihJT1AxLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGluc3Q7XG59XG5cbnZhciBiaW5hcnlJbnN0cnVjdGlvbkNhY2hlID0ge307XG5mdW5jdGlvbiBiaW5hcnlJbnN0cnVjdGlvbih2YWx1ZSkge1xuICB2YXIgaW5zdCA9IGJpbmFyeUluc3RydWN0aW9uQ2FjaGVbdmFsdWVdO1xuICBpZiAoIWluc3QpIHtcbiAgICBpbnN0ID0gYmluYXJ5SW5zdHJ1Y3Rpb25DYWNoZVt2YWx1ZV0gPSBuZXcgSW5zdHJ1Y3Rpb24oSU9QMiwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBpbnN0O1xufVxuXG52YXIgdGVybmFyeUluc3RydWN0aW9uQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIHRlcm5hcnlJbnN0cnVjdGlvbih2YWx1ZSkge1xuICB2YXIgaW5zdCA9IHRlcm5hcnlJbnN0cnVjdGlvbkNhY2hlW3ZhbHVlXTtcbiAgaWYgKCFpbnN0KSB7XG4gICAgaW5zdCA9IHRlcm5hcnlJbnN0cnVjdGlvbkNhY2hlW3ZhbHVlXSA9IG5ldyBJbnN0cnVjdGlvbihJT1AzLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGluc3Q7XG59XG5cbmZ1bmN0aW9uIFBhcnNlclN0YXRlKHBhcnNlciwgdG9rZW5TdHJlYW0pIHtcbiAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gIHRoaXMudG9rZW5zID0gdG9rZW5TdHJlYW07XG4gIHRoaXMuY3VycmVudCA9IG51bGw7XG4gIHRoaXMubmV4dFRva2VuID0gbnVsbDtcbiAgdGhpcy5uZXh0KCk7XG4gIHRoaXMuc2F2ZWRDdXJyZW50ID0gbnVsbDtcbiAgdGhpcy5zYXZlZE5leHRUb2tlbiA9IG51bGw7XG59XG5cblBhcnNlclN0YXRlLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmN1cnJlbnQgPSB0aGlzLm5leHRUb2tlbjtcbiAgcmV0dXJuICh0aGlzLm5leHRUb2tlbiA9IHRoaXMudG9rZW5zLm5leHQoKSk7XG59O1xuXG5QYXJzZXJTdGF0ZS5wcm90b3R5cGUudG9rZW5NYXRjaGVzID0gZnVuY3Rpb24gKHRva2VuLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGluZGV4T2YodmFsdWUsIHRva2VuLnZhbHVlKSA+PSAwO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZSh0b2tlbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRva2VuLnZhbHVlID09PSB2YWx1ZTtcbiAgfVxufTtcblxuUGFyc2VyU3RhdGUucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2F2ZWRDdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICB0aGlzLnNhdmVkTmV4dFRva2VuID0gdGhpcy5uZXh0VG9rZW47XG4gIHRoaXMudG9rZW5zLnNhdmUoKTtcbn07XG5cblBhcnNlclN0YXRlLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnRva2Vucy5yZXN0b3JlKCk7XG4gIHRoaXMuY3VycmVudCA9IHRoaXMuc2F2ZWRDdXJyZW50O1xuICB0aGlzLm5leHRUb2tlbiA9IHRoaXMuc2F2ZWROZXh0VG9rZW47XG59O1xuXG5QYXJzZXJTdGF0ZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHR5cGUsIHZhbHVlKSB7XG4gIGlmICh0aGlzLm5leHRUb2tlbi50eXBlID09PSB0eXBlICYmIHRoaXMudG9rZW5NYXRjaGVzKHRoaXMubmV4dFRva2VuLCB2YWx1ZSkpIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5QYXJzZXJTdGF0ZS5wcm90b3R5cGUuZXhwZWN0ID0gZnVuY3Rpb24gKHR5cGUsIHZhbHVlKSB7XG4gIGlmICghdGhpcy5hY2NlcHQodHlwZSwgdmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwYXJzZSBlcnJvciBbJyArIHRoaXMudG9rZW5zLmxpbmUgKyAnOicgKyB0aGlzLnRva2Vucy5jb2x1bW4gKyAnXTogRXhwZWN0ZWQgJyArICh2YWx1ZSB8fCB0eXBlKSk7XG4gIH1cbn07XG5cblBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUF0b20gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgaWYgKHRoaXMuYWNjZXB0KFROQU1FKSkge1xuICAgIGluc3RyLnB1c2gobmV3IEluc3RydWN0aW9uKElWQVIsIHRoaXMuY3VycmVudC52YWx1ZSkpO1xuICB9IGVsc2UgaWYgKHRoaXMuYWNjZXB0KFROVU1CRVIpKSB7XG4gICAgaW5zdHIucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSU5VTUJFUiwgdGhpcy5jdXJyZW50LnZhbHVlKSk7XG4gIH0gZWxzZSBpZiAodGhpcy5hY2NlcHQoVFNUUklORykpIHtcbiAgICBpbnN0ci5wdXNoKG5ldyBJbnN0cnVjdGlvbihJTlVNQkVSLCB0aGlzLmN1cnJlbnQudmFsdWUpKTtcbiAgfSBlbHNlIGlmICh0aGlzLmFjY2VwdChUUEFSRU4sICcoJykpIHtcbiAgICB0aGlzLnBhcnNlRXhwcmVzc2lvbihpbnN0cik7XG4gICAgdGhpcy5leHBlY3QoVFBBUkVOLCAnKScpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCAnICsgdGhpcy5uZXh0VG9rZW4pO1xuICB9XG59O1xuXG5QYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VFeHByZXNzaW9uID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gIHRoaXMucGFyc2VDb25kaXRpb25hbEV4cHJlc3Npb24oaW5zdHIpO1xufTtcblxuUGFyc2VyU3RhdGUucHJvdG90eXBlLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gIHRoaXMucGFyc2VPckV4cHJlc3Npb24oaW5zdHIpO1xuICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCAnPycpKSB7XG4gICAgdmFyIHRydWVCcmFuY2ggPSBbXTtcbiAgICB2YXIgZmFsc2VCcmFuY2ggPSBbXTtcbiAgICB0aGlzLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uKHRydWVCcmFuY2gpO1xuICAgIHRoaXMuZXhwZWN0KFRPUCwgJzonKTtcbiAgICB0aGlzLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uKGZhbHNlQnJhbmNoKTtcbiAgICBpbnN0ci5wdXNoKG5ldyBJbnN0cnVjdGlvbihJRVhQUiwgdHJ1ZUJyYW5jaCkpO1xuICAgIGluc3RyLnB1c2gobmV3IEluc3RydWN0aW9uKElFWFBSLCBmYWxzZUJyYW5jaCkpO1xuICAgIGluc3RyLnB1c2godGVybmFyeUluc3RydWN0aW9uKCc/JykpO1xuICB9XG59O1xuXG5QYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VPckV4cHJlc3Npb24gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgdGhpcy5wYXJzZUFuZEV4cHJlc3Npb24oaW5zdHIpO1xuICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCAnb3InKSkge1xuICAgIHRoaXMucGFyc2VBbmRFeHByZXNzaW9uKGluc3RyKTtcbiAgICBpbnN0ci5wdXNoKGJpbmFyeUluc3RydWN0aW9uKCdvcicpKTtcbiAgfVxufTtcblxuUGFyc2VyU3RhdGUucHJvdG90eXBlLnBhcnNlQW5kRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChpbnN0cikge1xuICB0aGlzLnBhcnNlQ29tcGFyaXNvbihpbnN0cik7XG4gIHdoaWxlICh0aGlzLmFjY2VwdChUT1AsICdhbmQnKSkge1xuICAgIHRoaXMucGFyc2VDb21wYXJpc29uKGluc3RyKTtcbiAgICBpbnN0ci5wdXNoKGJpbmFyeUluc3RydWN0aW9uKCdhbmQnKSk7XG4gIH1cbn07XG5cblBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUNvbXBhcmlzb24gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgdGhpcy5wYXJzZUFkZFN1YihpbnN0cik7XG4gIHdoaWxlICh0aGlzLmFjY2VwdChUT1AsIFsnPT0nLCAnIT0nLCAnPCcsICc8PScsICc+PScsICc+J10pKSB7XG4gICAgdmFyIG9wID0gdGhpcy5jdXJyZW50O1xuICAgIHRoaXMucGFyc2VBZGRTdWIoaW5zdHIpO1xuICAgIGluc3RyLnB1c2goYmluYXJ5SW5zdHJ1Y3Rpb24ob3AudmFsdWUpKTtcbiAgfVxufTtcblxuUGFyc2VyU3RhdGUucHJvdG90eXBlLnBhcnNlQWRkU3ViID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gIHRoaXMucGFyc2VUZXJtKGluc3RyKTtcbiAgd2hpbGUgKHRoaXMuYWNjZXB0KFRPUCwgWycrJywgJy0nLCAnfHwnXSkpIHtcbiAgICB2YXIgb3AgPSB0aGlzLmN1cnJlbnQ7XG4gICAgdGhpcy5wYXJzZVRlcm0oaW5zdHIpO1xuICAgIGluc3RyLnB1c2goYmluYXJ5SW5zdHJ1Y3Rpb24ob3AudmFsdWUpKTtcbiAgfVxufTtcblxuUGFyc2VyU3RhdGUucHJvdG90eXBlLnBhcnNlVGVybSA9IGZ1bmN0aW9uIChpbnN0cikge1xuICB0aGlzLnBhcnNlRmFjdG9yKGluc3RyKTtcbiAgd2hpbGUgKHRoaXMuYWNjZXB0KFRPUCwgWycqJywgJy8nLCAnJSddKSkge1xuICAgIHZhciBvcCA9IHRoaXMuY3VycmVudDtcbiAgICB0aGlzLnBhcnNlRmFjdG9yKGluc3RyKTtcbiAgICBpbnN0ci5wdXNoKGJpbmFyeUluc3RydWN0aW9uKG9wLnZhbHVlKSk7XG4gIH1cbn07XG5cblBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUZhY3RvciA9IGZ1bmN0aW9uIChpbnN0cikge1xuICB2YXIgdW5hcnlPcHMgPSB0aGlzLnRva2Vucy51bmFyeU9wcztcbiAgZnVuY3Rpb24gaXNQcmVmaXhPcGVyYXRvcih0b2tlbikge1xuICAgIHJldHVybiB0b2tlbi52YWx1ZSBpbiB1bmFyeU9wcztcbiAgfVxuXG4gIHRoaXMuc2F2ZSgpO1xuICBpZiAodGhpcy5hY2NlcHQoVE9QLCBpc1ByZWZpeE9wZXJhdG9yKSkge1xuICAgIGlmICgodGhpcy5jdXJyZW50LnZhbHVlICE9PSAnLScgJiYgdGhpcy5jdXJyZW50LnZhbHVlICE9PSAnKycgJiYgdGhpcy5uZXh0VG9rZW4udHlwZSA9PT0gVFBBUkVOICYmIHRoaXMubmV4dFRva2VuLnZhbHVlID09PSAnKCcpKSB7XG4gICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgIHRoaXMucGFyc2VFeHBvbmVudGlhbChpbnN0cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvcCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHRoaXMucGFyc2VGYWN0b3IoaW5zdHIpO1xuICAgICAgaW5zdHIucHVzaCh1bmFyeUluc3RydWN0aW9uKG9wLnZhbHVlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMucGFyc2VFeHBvbmVudGlhbChpbnN0cik7XG4gIH1cbn07XG5cblBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZUV4cG9uZW50aWFsID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gIHRoaXMucGFyc2VQb3N0Zml4RXhwcmVzc2lvbihpbnN0cik7XG4gIHdoaWxlICh0aGlzLmFjY2VwdChUT1AsICdeJykpIHtcbiAgICB0aGlzLnBhcnNlRmFjdG9yKGluc3RyKTtcbiAgICBpbnN0ci5wdXNoKGJpbmFyeUluc3RydWN0aW9uKCdeJykpO1xuICB9XG59O1xuXG5QYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VQb3N0Zml4RXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChpbnN0cikge1xuICB0aGlzLnBhcnNlRnVuY3Rpb25DYWxsKGluc3RyKTtcbiAgd2hpbGUgKHRoaXMuYWNjZXB0KFRPUCwgJyEnKSkge1xuICAgIGluc3RyLnB1c2godW5hcnlJbnN0cnVjdGlvbignIScpKTtcbiAgfVxufTtcblxuUGFyc2VyU3RhdGUucHJvdG90eXBlLnBhcnNlRnVuY3Rpb25DYWxsID0gZnVuY3Rpb24gKGluc3RyKSB7XG4gIHZhciB1bmFyeU9wcyA9IHRoaXMudG9rZW5zLnVuYXJ5T3BzO1xuICBmdW5jdGlvbiBpc1ByZWZpeE9wZXJhdG9yKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuLnZhbHVlIGluIHVuYXJ5T3BzO1xuICB9XG5cbiAgaWYgKHRoaXMuYWNjZXB0KFRPUCwgaXNQcmVmaXhPcGVyYXRvcikpIHtcbiAgICB2YXIgb3AgPSB0aGlzLmN1cnJlbnQ7XG4gICAgdGhpcy5wYXJzZUF0b20oaW5zdHIpO1xuICAgIGluc3RyLnB1c2godW5hcnlJbnN0cnVjdGlvbihvcC52YWx1ZSkpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucGFyc2VNZW1iZXJFeHByZXNzaW9uKGluc3RyKTtcbiAgICB3aGlsZSAodGhpcy5hY2NlcHQoVFBBUkVOLCAnKCcpKSB7XG4gICAgICBpZiAodGhpcy5hY2NlcHQoVFBBUkVOLCAnKScpKSB7XG4gICAgICAgIGluc3RyLnB1c2gobmV3IEluc3RydWN0aW9uKElGVU5DQUxMLCAwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXJnQ291bnQgPSB0aGlzLnBhcnNlQXJndW1lbnRMaXN0KGluc3RyKTtcbiAgICAgICAgaW5zdHIucHVzaChuZXcgSW5zdHJ1Y3Rpb24oSUZVTkNBTEwsIGFyZ0NvdW50KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5QYXJzZXJTdGF0ZS5wcm90b3R5cGUucGFyc2VBcmd1bWVudExpc3QgPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgdmFyIGFyZ0NvdW50ID0gMDtcblxuICB3aGlsZSAoIXRoaXMuYWNjZXB0KFRQQVJFTiwgJyknKSkge1xuICAgIHRoaXMucGFyc2VFeHByZXNzaW9uKGluc3RyKTtcbiAgICArK2FyZ0NvdW50O1xuICAgIHdoaWxlICh0aGlzLmFjY2VwdChUQ09NTUEpKSB7XG4gICAgICB0aGlzLnBhcnNlRXhwcmVzc2lvbihpbnN0cik7XG4gICAgICArK2FyZ0NvdW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmdDb3VudDtcbn07XG5cblBhcnNlclN0YXRlLnByb3RvdHlwZS5wYXJzZU1lbWJlckV4cHJlc3Npb24gPSBmdW5jdGlvbiAoaW5zdHIpIHtcbiAgdGhpcy5wYXJzZUF0b20oaW5zdHIpO1xuICB3aGlsZSAodGhpcy5hY2NlcHQoVE9QLCAnLicpKSB7XG4gICAgdGhpcy5leHBlY3QoVE5BTUUpO1xuICAgIGluc3RyLnB1c2gobmV3IEluc3RydWN0aW9uKElNRU1CRVIsIHRoaXMuY3VycmVudC52YWx1ZSkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBQYXJzZXIoKSB7XG4gIHRoaXMudW5hcnlPcHMgPSB7XG4gICAgc2luOiBNYXRoLnNpbixcbiAgICBjb3M6IE1hdGguY29zLFxuICAgIHRhbjogTWF0aC50YW4sXG4gICAgYXNpbjogTWF0aC5hc2luLFxuICAgIGFjb3M6IE1hdGguYWNvcyxcbiAgICBhdGFuOiBNYXRoLmF0YW4sXG4gICAgc2luaDogTWF0aC5zaW5oIHx8IHNpbmgsXG4gICAgY29zaDogTWF0aC5jb3NoIHx8IGNvc2gsXG4gICAgdGFuaDogTWF0aC50YW5oIHx8IHRhbmgsXG4gICAgYXNpbmg6IE1hdGguYXNpbmggfHwgYXNpbmgsXG4gICAgYWNvc2g6IE1hdGguYWNvc2ggfHwgYWNvc2gsXG4gICAgYXRhbmg6IE1hdGguYXRhbmggfHwgYXRhbmgsXG4gICAgc3FydDogTWF0aC5zcXJ0LFxuICAgIGxvZzogTWF0aC5sb2csXG4gICAgbG46IE1hdGgubG9nLFxuICAgIGxnOiBNYXRoLmxvZzEwIHx8IGxvZzEwLFxuICAgIGxvZzEwOiBNYXRoLmxvZzEwIHx8IGxvZzEwLFxuICAgIGFiczogTWF0aC5hYnMsXG4gICAgY2VpbDogTWF0aC5jZWlsLFxuICAgIGZsb29yOiBNYXRoLmZsb29yLFxuICAgIHJvdW5kOiBNYXRoLnJvdW5kLFxuICAgIHRydW5jOiBNYXRoLnRydW5jIHx8IHRydW5jLFxuICAgICctJzogbmVnLFxuICAgICcrJzogTnVtYmVyLFxuICAgIGV4cDogTWF0aC5leHAsXG4gICAgbm90OiBub3QsXG4gICAgbGVuZ3RoOiBzdHJpbmdMZW5ndGgsXG4gICAgJyEnOiBmYWN0b3JpYWxcbiAgfTtcblxuICB0aGlzLmJpbmFyeU9wcyA9IHtcbiAgICAnKyc6IGFkZCxcbiAgICAnLSc6IHN1YixcbiAgICAnKic6IG11bCxcbiAgICAnLyc6IGRpdixcbiAgICAnJSc6IG1vZCxcbiAgICAnXic6IE1hdGgucG93LFxuICAgICd8fCc6IGNvbmNhdCxcbiAgICAnPT0nOiBlcXVhbCxcbiAgICAnIT0nOiBub3RFcXVhbCxcbiAgICAnPic6IGdyZWF0ZXJUaGFuLFxuICAgICc8JzogbGVzc1RoYW4sXG4gICAgJz49JzogZ3JlYXRlclRoYW5FcXVhbCxcbiAgICAnPD0nOiBsZXNzVGhhbkVxdWFsLFxuICAgIGFuZDogYW5kT3BlcmF0b3IsXG4gICAgb3I6IG9yT3BlcmF0b3JcbiAgfTtcblxuICB0aGlzLnRlcm5hcnlPcHMgPSB7XG4gICAgJz8nOiBjb25kaXRpb25cbiAgfTtcblxuICB0aGlzLmZ1bmN0aW9ucyA9IHtcbiAgICByYW5kb206IHJhbmRvbSxcbiAgICBmYWM6IGZhY3RvcmlhbCxcbiAgICBtaW46IE1hdGgubWluLFxuICAgIG1heDogTWF0aC5tYXgsXG4gICAgaHlwb3Q6IE1hdGguaHlwb3QgfHwgaHlwb3QsXG4gICAgcHl0OiBNYXRoLmh5cG90IHx8IGh5cG90LCAvLyBiYWNrd2FyZCBjb21wYXRcbiAgICBwb3c6IE1hdGgucG93LFxuICAgIGF0YW4yOiBNYXRoLmF0YW4yLFxuICAgICdpZic6IGNvbmRpdGlvbixcbiAgICBnYW1tYTogZ2FtbWFcbiAgfTtcblxuICB0aGlzLmNvbnN0cyA9IHtcbiAgICBFOiBNYXRoLkUsXG4gICAgUEk6IE1hdGguUEksXG4gICAgJ3RydWUnOiB0cnVlLFxuICAgICdmYWxzZSc6IGZhbHNlXG4gIH07XG59XG5cblBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uIChleHByKSB7XG4gIHJldHVybiBuZXcgUGFyc2VyKCkucGFyc2UoZXhwcik7XG59O1xuXG5QYXJzZXIuZXZhbHVhdGUgPSBmdW5jdGlvbiAoZXhwciwgdmFyaWFibGVzKSB7XG4gIHJldHVybiBQYXJzZXIucGFyc2UoZXhwcikuZXZhbHVhdGUodmFyaWFibGVzKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUgPSB7XG4gIHBhcnNlOiBmdW5jdGlvbiAoZXhwcikge1xuICAgIHZhciBpbnN0ciA9IFtdO1xuICAgIHZhciBwYXJzZXJTdGF0ZSA9IG5ldyBQYXJzZXJTdGF0ZSh0aGlzLCBuZXcgVG9rZW5TdHJlYW0oZXhwciwgdGhpcy51bmFyeU9wcywgdGhpcy5iaW5hcnlPcHMsIHRoaXMudGVybmFyeU9wcywgdGhpcy5jb25zdHMpKTtcbiAgICBwYXJzZXJTdGF0ZS5wYXJzZUV4cHJlc3Npb24oaW5zdHIpO1xuICAgIHBhcnNlclN0YXRlLmV4cGVjdChURU9GLCAnRU9GJyk7XG5cbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb24oaW5zdHIsIHRoaXMpO1xuICB9LFxuXG4gIGV2YWx1YXRlOiBmdW5jdGlvbiAoZXhwciwgdmFyaWFibGVzKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UoZXhwcikuZXZhbHVhdGUodmFyaWFibGVzKTtcbiAgfVxufTtcblxudmFyIHBhcnNlciA9IHtcbiAgUGFyc2VyOiBQYXJzZXIsXG4gIEV4cHJlc3Npb246IEV4cHJlc3Npb25cbn07XG5cbnJldHVybiBwYXJzZXI7XG5cbn0pKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXhwci1ldmFsL2Rpc3QvYnVuZGxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},,,,,,,,,,,,function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar epsilon = __webpack_require__(5);\nvar factorial = __webpack_require__(10);\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {Object} output\n */\nfunction binomialDistribution(\n    trials/*: number */,\n    probability/*: number */)/*: ?Object */ {\n    // Check that `p` is a valid probability (0 â¤ p â¤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 ||\n        trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    var x = 0,\n        cumulativeProbability = 0,\n        cells = {};\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = factorial(trials) /\n            (factorial(x) * factorial(trials - x)) *\n            (Math.pow(probability, x) * Math.pow(1 - probability, trials - x));\n        cumulativeProbability += cells[x];\n        x++;\n    // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nmodule.exports = binomialDistribution;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9iaW5vbWlhbF9kaXN0cmlidXRpb24uanM/OTg1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgZXBzaWxvbiA9IHJlcXVpcmUoJy4vZXBzaWxvbicpO1xudmFyIGZhY3RvcmlhbCA9IHJlcXVpcmUoJy4vZmFjdG9yaWFsJyk7XG5cbi8qKlxuICogVGhlIFtCaW5vbWlhbCBEaXN0cmlidXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmlub21pYWxfZGlzdHJpYnV0aW9uKSBpcyB0aGUgZGlzY3JldGUgcHJvYmFiaWxpdHlcbiAqIGRpc3RyaWJ1dGlvbiBvZiB0aGUgbnVtYmVyIG9mIHN1Y2Nlc3NlcyBpbiBhIHNlcXVlbmNlIG9mIG4gaW5kZXBlbmRlbnQgeWVzL25vIGV4cGVyaW1lbnRzLCBlYWNoIG9mIHdoaWNoIHlpZWxkc1xuICogc3VjY2VzcyB3aXRoIHByb2JhYmlsaXR5IGBwcm9iYWJpbGl0eWAuIFN1Y2ggYSBzdWNjZXNzL2ZhaWx1cmUgZXhwZXJpbWVudCBpcyBhbHNvIGNhbGxlZCBhIEJlcm5vdWxsaSBleHBlcmltZW50IG9yXG4gKiBCZXJub3VsbGkgdHJpYWw7IHdoZW4gdHJpYWxzID0gMSwgdGhlIEJpbm9taWFsIERpc3RyaWJ1dGlvbiBpcyBhIEJlcm5vdWxsaSBEaXN0cmlidXRpb24uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRyaWFscyBudW1iZXIgb2YgdHJpYWxzIHRvIHNpbXVsYXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvYmFiaWxpdHlcbiAqIEByZXR1cm5zIHtPYmplY3R9IG91dHB1dFxuICovXG5mdW5jdGlvbiBiaW5vbWlhbERpc3RyaWJ1dGlvbihcbiAgICB0cmlhbHMvKjogbnVtYmVyICovLFxuICAgIHByb2JhYmlsaXR5Lyo6IG51bWJlciAqLykvKjogP09iamVjdCAqLyB7XG4gICAgLy8gQ2hlY2sgdGhhdCBgcGAgaXMgYSB2YWxpZCBwcm9iYWJpbGl0eSAoMCDiiaQgcCDiiaQgMSksXG4gICAgLy8gdGhhdCBgbmAgaXMgYW4gaW50ZWdlciwgc3RyaWN0bHkgcG9zaXRpdmUuXG4gICAgaWYgKHByb2JhYmlsaXR5IDwgMCB8fCBwcm9iYWJpbGl0eSA+IDEgfHxcbiAgICAgICAgdHJpYWxzIDw9IDAgfHwgdHJpYWxzICUgMSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIFdlIGluaXRpYWxpemUgYHhgLCB0aGUgcmFuZG9tIHZhcmlhYmxlLCBhbmQgYGFjY3VtdWxhdG9yYCwgYW4gYWNjdW11bGF0b3JcbiAgICAvLyBmb3IgdGhlIGN1bXVsYXRpdmUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uIHRvIDAuIGBkaXN0cmlidXRpb25fZnVuY3Rpb25zYFxuICAgIC8vIGlzIHRoZSBvYmplY3Qgd2UnbGwgcmV0dXJuIHdpdGggdGhlIGBwcm9iYWJpbGl0eV9vZl94YCBhbmQgdGhlXG4gICAgLy8gYGN1bXVsYXRpdmVQcm9iYWJpbGl0eV9vZl94YCwgYXMgd2VsbCBhcyB0aGUgY2FsY3VsYXRlZCBtZWFuICZcbiAgICAvLyB2YXJpYW5jZS4gV2UgaXRlcmF0ZSB1bnRpbCB0aGUgYGN1bXVsYXRpdmVQcm9iYWJpbGl0eV9vZl94YCBpc1xuICAgIC8vIHdpdGhpbiBgZXBzaWxvbmAgb2YgMS4wLlxuICAgIHZhciB4ID0gMCxcbiAgICAgICAgY3VtdWxhdGl2ZVByb2JhYmlsaXR5ID0gMCxcbiAgICAgICAgY2VsbHMgPSB7fTtcblxuICAgIC8vIFRoaXMgYWxnb3JpdGhtIGl0ZXJhdGVzIHRocm91Z2ggZWFjaCBwb3RlbnRpYWwgb3V0Y29tZSxcbiAgICAvLyB1bnRpbCB0aGUgYGN1bXVsYXRpdmVQcm9iYWJpbGl0eWAgaXMgdmVyeSBjbG9zZSB0byAxLCBhdFxuICAgIC8vIHdoaWNoIHBvaW50IHdlJ3ZlIGRlZmluZWQgdGhlIHZhc3QgbWFqb3JpdHkgb2Ygb3V0Y29tZXNcbiAgICBkbyB7XG4gICAgICAgIC8vIGEgW3Byb2JhYmlsaXR5IG1hc3MgZnVuY3Rpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Byb2JhYmlsaXR5X21hc3NfZnVuY3Rpb24pXG4gICAgICAgIGNlbGxzW3hdID0gZmFjdG9yaWFsKHRyaWFscykgL1xuICAgICAgICAgICAgKGZhY3RvcmlhbCh4KSAqIGZhY3RvcmlhbCh0cmlhbHMgLSB4KSkgKlxuICAgICAgICAgICAgKE1hdGgucG93KHByb2JhYmlsaXR5LCB4KSAqIE1hdGgucG93KDEgLSBwcm9iYWJpbGl0eSwgdHJpYWxzIC0geCkpO1xuICAgICAgICBjdW11bGF0aXZlUHJvYmFiaWxpdHkgKz0gY2VsbHNbeF07XG4gICAgICAgIHgrKztcbiAgICAvLyB3aGVuIHRoZSBjdW11bGF0aXZlUHJvYmFiaWxpdHkgaXMgbmVhcmx5IDEsIHdlJ3ZlIGNhbGN1bGF0ZWRcbiAgICAvLyB0aGUgdXNlZnVsIHJhbmdlIG9mIHRoaXMgZGlzdHJpYnV0aW9uXG4gICAgfSB3aGlsZSAoY3VtdWxhdGl2ZVByb2JhYmlsaXR5IDwgMSAtIGVwc2lsb24pO1xuXG4gICAgcmV0dXJuIGNlbGxzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbm9taWFsRGlzdHJpYnV0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9iaW5vbWlhbF9kaXN0cmlidXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n * returns a numerical approximation to the value that would have caused\n * `errorFunction()` to return x.\n *\n * @param {number} x value of error function\n * @returns {number} estimated inverted value\n */\nfunction inverseErrorFunction(x/*: number */)/*: number */ {\n    var a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));\n\n    var inv = Math.sqrt(Math.sqrt(\n        Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -\n        Math.log(1 - x * x) / a) -\n        (2 / (Math.PI * a) + Math.log(1 - x * x) / 2));\n\n    if (x >= 0) {\n        return inv;\n    } else {\n        return -inv;\n    }\n}\n\nmodule.exports = inverseErrorFunction;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9pbnZlcnNlX2Vycm9yX2Z1bmN0aW9uLmpzPzFjODciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgSW52ZXJzZSBbR2F1c3NpYW4gZXJyb3IgZnVuY3Rpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXJyb3JfZnVuY3Rpb24pXG4gKiByZXR1cm5zIGEgbnVtZXJpY2FsIGFwcHJveGltYXRpb24gdG8gdGhlIHZhbHVlIHRoYXQgd291bGQgaGF2ZSBjYXVzZWRcbiAqIGBlcnJvckZ1bmN0aW9uKClgIHRvIHJldHVybiB4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IHZhbHVlIG9mIGVycm9yIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBlc3RpbWF0ZWQgaW52ZXJ0ZWQgdmFsdWVcbiAqL1xuZnVuY3Rpb24gaW52ZXJzZUVycm9yRnVuY3Rpb24oeC8qOiBudW1iZXIgKi8pLyo6IG51bWJlciAqLyB7XG4gICAgdmFyIGEgPSAoOCAqIChNYXRoLlBJIC0gMykpIC8gKDMgKiBNYXRoLlBJICogKDQgLSBNYXRoLlBJKSk7XG5cbiAgICB2YXIgaW52ID0gTWF0aC5zcXJ0KE1hdGguc3FydChcbiAgICAgICAgTWF0aC5wb3coMiAvIChNYXRoLlBJICogYSkgKyBNYXRoLmxvZygxIC0geCAqIHgpIC8gMiwgMikgLVxuICAgICAgICBNYXRoLmxvZygxIC0geCAqIHgpIC8gYSkgLVxuICAgICAgICAoMiAvIChNYXRoLlBJICogYSkgKyBNYXRoLmxvZygxIC0geCAqIHgpIC8gMikpO1xuXG4gICAgaWYgKHggPj0gMCkge1xuICAgICAgICByZXR1cm4gaW52O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAtaW52O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZlcnNlRXJyb3JGdW5jdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvaW52ZXJzZV9lcnJvcl9mdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * This computes the maximum number in an array.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * max([1, 2, 3, 4]);\n * // => 4\n */\nfunction max(x /*: Array<number> */) /*:number*/ {\n    var value;\n    for (var i = 0; i < x.length; i++) {\n        // On the first iteration of this loop, max is\n        // undefined and is thus made the maximum element in the array\n        if (value === undefined || x[i] > value) {\n            value = x[i];\n        }\n    }\n    if (value === undefined) {\n        return NaN;\n    }\n    return value;\n}\n\nmodule.exports = max;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9tYXguanM/ODMzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoaXMgY29tcHV0ZXMgdGhlIG1heGltdW0gbnVtYmVyIGluIGFuIGFycmF5LlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhuKWAsIGxpbmVhciB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIGFycmF5XG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBtYXhpbXVtIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogbWF4KFsxLCAyLCAzLCA0XSk7XG4gKiAvLyA9PiA0XG4gKi9cbmZ1bmN0aW9uIG1heCh4IC8qOiBBcnJheTxudW1iZXI+ICovKSAvKjpudW1iZXIqLyB7XG4gICAgdmFyIHZhbHVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBPbiB0aGUgZmlyc3QgaXRlcmF0aW9uIG9mIHRoaXMgbG9vcCwgbWF4IGlzXG4gICAgICAgIC8vIHVuZGVmaW5lZCBhbmQgaXMgdGh1cyBtYWRlIHRoZSBtYXhpbXVtIGVsZW1lbnQgaW4gdGhlIGFycmF5XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHhbaV0gPiB2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUgPSB4W2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXg7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21heC5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar quantile = __webpack_require__(11);\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} x input\n * @returns {number} median value\n * @example\n * median([10, 2, 5, 100, 2, 1]); // => 3.5\n */\nfunction median(x /*: Array<number> */)/*:number*/ {\n    return +quantile(x, 0.5);\n}\n\nmodule.exports = median;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9tZWRpYW4uanM/ODc0OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgcXVhbnRpbGUgPSByZXF1aXJlKCcuL3F1YW50aWxlJyk7XG5cbi8qKlxuICogVGhlIFttZWRpYW5dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVkaWFuKSBpc1xuICogdGhlIG1pZGRsZSBudW1iZXIgb2YgYSBsaXN0LiBUaGlzIGlzIG9mdGVuIGEgZ29vZCBpbmRpY2F0b3Igb2YgJ3RoZSBtaWRkbGUnXG4gKiB3aGVuIHRoZXJlIGFyZSBvdXRsaWVycyB0aGF0IHNrZXcgdGhlIGBtZWFuKClgIHZhbHVlLlxuICogVGhpcyBpcyBhIFttZWFzdXJlIG9mIGNlbnRyYWwgdGVuZGVuY3ldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NlbnRyYWxfdGVuZGVuY3kpOlxuICogYSBtZXRob2Qgb2YgZmluZGluZyBhIHR5cGljYWwgb3IgY2VudHJhbCB2YWx1ZSBvZiBhIHNldCBvZiBudW1iZXJzLlxuICpcbiAqIFRoZSBtZWRpYW4gaXNuJ3QgbmVjZXNzYXJpbHkgb25lIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgbGlzdDogdGhlIHZhbHVlXG4gKiBjYW4gYmUgdGhlIGF2ZXJhZ2Ugb2YgdHdvIGVsZW1lbnRzIGlmIHRoZSBsaXN0IGhhcyBhbiBldmVuIGxlbmd0aFxuICogYW5kIHRoZSB0d28gY2VudHJhbCB2YWx1ZXMgYXJlIGRpZmZlcmVudC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IG1lZGlhbiB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIG1lZGlhbihbMTAsIDIsIDUsIDEwMCwgMiwgMV0pOyAvLyA9PiAzLjVcbiAqL1xuZnVuY3Rpb24gbWVkaWFuKHggLyo6IEFycmF5PG51bWJlcj4gKi8pLyo6bnVtYmVyKi8ge1xuICAgIHJldHVybiArcXVhbnRpbGUoeCwgMC41KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZWRpYW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21lZGlhbi5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The min is the lowest number in the array. This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * min([1, 5, -10, 100, 2]); // => -10\n */\nfunction min(x /*: Array<number> */)/*:number*/ {\n    var value;\n    for (var i = 0; i < x.length; i++) {\n        // On the first iteration of this loop, min is\n        // undefined and is thus made the minimum element in the array\n        if (value === undefined || x[i] < value) {\n            value = x[i];\n        }\n    }\n    if (value === undefined) {\n        return NaN;\n    }\n    return value;\n}\n\nmodule.exports = min;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9taW4uanM/MzM4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFRoZSBtaW4gaXMgdGhlIGxvd2VzdCBudW1iZXIgaW4gdGhlIGFycmF5LiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gbWluaW11bSB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIG1pbihbMSwgNSwgLTEwLCAxMDAsIDJdKTsgLy8gPT4gLTEwXG4gKi9cbmZ1bmN0aW9uIG1pbih4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIE9uIHRoZSBmaXJzdCBpdGVyYXRpb24gb2YgdGhpcyBsb29wLCBtaW4gaXNcbiAgICAgICAgLy8gdW5kZWZpbmVkIGFuZCBpcyB0aHVzIG1hZGUgdGhlIG1pbmltdW0gZWxlbWVudCBpbiB0aGUgYXJyYXlcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgeFtpXSA8IHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHhbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1pbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbWluLmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)` because the input is sorted.\n *\n * @param {Array<number>} sorted input\n * @returns {number} mode\n * @example\n * modeSorted([0, 0, 1]); // => 0\n */\nfunction modeSorted(sorted /*: Array<number> */)/*:number*/ {\n\n    // Handle edge cases:\n    // The mode of an empty list is NaN\n    if (sorted.length === 0) { return NaN; }\n    else if (sorted.length === 1) { return sorted[0]; }\n\n    // This assumes it is dealing with an array of size > 1, since size\n    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n    // array.\n    var last = sorted[0],\n        // store the mode as we find new modes\n        value = NaN,\n        // store how many times we've seen the mode\n        maxSeen = 0,\n        // how many times the current candidate for the mode\n        // has been seen\n        seenThis = 1;\n\n    // end at sorted.length + 1 to fix the case in which the mode is\n    // the highest number that occurs in the sequence. the last iteration\n    // compares sorted[i], which is undefined, to the highest number\n    // in the series\n    for (var i = 1; i < sorted.length + 1; i++) {\n        // we're seeing a new number pass by\n        if (sorted[i] !== last) {\n            // the last number is the new mode since we saw it more\n            // often than the old one\n            if (seenThis > maxSeen) {\n                maxSeen = seenThis;\n                value = last;\n            }\n            seenThis = 1;\n            last = sorted[i];\n        // if this isn't a new number, it's one more occurrence of\n        // the potential mode\n        } else { seenThis++; }\n    }\n    return value;\n}\n\nmodule.exports = modeSorted;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9tb2RlX3NvcnRlZC5qcz8xOWZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFttb2RlXShodHRwOi8vYml0Lmx5L1c1SzRZdCkgaXMgdGhlIG51bWJlciB0aGF0IGFwcGVhcnMgaW4gYSBsaXN0IHRoZSBoaWdoZXN0IG51bWJlciBvZiB0aW1lcy5cbiAqIFRoZXJlIGNhbiBiZSBtdWx0aXBsZSBtb2RlcyBpbiBhIGxpc3Q6IGluIHRoZSBldmVudCBvZiBhIHRpZSwgdGhpc1xuICogYWxnb3JpdGhtIHdpbGwgcmV0dXJuIHRoZSBtb3N0IHJlY2VudGx5IHNlZW4gbW9kZS5cbiAqXG4gKiBUaGlzIGlzIGEgW21lYXN1cmUgb2YgY2VudHJhbCB0ZW5kZW5jeV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2VudHJhbF90ZW5kZW5jeSk6XG4gKiBhIG1ldGhvZCBvZiBmaW5kaW5nIGEgdHlwaWNhbCBvciBjZW50cmFsIHZhbHVlIG9mIGEgc2V0IG9mIG51bWJlcnMuXG4gKlxuICogVGhpcyBydW5zIGluIGBPKG4pYCBiZWNhdXNlIHRoZSBpbnB1dCBpcyBzb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzb3J0ZWQgaW5wdXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IG1vZGVcbiAqIEBleGFtcGxlXG4gKiBtb2RlU29ydGVkKFswLCAwLCAxXSk7IC8vID0+IDBcbiAqL1xuZnVuY3Rpb24gbW9kZVNvcnRlZChzb3J0ZWQgLyo6IEFycmF5PG51bWJlcj4gKi8pLyo6bnVtYmVyKi8ge1xuXG4gICAgLy8gSGFuZGxlIGVkZ2UgY2FzZXM6XG4gICAgLy8gVGhlIG1vZGUgb2YgYW4gZW1wdHkgbGlzdCBpcyBOYU5cbiAgICBpZiAoc29ydGVkLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gTmFOOyB9XG4gICAgZWxzZSBpZiAoc29ydGVkLmxlbmd0aCA9PT0gMSkgeyByZXR1cm4gc29ydGVkWzBdOyB9XG5cbiAgICAvLyBUaGlzIGFzc3VtZXMgaXQgaXMgZGVhbGluZyB3aXRoIGFuIGFycmF5IG9mIHNpemUgPiAxLCBzaW5jZSBzaXplXG4gICAgLy8gMCBhbmQgMSBhcmUgaGFuZGxlZCBpbW1lZGlhdGVseS4gSGVuY2UgaXQgc3RhcnRzIGF0IGluZGV4IDEgaW4gdGhlXG4gICAgLy8gYXJyYXkuXG4gICAgdmFyIGxhc3QgPSBzb3J0ZWRbMF0sXG4gICAgICAgIC8vIHN0b3JlIHRoZSBtb2RlIGFzIHdlIGZpbmQgbmV3IG1vZGVzXG4gICAgICAgIHZhbHVlID0gTmFOLFxuICAgICAgICAvLyBzdG9yZSBob3cgbWFueSB0aW1lcyB3ZSd2ZSBzZWVuIHRoZSBtb2RlXG4gICAgICAgIG1heFNlZW4gPSAwLFxuICAgICAgICAvLyBob3cgbWFueSB0aW1lcyB0aGUgY3VycmVudCBjYW5kaWRhdGUgZm9yIHRoZSBtb2RlXG4gICAgICAgIC8vIGhhcyBiZWVuIHNlZW5cbiAgICAgICAgc2VlblRoaXMgPSAxO1xuXG4gICAgLy8gZW5kIGF0IHNvcnRlZC5sZW5ndGggKyAxIHRvIGZpeCB0aGUgY2FzZSBpbiB3aGljaCB0aGUgbW9kZSBpc1xuICAgIC8vIHRoZSBoaWdoZXN0IG51bWJlciB0aGF0IG9jY3VycyBpbiB0aGUgc2VxdWVuY2UuIHRoZSBsYXN0IGl0ZXJhdGlvblxuICAgIC8vIGNvbXBhcmVzIHNvcnRlZFtpXSwgd2hpY2ggaXMgdW5kZWZpbmVkLCB0byB0aGUgaGlnaGVzdCBudW1iZXJcbiAgICAvLyBpbiB0aGUgc2VyaWVzXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzb3J0ZWQubGVuZ3RoICsgMTsgaSsrKSB7XG4gICAgICAgIC8vIHdlJ3JlIHNlZWluZyBhIG5ldyBudW1iZXIgcGFzcyBieVxuICAgICAgICBpZiAoc29ydGVkW2ldICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBudW1iZXIgaXMgdGhlIG5ldyBtb2RlIHNpbmNlIHdlIHNhdyBpdCBtb3JlXG4gICAgICAgICAgICAvLyBvZnRlbiB0aGFuIHRoZSBvbGQgb25lXG4gICAgICAgICAgICBpZiAoc2VlblRoaXMgPiBtYXhTZWVuKSB7XG4gICAgICAgICAgICAgICAgbWF4U2VlbiA9IHNlZW5UaGlzO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbGFzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW5UaGlzID0gMTtcbiAgICAgICAgICAgIGxhc3QgPSBzb3J0ZWRbaV07XG4gICAgICAgIC8vIGlmIHRoaXMgaXNuJ3QgYSBuZXcgbnVtYmVyLCBpdCdzIG9uZSBtb3JlIG9jY3VycmVuY2Ugb2ZcbiAgICAgICAgLy8gdGhlIHBvdGVudGlhbCBtb2RlXG4gICAgICAgIH0gZWxzZSB7IHNlZW5UaGlzKys7IH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGVTb3J0ZWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21vZGVfc29ydGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * Sort an array of numbers by their numeric value, ensuring that the\n * array is not changed in place.\n *\n * This is necessary because the default behavior of .sort\n * in JavaScript is to sort arrays as string values\n *\n *     [1, 10, 12, 102, 20].sort()\n *     // output\n *     [1, 10, 102, 12, 20]\n *\n * @param {Array<number>} array input array\n * @return {Array<number>} sorted array\n * @private\n * @example\n * numericSort([3, 2, 1]) // => [1, 2, 3]\n */\nfunction numericSort(array /*: Array<number> */) /*: Array<number> */ {\n    return array\n        // ensure the array is not changed in-place\n        .slice()\n        // comparator function that treats input as numeric\n        .sort(function(a, b) {\n            return a - b;\n        });\n}\n\nmodule.exports = numericSort;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9udW1lcmljX3NvcnQuanM/ZTU5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgb2YgbnVtYmVycyBieSB0aGVpciBudW1lcmljIHZhbHVlLCBlbnN1cmluZyB0aGF0IHRoZVxuICogYXJyYXkgaXMgbm90IGNoYW5nZWQgaW4gcGxhY2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiAuc29ydFxuICogaW4gSmF2YVNjcmlwdCBpcyB0byBzb3J0IGFycmF5cyBhcyBzdHJpbmcgdmFsdWVzXG4gKlxuICogICAgIFsxLCAxMCwgMTIsIDEwMiwgMjBdLnNvcnQoKVxuICogICAgIC8vIG91dHB1dFxuICogICAgIFsxLCAxMCwgMTAyLCAxMiwgMjBdXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSBpbnB1dCBhcnJheVxuICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gc29ydGVkIGFycmF5XG4gKiBAcHJpdmF0ZVxuICogQGV4YW1wbGVcbiAqIG51bWVyaWNTb3J0KFszLCAyLCAxXSkgLy8gPT4gWzEsIDIsIDNdXG4gKi9cbmZ1bmN0aW9uIG51bWVyaWNTb3J0KGFycmF5IC8qOiBBcnJheTxudW1iZXI+ICovKSAvKjogQXJyYXk8bnVtYmVyPiAqLyB7XG4gICAgcmV0dXJuIGFycmF5XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgYXJyYXkgaXMgbm90IGNoYW5nZWQgaW4tcGxhY2VcbiAgICAgICAgLnNsaWNlKClcbiAgICAgICAgLy8gY29tcGFyYXRvciBmdW5jdGlvbiB0aGF0IHRyZWF0cyBpbnB1dCBhcyBudW1lcmljXG4gICAgICAgIC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbnVtZXJpY1NvcnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL251bWVyaWNfc29ydC5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar mean = __webpack_require__(2);\n\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_sampleCovariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample covariance\n * @example\n * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5\n */\nfunction sampleCovariance(x /*:Array<number>*/, y /*:Array<number>*/)/*:number*/ {\n\n    // The two datasets must have the same length which must be more than 1\n    if (x.length <= 1 || x.length !== y.length) {\n        return NaN;\n    }\n\n    // determine the mean of each dataset so that we can judge each\n    // value of the dataset fairly as the difference from the mean. this\n    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n    // does not suffer because of the difference in absolute values\n    var xmean = mean(x),\n        ymean = mean(y),\n        sum = 0;\n\n    // for each pair of values, the covariance increases when their\n    // difference from the mean is associated - if both are well above\n    // or if both are well below\n    // the mean, the covariance increases significantly.\n    for (var i = 0; i < x.length; i++) {\n        sum += (x[i] - xmean) * (y[i] - ymean);\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // the covariance is weighted by the length of the datasets.\n    return sum / besselsCorrection;\n}\n\nmodule.exports = sampleCovariance;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGVfY292YXJpYW5jZS5qcz9kMjAxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBtZWFuID0gcmVxdWlyZSgnLi9tZWFuJyk7XG5cbi8qKlxuICogW1NhbXBsZSBjb3ZhcmlhbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYW1wbGVfbWVhbl9hbmRfc2FtcGxlQ292YXJpYW5jZSkgb2YgdHdvIGRhdGFzZXRzOlxuICogaG93IG11Y2ggZG8gdGhlIHR3byBkYXRhc2V0cyBtb3ZlIHRvZ2V0aGVyP1xuICogeCBhbmQgeSBhcmUgdHdvIGRhdGFzZXRzLCByZXByZXNlbnRlZCBhcyBhcnJheXMgb2YgbnVtYmVycy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggZmlyc3QgaW5wdXRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geSBzZWNvbmQgaW5wdXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNhbXBsZSBjb3ZhcmlhbmNlXG4gKiBAZXhhbXBsZVxuICogc2FtcGxlQ292YXJpYW5jZShbMSwgMiwgMywgNCwgNSwgNl0sIFs2LCA1LCA0LCAzLCAyLCAxXSk7IC8vID0+IC0zLjVcbiAqL1xuZnVuY3Rpb24gc2FtcGxlQ292YXJpYW5jZSh4IC8qOkFycmF5PG51bWJlcj4qLywgeSAvKjpBcnJheTxudW1iZXI+Ki8pLyo6bnVtYmVyKi8ge1xuXG4gICAgLy8gVGhlIHR3byBkYXRhc2V0cyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoIHdoaWNoIG11c3QgYmUgbW9yZSB0aGFuIDFcbiAgICBpZiAoeC5sZW5ndGggPD0gMSB8fCB4Lmxlbmd0aCAhPT0geS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICAvLyBkZXRlcm1pbmUgdGhlIG1lYW4gb2YgZWFjaCBkYXRhc2V0IHNvIHRoYXQgd2UgY2FuIGp1ZGdlIGVhY2hcbiAgICAvLyB2YWx1ZSBvZiB0aGUgZGF0YXNldCBmYWlybHkgYXMgdGhlIGRpZmZlcmVuY2UgZnJvbSB0aGUgbWVhbi4gdGhpc1xuICAgIC8vIHdheSwgaWYgb25lIGRhdGFzZXQgaXMgWzEsIDIsIDNdIGFuZCBbMiwgMywgNF0sIHRoZWlyIGNvdmFyaWFuY2VcbiAgICAvLyBkb2VzIG5vdCBzdWZmZXIgYmVjYXVzZSBvZiB0aGUgZGlmZmVyZW5jZSBpbiBhYnNvbHV0ZSB2YWx1ZXNcbiAgICB2YXIgeG1lYW4gPSBtZWFuKHgpLFxuICAgICAgICB5bWVhbiA9IG1lYW4oeSksXG4gICAgICAgIHN1bSA9IDA7XG5cbiAgICAvLyBmb3IgZWFjaCBwYWlyIG9mIHZhbHVlcywgdGhlIGNvdmFyaWFuY2UgaW5jcmVhc2VzIHdoZW4gdGhlaXJcbiAgICAvLyBkaWZmZXJlbmNlIGZyb20gdGhlIG1lYW4gaXMgYXNzb2NpYXRlZCAtIGlmIGJvdGggYXJlIHdlbGwgYWJvdmVcbiAgICAvLyBvciBpZiBib3RoIGFyZSB3ZWxsIGJlbG93XG4gICAgLy8gdGhlIG1lYW4sIHRoZSBjb3ZhcmlhbmNlIGluY3JlYXNlcyBzaWduaWZpY2FudGx5LlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdW0gKz0gKHhbaV0gLSB4bWVhbikgKiAoeVtpXSAtIHltZWFuKTtcbiAgICB9XG5cbiAgICAvLyB0aGlzIGlzIEJlc3NlbHMnIENvcnJlY3Rpb246IGFuIGFkanVzdG1lbnQgbWFkZSB0byBzYW1wbGUgc3RhdGlzdGljc1xuICAgIC8vIHRoYXQgYWxsb3dzIGZvciB0aGUgcmVkdWNlZCBkZWdyZWUgb2YgZnJlZWRvbSBlbnRhaWxlZCBpbiBjYWxjdWxhdGluZ1xuICAgIC8vIHZhbHVlcyBmcm9tIHNhbXBsZXMgcmF0aGVyIHRoYW4gY29tcGxldGUgcG9wdWxhdGlvbnMuXG4gICAgdmFyIGJlc3NlbHNDb3JyZWN0aW9uID0geC5sZW5ndGggLSAxO1xuXG4gICAgLy8gdGhlIGNvdmFyaWFuY2UgaXMgd2VpZ2h0ZWQgYnkgdGhlIGxlbmd0aCBvZiB0aGUgZGF0YXNldHMuXG4gICAgcmV0dXJuIHN1bSAvIGJlc3NlbHNDb3JyZWN0aW9uO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhbXBsZUNvdmFyaWFuY2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3NhbXBsZV9jb3ZhcmlhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar shuffleInPlace = __webpack_require__(37);\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} sample an array of any kind of element\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle/*::<T>*/(sample/*:Array<T>*/, randomSource/*:Function*/) {\n    // slice the original array so that it is not modified\n    sample = sample.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample.slice(), randomSource);\n}\n\nmodule.exports = shuffle;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zaHVmZmxlLmpzPzk2YTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIHNodWZmbGVJblBsYWNlID0gcmVxdWlyZSgnLi9zaHVmZmxlX2luX3BsYWNlJyk7XG5cbi8qKlxuICogQSBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyJUUyJTgwJTkzWWF0ZXNfc2h1ZmZsZSlcbiAqIGlzIGEgZmFzdCB3YXkgdG8gY3JlYXRlIGEgcmFuZG9tIHBlcm11dGF0aW9uIG9mIGEgZmluaXRlIHNldC4gVGhpcyBpc1xuICogYSBmdW5jdGlvbiBhcm91bmQgYHNodWZmbGVfaW5fcGxhY2VgIHRoYXQgYWRkcyB0aGUgZ3VhcmFudGVlIHRoYXRcbiAqIGl0IHdpbGwgbm90IG1vZGlmeSBpdHMgaW5wdXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2FtcGxlIGFuIGFycmF5IG9mIGFueSBraW5kIG9mIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyYW5kb21Tb3VyY2U9TWF0aC5yYW5kb21dIGFuIG9wdGlvbmFsIGVudHJvcHkgc291cmNlIHRoYXRcbiAqIHJldHVybnMgbnVtYmVycyBiZXR3ZWVuIDAgaW5jbHVzaXZlIGFuZCAxIGV4Y2x1c2l2ZTogdGhlIHJhbmdlIFswLCAxKVxuICogQHJldHVybiB7QXJyYXl9IHNodWZmbGVkIHZlcnNpb24gb2YgaW5wdXRcbiAqIEBleGFtcGxlXG4gKiB2YXIgc2h1ZmZsZWQgPSBzaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gKiBzaHVmZmxlZDsgLy8gPSBbMiwgMywgMSwgNF0gb3IgYW55IG90aGVyIHJhbmRvbSBwZXJtdXRhdGlvblxuICovXG5mdW5jdGlvbiBzaHVmZmxlLyo6OjxUPiovKHNhbXBsZS8qOkFycmF5PFQ+Ki8sIHJhbmRvbVNvdXJjZS8qOkZ1bmN0aW9uKi8pIHtcbiAgICAvLyBzbGljZSB0aGUgb3JpZ2luYWwgYXJyYXkgc28gdGhhdCBpdCBpcyBub3QgbW9kaWZpZWRcbiAgICBzYW1wbGUgPSBzYW1wbGUuc2xpY2UoKTtcblxuICAgIC8vIGFuZCB0aGVuIHNodWZmbGUgdGhhdCBzaGFsbG93LWNvcGllZCBhcnJheSwgaW4gcGxhY2VcbiAgICByZXR1cm4gc2h1ZmZsZUluUGxhY2Uoc2FtcGxlLnNsaWNlKCksIHJhbmRvbVNvdXJjZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2h1ZmZsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc2h1ZmZsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} sample input array\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} sample\n * @example\n * var sample = [1, 2, 3, 4];\n * shuffleInPlace(sample);\n * // sample is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(sample/*:Array<any>*/, randomSource/*:Function*/)/*:Array<any>*/ {\n\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the sample to determine\n    // when no elements remain to shuffle.\n    var length = sample.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    var temporary;\n\n    // The index to swap at each stage.\n    var index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // chose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we'll move temporarily\n        temporary = sample[length];\n\n        // swap the value at `sample[length]` with `sample[index]`\n        sample[length] = sample[index];\n        sample[index] = temporary;\n    }\n\n    return sample;\n}\n\nmodule.exports = shuffleInPlace;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zaHVmZmxlX2luX3BsYWNlLmpzPzg2ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBBIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXIlRTIlODAlOTNZYXRlc19zaHVmZmxlKVxuICogaW4tcGxhY2UgLSB3aGljaCBtZWFucyB0aGF0IGl0ICoqd2lsbCBjaGFuZ2UgdGhlIG9yZGVyIG9mIHRoZSBvcmlnaW5hbFxuICogYXJyYXkgYnkgcmVmZXJlbmNlKiouXG4gKlxuICogVGhpcyBpcyBhbiBhbGdvcml0aG0gdGhhdCBnZW5lcmF0ZXMgYSByYW5kb20gW3Blcm11dGF0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QZXJtdXRhdGlvbilcbiAqIG9mIGEgc2V0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHNhbXBsZSBpbnB1dCBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JhbmRvbVNvdXJjZT1NYXRoLnJhbmRvbV0gYW4gb3B0aW9uYWwgZW50cm9weSBzb3VyY2UgdGhhdFxuICogcmV0dXJucyBudW1iZXJzIGJldHdlZW4gMCBpbmNsdXNpdmUgYW5kIDEgZXhjbHVzaXZlOiB0aGUgcmFuZ2UgWzAsIDEpXG4gKiBAcmV0dXJucyB7QXJyYXl9IHNhbXBsZVxuICogQGV4YW1wbGVcbiAqIHZhciBzYW1wbGUgPSBbMSwgMiwgMywgNF07XG4gKiBzaHVmZmxlSW5QbGFjZShzYW1wbGUpO1xuICogLy8gc2FtcGxlIGlzIHNodWZmbGVkIHRvIGEgdmFsdWUgbGlrZSBbMiwgMSwgNCwgM11cbiAqL1xuZnVuY3Rpb24gc2h1ZmZsZUluUGxhY2Uoc2FtcGxlLyo6QXJyYXk8YW55PiovLCByYW5kb21Tb3VyY2UvKjpGdW5jdGlvbiovKS8qOkFycmF5PGFueT4qLyB7XG5cblxuICAgIC8vIGEgY3VzdG9tIHJhbmRvbSBudW1iZXIgc291cmNlIGNhbiBiZSBwcm92aWRlZCBpZiB5b3Ugd2FudCB0byB1c2VcbiAgICAvLyBhIGZpeGVkIHNlZWQgb3IgYW5vdGhlciByYW5kb20gbnVtYmVyIGdlbmVyYXRvciwgbGlrZVxuICAgIC8vIFtyYW5kb20tanNdKGh0dHBzOi8vd3d3Lm5wbWpzLm9yZy9wYWNrYWdlL3JhbmRvbS1qcylcbiAgICByYW5kb21Tb3VyY2UgPSByYW5kb21Tb3VyY2UgfHwgTWF0aC5yYW5kb207XG5cbiAgICAvLyBzdG9yZSB0aGUgY3VycmVudCBsZW5ndGggb2YgdGhlIHNhbXBsZSB0byBkZXRlcm1pbmVcbiAgICAvLyB3aGVuIG5vIGVsZW1lbnRzIHJlbWFpbiB0byBzaHVmZmxlLlxuICAgIHZhciBsZW5ndGggPSBzYW1wbGUubGVuZ3RoO1xuXG4gICAgLy8gdGVtcG9yYXJ5IGlzIHVzZWQgdG8gaG9sZCBhbiBpdGVtIHdoZW4gaXQgaXMgYmVpbmdcbiAgICAvLyBzd2FwcGVkIGJldHdlZW4gaW5kaWNlcy5cbiAgICB2YXIgdGVtcG9yYXJ5O1xuXG4gICAgLy8gVGhlIGluZGV4IHRvIHN3YXAgYXQgZWFjaCBzdGFnZS5cbiAgICB2YXIgaW5kZXg7XG5cbiAgICAvLyBXaGlsZSB0aGVyZSBhcmUgc3RpbGwgaXRlbXMgdG8gc2h1ZmZsZVxuICAgIHdoaWxlIChsZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGNob3NlIGEgcmFuZG9tIGluZGV4IHdpdGhpbiB0aGUgc3Vic2V0IG9mIHRoZSBhcnJheVxuICAgICAgICAvLyB0aGF0IGlzIG5vdCB5ZXQgc2h1ZmZsZWRcbiAgICAgICAgaW5kZXggPSBNYXRoLmZsb29yKHJhbmRvbVNvdXJjZSgpICogbGVuZ3RoLS0pO1xuXG4gICAgICAgIC8vIHN0b3JlIHRoZSB2YWx1ZSB0aGF0IHdlJ2xsIG1vdmUgdGVtcG9yYXJpbHlcbiAgICAgICAgdGVtcG9yYXJ5ID0gc2FtcGxlW2xlbmd0aF07XG5cbiAgICAgICAgLy8gc3dhcCB0aGUgdmFsdWUgYXQgYHNhbXBsZVtsZW5ndGhdYCB3aXRoIGBzYW1wbGVbaW5kZXhdYFxuICAgICAgICBzYW1wbGVbbGVuZ3RoXSA9IHNhbXBsZVtpbmRleF07XG4gICAgICAgIHNhbXBsZVtpbmRleF0gPSB0ZW1wb3Jhcnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNhbXBsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaHVmZmxlSW5QbGFjZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc2h1ZmZsZV9pbl9wbGFjZS5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar variance = __webpack_require__(42);\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance. It's useful for measuring the amount\n * of variation or dispersion in a set of values.\n *\n * Standard deviation is only appropriate for full-population knowledge: for\n * samples of a population, {@link sampleStandardDeviation} is\n * more appropriate.\n *\n * @param {Array<number>} x input\n * @returns {number} standard deviation\n * @example\n * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4\n * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2\n */\nfunction standardDeviation(x /*: Array<number> */)/*:number*/ {\n    // The standard deviation of no numbers is null\n    var v = variance(x);\n    if (isNaN(v)) { return 0; }\n    return Math.sqrt(v);\n}\n\nmodule.exports = standardDeviation;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zdGFuZGFyZF9kZXZpYXRpb24uanM/ODYxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgdmFyaWFuY2UgPSByZXF1aXJlKCcuL3ZhcmlhbmNlJyk7XG5cbi8qKlxuICogVGhlIFtzdGFuZGFyZCBkZXZpYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3RhbmRhcmRfZGV2aWF0aW9uKVxuICogaXMgdGhlIHNxdWFyZSByb290IG9mIHRoZSB2YXJpYW5jZS4gSXQncyB1c2VmdWwgZm9yIG1lYXN1cmluZyB0aGUgYW1vdW50XG4gKiBvZiB2YXJpYXRpb24gb3IgZGlzcGVyc2lvbiBpbiBhIHNldCBvZiB2YWx1ZXMuXG4gKlxuICogU3RhbmRhcmQgZGV2aWF0aW9uIGlzIG9ubHkgYXBwcm9wcmlhdGUgZm9yIGZ1bGwtcG9wdWxhdGlvbiBrbm93bGVkZ2U6IGZvclxuICogc2FtcGxlcyBvZiBhIHBvcHVsYXRpb24sIHtAbGluayBzYW1wbGVTdGFuZGFyZERldmlhdGlvbn0gaXNcbiAqIG1vcmUgYXBwcm9wcmlhdGUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBzdGFuZGFyZCBkZXZpYXRpb25cbiAqIEBleGFtcGxlXG4gKiB2YXJpYW5jZShbMiwgNCwgNCwgNCwgNSwgNSwgNywgOV0pOyAvLyA9PiA0XG4gKiBzdGFuZGFyZERldmlhdGlvbihbMiwgNCwgNCwgNCwgNSwgNSwgNywgOV0pOyAvLyA9PiAyXG4gKi9cbmZ1bmN0aW9uIHN0YW5kYXJkRGV2aWF0aW9uKHggLyo6IEFycmF5PG51bWJlcj4gKi8pLyo6bnVtYmVyKi8ge1xuICAgIC8vIFRoZSBzdGFuZGFyZCBkZXZpYXRpb24gb2Ygbm8gbnVtYmVycyBpcyBudWxsXG4gICAgdmFyIHYgPSB2YXJpYW5jZSh4KTtcbiAgICBpZiAoaXNOYU4odikpIHsgcmV0dXJuIDA7IH1cbiAgICByZXR1cm4gTWF0aC5zcXJ0KHYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YW5kYXJkRGV2aWF0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zdGFuZGFyZF9kZXZpYXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar SQRT_2PI = Math.sqrt(2 * Math.PI);\n\nfunction cumulativeDistribution(z) {\n    var sum = z,\n        tmp = z;\n\n    // 15 iterations are enough for 4-digit precision\n    for (var i = 1; i < 15; i++) {\n        tmp *= z * z / (2 * i + 1);\n        sum += tmp;\n    }\n    return Math.round((0.5 + (sum / SQRT_2PI) * Math.exp(-z * z / 2)) * 1e4) / 1e4;\n}\n\n/**\n * A standard normal table, also called the unit normal table or Z table,\n * is a mathematical table for the values of Î¦ (phi), which are the values of\n * the cumulative distribution function of the normal distribution.\n * It is used to find the probability that a statistic is observed below,\n * above, or between values on the standard normal distribution, and by\n * extension, any normal distribution.\n *\n * The probabilities are calculated using the\n * [Cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function).\n * The table used is the cumulative, and not cumulative from 0 to mean\n * (even though the latter has 5 digits precision, instead of 4).\n */\nvar standardNormalTable/*: Array<number> */ = [];\n\nfor (var z = 0; z <= 3.09; z += 0.01) {\n    standardNormalTable.push(cumulativeDistribution(z));\n}\n\nmodule.exports = standardNormalTable;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zdGFuZGFyZF9ub3JtYWxfdGFibGUuanM/YTAwZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgU1FSVF8yUEkgPSBNYXRoLnNxcnQoMiAqIE1hdGguUEkpO1xuXG5mdW5jdGlvbiBjdW11bGF0aXZlRGlzdHJpYnV0aW9uKHopIHtcbiAgICB2YXIgc3VtID0geixcbiAgICAgICAgdG1wID0gejtcblxuICAgIC8vIDE1IGl0ZXJhdGlvbnMgYXJlIGVub3VnaCBmb3IgNC1kaWdpdCBwcmVjaXNpb25cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IDE1OyBpKyspIHtcbiAgICAgICAgdG1wICo9IHogKiB6IC8gKDIgKiBpICsgMSk7XG4gICAgICAgIHN1bSArPSB0bXA7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLnJvdW5kKCgwLjUgKyAoc3VtIC8gU1FSVF8yUEkpICogTWF0aC5leHAoLXogKiB6IC8gMikpICogMWU0KSAvIDFlNDtcbn1cblxuLyoqXG4gKiBBIHN0YW5kYXJkIG5vcm1hbCB0YWJsZSwgYWxzbyBjYWxsZWQgdGhlIHVuaXQgbm9ybWFsIHRhYmxlIG9yIFogdGFibGUsXG4gKiBpcyBhIG1hdGhlbWF0aWNhbCB0YWJsZSBmb3IgdGhlIHZhbHVlcyBvZiDOpiAocGhpKSwgd2hpY2ggYXJlIHRoZSB2YWx1ZXMgb2ZcbiAqIHRoZSBjdW11bGF0aXZlIGRpc3RyaWJ1dGlvbiBmdW5jdGlvbiBvZiB0aGUgbm9ybWFsIGRpc3RyaWJ1dGlvbi5cbiAqIEl0IGlzIHVzZWQgdG8gZmluZCB0aGUgcHJvYmFiaWxpdHkgdGhhdCBhIHN0YXRpc3RpYyBpcyBvYnNlcnZlZCBiZWxvdyxcbiAqIGFib3ZlLCBvciBiZXR3ZWVuIHZhbHVlcyBvbiB0aGUgc3RhbmRhcmQgbm9ybWFsIGRpc3RyaWJ1dGlvbiwgYW5kIGJ5XG4gKiBleHRlbnNpb24sIGFueSBub3JtYWwgZGlzdHJpYnV0aW9uLlxuICpcbiAqIFRoZSBwcm9iYWJpbGl0aWVzIGFyZSBjYWxjdWxhdGVkIHVzaW5nIHRoZVxuICogW0N1bXVsYXRpdmUgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Ob3JtYWxfZGlzdHJpYnV0aW9uI0N1bXVsYXRpdmVfZGlzdHJpYnV0aW9uX2Z1bmN0aW9uKS5cbiAqIFRoZSB0YWJsZSB1c2VkIGlzIHRoZSBjdW11bGF0aXZlLCBhbmQgbm90IGN1bXVsYXRpdmUgZnJvbSAwIHRvIG1lYW5cbiAqIChldmVuIHRob3VnaCB0aGUgbGF0dGVyIGhhcyA1IGRpZ2l0cyBwcmVjaXNpb24sIGluc3RlYWQgb2YgNCkuXG4gKi9cbnZhciBzdGFuZGFyZE5vcm1hbFRhYmxlLyo6IEFycmF5PG51bWJlcj4gKi8gPSBbXTtcblxuZm9yICh2YXIgeiA9IDA7IHogPD0gMy4wOTsgeiArPSAwLjAxKSB7XG4gICAgc3RhbmRhcmROb3JtYWxUYWJsZS5wdXNoKGN1bXVsYXRpdmVEaXN0cmlidXRpb24oeikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YW5kYXJkTm9ybWFsVGFibGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3N0YW5kYXJkX25vcm1hbF90YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * Our default sum is the [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm) is\n * a method for computing the sum of a list of numbers while correcting\n * for floating-point errors. Traditionally, sums are calculated as many\n * successive additions, each one with its own floating-point roundoff. These\n * losses in precision add up as the number of numbers increases. This alternative\n * algorithm is more accurate than the simple way of calculating sums by simple\n * addition.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sum([1, 2, 3]); // => 6\n */\nfunction sum(x/*: Array<number> */)/*: number */ {\n\n    // like the traditional sum algorithm, we keep a running\n    // count of the current sum.\n    var sum = 0;\n\n    // but we also keep three extra variables as bookkeeping:\n    // most importantly, an error correction value. This will be a very\n    // small number that is the opposite of the floating point precision loss.\n    var errorCompensation = 0;\n\n    // this will be each number in the list corrected with the compensation value.\n    var correctedCurrentValue;\n\n    // and this will be the next sum\n    var nextSum;\n\n    for (var i = 0; i < x.length; i++) {\n        // first correct the value that we're going to add to the sum\n        correctedCurrentValue = x[i] - errorCompensation;\n\n        // compute the next sum. sum is likely a much larger number\n        // than correctedCurrentValue, so we'll lose precision here,\n        // and measure how much precision is lost in the next step\n        nextSum = sum + correctedCurrentValue;\n\n        // we intentionally didn't assign sum immediately, but stored\n        // it for now so we can figure out this: is (sum + nextValue) - nextValue\n        // not equal to 0? ideally it would be, but in practice it won't:\n        // it will be some very small number. that's what we record\n        // as errorCompensation.\n        errorCompensation = nextSum - sum - correctedCurrentValue;\n\n        // now that we've computed how much we'll correct for in the next\n        // loop, start treating the nextSum as the current sum.\n        sum = nextSum;\n    }\n\n    return sum;\n}\n\nmodule.exports = sum;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zdW0uanM/NjRiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIE91ciBkZWZhdWx0IHN1bSBpcyB0aGUgW0thaGFuIHN1bW1hdGlvbiBhbGdvcml0aG1dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0thaGFuX3N1bW1hdGlvbl9hbGdvcml0aG0pIGlzXG4gKiBhIG1ldGhvZCBmb3IgY29tcHV0aW5nIHRoZSBzdW0gb2YgYSBsaXN0IG9mIG51bWJlcnMgd2hpbGUgY29ycmVjdGluZ1xuICogZm9yIGZsb2F0aW5nLXBvaW50IGVycm9ycy4gVHJhZGl0aW9uYWxseSwgc3VtcyBhcmUgY2FsY3VsYXRlZCBhcyBtYW55XG4gKiBzdWNjZXNzaXZlIGFkZGl0aW9ucywgZWFjaCBvbmUgd2l0aCBpdHMgb3duIGZsb2F0aW5nLXBvaW50IHJvdW5kb2ZmLiBUaGVzZVxuICogbG9zc2VzIGluIHByZWNpc2lvbiBhZGQgdXAgYXMgdGhlIG51bWJlciBvZiBudW1iZXJzIGluY3JlYXNlcy4gVGhpcyBhbHRlcm5hdGl2ZVxuICogYWxnb3JpdGhtIGlzIG1vcmUgYWNjdXJhdGUgdGhhbiB0aGUgc2ltcGxlIHdheSBvZiBjYWxjdWxhdGluZyBzdW1zIGJ5IHNpbXBsZVxuICogYWRkaXRpb24uXG4gKlxuICogVGhpcyBydW5zIG9uIGBPKG4pYCwgbGluZWFyIHRpbWUgaW4gcmVzcGVjdCB0byB0aGUgYXJyYXlcbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXRcbiAqIEByZXR1cm4ge251bWJlcn0gc3VtIG9mIGFsbCBpbnB1dCBudW1iZXJzXG4gKiBAZXhhbXBsZVxuICogc3VtKFsxLCAyLCAzXSk7IC8vID0+IDZcbiAqL1xuZnVuY3Rpb24gc3VtKHgvKjogQXJyYXk8bnVtYmVyPiAqLykvKjogbnVtYmVyICovIHtcblxuICAgIC8vIGxpa2UgdGhlIHRyYWRpdGlvbmFsIHN1bSBhbGdvcml0aG0sIHdlIGtlZXAgYSBydW5uaW5nXG4gICAgLy8gY291bnQgb2YgdGhlIGN1cnJlbnQgc3VtLlxuICAgIHZhciBzdW0gPSAwO1xuXG4gICAgLy8gYnV0IHdlIGFsc28ga2VlcCB0aHJlZSBleHRyYSB2YXJpYWJsZXMgYXMgYm9va2tlZXBpbmc6XG4gICAgLy8gbW9zdCBpbXBvcnRhbnRseSwgYW4gZXJyb3IgY29ycmVjdGlvbiB2YWx1ZS4gVGhpcyB3aWxsIGJlIGEgdmVyeVxuICAgIC8vIHNtYWxsIG51bWJlciB0aGF0IGlzIHRoZSBvcHBvc2l0ZSBvZiB0aGUgZmxvYXRpbmcgcG9pbnQgcHJlY2lzaW9uIGxvc3MuXG4gICAgdmFyIGVycm9yQ29tcGVuc2F0aW9uID0gMDtcblxuICAgIC8vIHRoaXMgd2lsbCBiZSBlYWNoIG51bWJlciBpbiB0aGUgbGlzdCBjb3JyZWN0ZWQgd2l0aCB0aGUgY29tcGVuc2F0aW9uIHZhbHVlLlxuICAgIHZhciBjb3JyZWN0ZWRDdXJyZW50VmFsdWU7XG5cbiAgICAvLyBhbmQgdGhpcyB3aWxsIGJlIHRoZSBuZXh0IHN1bVxuICAgIHZhciBuZXh0U3VtO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGZpcnN0IGNvcnJlY3QgdGhlIHZhbHVlIHRoYXQgd2UncmUgZ29pbmcgdG8gYWRkIHRvIHRoZSBzdW1cbiAgICAgICAgY29ycmVjdGVkQ3VycmVudFZhbHVlID0geFtpXSAtIGVycm9yQ29tcGVuc2F0aW9uO1xuXG4gICAgICAgIC8vIGNvbXB1dGUgdGhlIG5leHQgc3VtLiBzdW0gaXMgbGlrZWx5IGEgbXVjaCBsYXJnZXIgbnVtYmVyXG4gICAgICAgIC8vIHRoYW4gY29ycmVjdGVkQ3VycmVudFZhbHVlLCBzbyB3ZSdsbCBsb3NlIHByZWNpc2lvbiBoZXJlLFxuICAgICAgICAvLyBhbmQgbWVhc3VyZSBob3cgbXVjaCBwcmVjaXNpb24gaXMgbG9zdCBpbiB0aGUgbmV4dCBzdGVwXG4gICAgICAgIG5leHRTdW0gPSBzdW0gKyBjb3JyZWN0ZWRDdXJyZW50VmFsdWU7XG5cbiAgICAgICAgLy8gd2UgaW50ZW50aW9uYWxseSBkaWRuJ3QgYXNzaWduIHN1bSBpbW1lZGlhdGVseSwgYnV0IHN0b3JlZFxuICAgICAgICAvLyBpdCBmb3Igbm93IHNvIHdlIGNhbiBmaWd1cmUgb3V0IHRoaXM6IGlzIChzdW0gKyBuZXh0VmFsdWUpIC0gbmV4dFZhbHVlXG4gICAgICAgIC8vIG5vdCBlcXVhbCB0byAwPyBpZGVhbGx5IGl0IHdvdWxkIGJlLCBidXQgaW4gcHJhY3RpY2UgaXQgd29uJ3Q6XG4gICAgICAgIC8vIGl0IHdpbGwgYmUgc29tZSB2ZXJ5IHNtYWxsIG51bWJlci4gdGhhdCdzIHdoYXQgd2UgcmVjb3JkXG4gICAgICAgIC8vIGFzIGVycm9yQ29tcGVuc2F0aW9uLlxuICAgICAgICBlcnJvckNvbXBlbnNhdGlvbiA9IG5leHRTdW0gLSBzdW0gLSBjb3JyZWN0ZWRDdXJyZW50VmFsdWU7XG5cbiAgICAgICAgLy8gbm93IHRoYXQgd2UndmUgY29tcHV0ZWQgaG93IG11Y2ggd2UnbGwgY29ycmVjdCBmb3IgaW4gdGhlIG5leHRcbiAgICAgICAgLy8gbG9vcCwgc3RhcnQgdHJlYXRpbmcgdGhlIG5leHRTdW0gYXMgdGhlIGN1cnJlbnQgc3VtLlxuICAgICAgICBzdW0gPSBuZXh0U3VtO1xuICAgIH1cblxuICAgIHJldHVybiBzdW07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3VtO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zdW0uanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array} input an array of primitive values.\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\nfunction uniqueCountSorted(input/*: Array<any>*/)/*: number */ {\n    var uniqueValueCount = 0,\n        lastSeenValue;\n    for (var i = 0; i < input.length; i++) {\n        if (i === 0 || input[i] !== lastSeenValue) {\n            lastSeenValue = input[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\nmodule.exports = uniqueCountSorted;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy91bmlxdWVfY291bnRfc29ydGVkLmpzP2U4YjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBGb3IgYSBzb3J0ZWQgaW5wdXQsIGNvdW50aW5nIHRoZSBudW1iZXIgb2YgdW5pcXVlIHZhbHVlc1xuICogaXMgcG9zc2libGUgaW4gY29uc3RhbnQgdGltZSBhbmQgY29uc3RhbnQgbWVtb3J5LiBUaGlzIGlzXG4gKiBhIHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYWxnb3JpdGhtLlxuICpcbiAqIFZhbHVlcyBhcmUgY29tcGFyZWQgd2l0aCBgPT09YCwgc28gb2JqZWN0cyBhbmQgbm9uLXByaW1pdGl2ZSBvYmplY3RzXG4gKiBhcmUgbm90IGhhbmRsZWQgaW4gYW55IHNwZWNpYWwgd2F5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGlucHV0IGFuIGFycmF5IG9mIHByaW1pdGl2ZSB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBjb3VudCBvZiB1bmlxdWUgdmFsdWVzXG4gKiBAZXhhbXBsZVxuICogdW5pcXVlQ291bnRTb3J0ZWQoWzEsIDIsIDNdKTsgLy8gPT4gM1xuICogdW5pcXVlQ291bnRTb3J0ZWQoWzEsIDEsIDFdKTsgLy8gPT4gMVxuICovXG5mdW5jdGlvbiB1bmlxdWVDb3VudFNvcnRlZChpbnB1dC8qOiBBcnJheTxhbnk+Ki8pLyo6IG51bWJlciAqLyB7XG4gICAgdmFyIHVuaXF1ZVZhbHVlQ291bnQgPSAwLFxuICAgICAgICBsYXN0U2VlblZhbHVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGkgPT09IDAgfHwgaW5wdXRbaV0gIT09IGxhc3RTZWVuVmFsdWUpIHtcbiAgICAgICAgICAgIGxhc3RTZWVuVmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgICAgICAgIHVuaXF1ZVZhbHVlQ291bnQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5pcXVlVmFsdWVDb3VudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxdWVDb3VudFNvcnRlZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvdW5pcXVlX2NvdW50X3NvcnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar sumNthPowerDeviations = __webpack_require__(6);\n\n/**\n * The [variance](http://en.wikipedia.org/wiki/Variance)\n * is the sum of squared deviations from the mean.\n *\n * This is an implementation of variance, not sample variance:\n * see the `sampleVariance` method if you want a sample measure.\n *\n * @param {Array<number>} x a population\n * @returns {number} variance: a value greater than or equal to zero.\n * zero indicates that all values are identical.\n * @example\n * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665\n */\nfunction variance(x/*: Array<number> */)/*:number*/ {\n    // The variance of no numbers is null\n    if (x.length === 0) { return NaN; }\n\n    // Find the mean of squared deviations between the\n    // mean value and each value.\n    return sumNthPowerDeviations(x, 2) / x.length;\n}\n\nmodule.exports = variance;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy92YXJpYW5jZS5qcz8xZDRjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBzdW1OdGhQb3dlckRldmlhdGlvbnMgPSByZXF1aXJlKCcuL3N1bV9udGhfcG93ZXJfZGV2aWF0aW9ucycpO1xuXG4vKipcbiAqIFRoZSBbdmFyaWFuY2VdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFyaWFuY2UpXG4gKiBpcyB0aGUgc3VtIG9mIHNxdWFyZWQgZGV2aWF0aW9ucyBmcm9tIHRoZSBtZWFuLlxuICpcbiAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdmFyaWFuY2UsIG5vdCBzYW1wbGUgdmFyaWFuY2U6XG4gKiBzZWUgdGhlIGBzYW1wbGVWYXJpYW5jZWAgbWV0aG9kIGlmIHlvdSB3YW50IGEgc2FtcGxlIG1lYXN1cmUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGEgcG9wdWxhdGlvblxuICogQHJldHVybnMge251bWJlcn0gdmFyaWFuY2U6IGEgdmFsdWUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8uXG4gKiB6ZXJvIGluZGljYXRlcyB0aGF0IGFsbCB2YWx1ZXMgYXJlIGlkZW50aWNhbC5cbiAqIEBleGFtcGxlXG4gKiB2YXJpYW5jZShbMSwgMiwgMywgNCwgNSwgNl0pOyAvLyA9PiAyLjkxNjY2NjY2NjY2NjY2NjVcbiAqL1xuZnVuY3Rpb24gdmFyaWFuY2UoeC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcbiAgICAvLyBUaGUgdmFyaWFuY2Ugb2Ygbm8gbnVtYmVycyBpcyBudWxsXG4gICAgaWYgKHgubGVuZ3RoID09PSAwKSB7IHJldHVybiBOYU47IH1cblxuICAgIC8vIEZpbmQgdGhlIG1lYW4gb2Ygc3F1YXJlZCBkZXZpYXRpb25zIGJldHdlZW4gdGhlXG4gICAgLy8gbWVhbiB2YWx1ZSBhbmQgZWFjaCB2YWx1ZS5cbiAgICByZXR1cm4gc3VtTnRoUG93ZXJEZXZpYXRpb25zKHgsIDIpIC8geC5sZW5ndGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFyaWFuY2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3ZhcmlhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},,,,,,,,,,function(module,exports,__webpack_require__){"use strict";eval("/* @flow */\n\n\n// # simple-statistics\n//\n// A simple, literate statistics system.\n\nvar ss = module.exports = {};\n\n// Linear Regression\nss.linearRegression = __webpack_require__(101);\nss.linearRegressionLine = __webpack_require__(102);\nss.standardDeviation = __webpack_require__(38);\nss.rSquared = __webpack_require__(116);\nss.mode = __webpack_require__(108);\nss.modeFast = __webpack_require__(109);\nss.modeSorted = __webpack_require__(33);\nss.min = __webpack_require__(32);\nss.max = __webpack_require__(30);\nss.minSorted = __webpack_require__(106);\nss.maxSorted = __webpack_require__(103);\nss.sum = __webpack_require__(40);\nss.sumSimple = __webpack_require__(123);\nss.product = __webpack_require__(114);\nss.quantile = __webpack_require__(11);\nss.quantileSorted = __webpack_require__(12);\nss.iqr = ss.interquartileRange = __webpack_require__(100);\nss.medianAbsoluteDeviation = ss.mad = __webpack_require__(104);\nss.chunk = __webpack_require__(91);\nss.sampleWithReplacement = __webpack_require__(121);\nss.shuffle = __webpack_require__(36);\nss.shuffleInPlace = __webpack_require__(37);\nss.sample = __webpack_require__(118);\nss.ckmeans = __webpack_require__(92);\nss.uniqueCountSorted = __webpack_require__(41);\nss.sumNthPowerDeviations = __webpack_require__(6);\nss.equalIntervalBreaks = __webpack_require__(96);\n\n// sample statistics\nss.sampleCovariance = __webpack_require__(35);\nss.sampleCorrelation = __webpack_require__(119);\nss.sampleVariance = __webpack_require__(14);\nss.sampleStandardDeviation = __webpack_require__(13);\nss.sampleSkewness = __webpack_require__(120);\n\n// combinatorics\nss.permutationsHeap = __webpack_require__(111);\nss.combinations = __webpack_require__(93);\nss.combinationsReplacement = __webpack_require__(94);\n\n// measures of centrality\nss.addToMean = __webpack_require__(85);\nss.geometricMean = __webpack_require__(98);\nss.harmonicMean = __webpack_require__(99);\nss.mean = ss.average = __webpack_require__(2);\nss.median = __webpack_require__(31);\nss.medianSorted = __webpack_require__(105);\n\nss.rootMeanSquare = ss.rms = __webpack_require__(117);\nss.variance = __webpack_require__(42);\nss.tTest = __webpack_require__(124);\nss.tTestTwoSample = __webpack_require__(125);\n// ss.ckmeans = require('./src/ckmeans');\n\n// Classifiers\nss.bayesian = __webpack_require__(86);\nss.perceptron = __webpack_require__(110);\n\n// Distribution-related methods\nss.epsilon = __webpack_require__(5); // We make Îµ available to the test suite.\nss.factorial = __webpack_require__(10);\nss.bernoulliDistribution = __webpack_require__(87);\nss.binomialDistribution = __webpack_require__(28);\nss.poissonDistribution = __webpack_require__(112);\nss.chiSquaredGoodnessOfFit = __webpack_require__(90);\n\n// Normal distribution\nss.zScore = __webpack_require__(126);\nss.cumulativeStdNormalProbability = __webpack_require__(95);\nss.standardNormalTable = __webpack_require__(39);\nss.errorFunction = ss.erf = __webpack_require__(97);\nss.inverseErrorFunction = __webpack_require__(29);\nss.probit = __webpack_require__(113);\nss.mixin = __webpack_require__(107);\n\n// Root-finding methods\nss.bisect = __webpack_require__(88);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL2luZGV4LmpzPzM1ODkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gIyBzaW1wbGUtc3RhdGlzdGljc1xuLy9cbi8vIEEgc2ltcGxlLCBsaXRlcmF0ZSBzdGF0aXN0aWNzIHN5c3RlbS5cblxudmFyIHNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gTGluZWFyIFJlZ3Jlc3Npb25cbnNzLmxpbmVhclJlZ3Jlc3Npb24gPSByZXF1aXJlKCcuL3NyYy9saW5lYXJfcmVncmVzc2lvbicpO1xuc3MubGluZWFyUmVncmVzc2lvbkxpbmUgPSByZXF1aXJlKCcuL3NyYy9saW5lYXJfcmVncmVzc2lvbl9saW5lJyk7XG5zcy5zdGFuZGFyZERldmlhdGlvbiA9IHJlcXVpcmUoJy4vc3JjL3N0YW5kYXJkX2RldmlhdGlvbicpO1xuc3MuclNxdWFyZWQgPSByZXF1aXJlKCcuL3NyYy9yX3NxdWFyZWQnKTtcbnNzLm1vZGUgPSByZXF1aXJlKCcuL3NyYy9tb2RlJyk7XG5zcy5tb2RlRmFzdCA9IHJlcXVpcmUoJy4vc3JjL21vZGVfZmFzdCcpO1xuc3MubW9kZVNvcnRlZCA9IHJlcXVpcmUoJy4vc3JjL21vZGVfc29ydGVkJyk7XG5zcy5taW4gPSByZXF1aXJlKCcuL3NyYy9taW4nKTtcbnNzLm1heCA9IHJlcXVpcmUoJy4vc3JjL21heCcpO1xuc3MubWluU29ydGVkID0gcmVxdWlyZSgnLi9zcmMvbWluX3NvcnRlZCcpO1xuc3MubWF4U29ydGVkID0gcmVxdWlyZSgnLi9zcmMvbWF4X3NvcnRlZCcpO1xuc3Muc3VtID0gcmVxdWlyZSgnLi9zcmMvc3VtJyk7XG5zcy5zdW1TaW1wbGUgPSByZXF1aXJlKCcuL3NyYy9zdW1fc2ltcGxlJyk7XG5zcy5wcm9kdWN0ID0gcmVxdWlyZSgnLi9zcmMvcHJvZHVjdCcpO1xuc3MucXVhbnRpbGUgPSByZXF1aXJlKCcuL3NyYy9xdWFudGlsZScpO1xuc3MucXVhbnRpbGVTb3J0ZWQgPSByZXF1aXJlKCcuL3NyYy9xdWFudGlsZV9zb3J0ZWQnKTtcbnNzLmlxciA9IHNzLmludGVycXVhcnRpbGVSYW5nZSA9IHJlcXVpcmUoJy4vc3JjL2ludGVycXVhcnRpbGVfcmFuZ2UnKTtcbnNzLm1lZGlhbkFic29sdXRlRGV2aWF0aW9uID0gc3MubWFkID0gcmVxdWlyZSgnLi9zcmMvbWVkaWFuX2Fic29sdXRlX2RldmlhdGlvbicpO1xuc3MuY2h1bmsgPSByZXF1aXJlKCcuL3NyYy9jaHVuaycpO1xuc3Muc2FtcGxlV2l0aFJlcGxhY2VtZW50ID0gcmVxdWlyZSgnLi9zcmMvc2FtcGxlX3dpdGhfcmVwbGFjZW1lbnQnKTtcbnNzLnNodWZmbGUgPSByZXF1aXJlKCcuL3NyYy9zaHVmZmxlJyk7XG5zcy5zaHVmZmxlSW5QbGFjZSA9IHJlcXVpcmUoJy4vc3JjL3NodWZmbGVfaW5fcGxhY2UnKTtcbnNzLnNhbXBsZSA9IHJlcXVpcmUoJy4vc3JjL3NhbXBsZScpO1xuc3MuY2ttZWFucyA9IHJlcXVpcmUoJy4vc3JjL2NrbWVhbnMnKTtcbnNzLnVuaXF1ZUNvdW50U29ydGVkID0gcmVxdWlyZSgnLi9zcmMvdW5pcXVlX2NvdW50X3NvcnRlZCcpO1xuc3Muc3VtTnRoUG93ZXJEZXZpYXRpb25zID0gcmVxdWlyZSgnLi9zcmMvc3VtX250aF9wb3dlcl9kZXZpYXRpb25zJyk7XG5zcy5lcXVhbEludGVydmFsQnJlYWtzID0gcmVxdWlyZSgnLi9zcmMvZXF1YWxfaW50ZXJ2YWxfYnJlYWtzJyk7XG5cbi8vIHNhbXBsZSBzdGF0aXN0aWNzXG5zcy5zYW1wbGVDb3ZhcmlhbmNlID0gcmVxdWlyZSgnLi9zcmMvc2FtcGxlX2NvdmFyaWFuY2UnKTtcbnNzLnNhbXBsZUNvcnJlbGF0aW9uID0gcmVxdWlyZSgnLi9zcmMvc2FtcGxlX2NvcnJlbGF0aW9uJyk7XG5zcy5zYW1wbGVWYXJpYW5jZSA9IHJlcXVpcmUoJy4vc3JjL3NhbXBsZV92YXJpYW5jZScpO1xuc3Muc2FtcGxlU3RhbmRhcmREZXZpYXRpb24gPSByZXF1aXJlKCcuL3NyYy9zYW1wbGVfc3RhbmRhcmRfZGV2aWF0aW9uJyk7XG5zcy5zYW1wbGVTa2V3bmVzcyA9IHJlcXVpcmUoJy4vc3JjL3NhbXBsZV9za2V3bmVzcycpO1xuXG4vLyBjb21iaW5hdG9yaWNzXG5zcy5wZXJtdXRhdGlvbnNIZWFwID0gcmVxdWlyZSgnLi9zcmMvcGVybXV0YXRpb25zX2hlYXAnKTtcbnNzLmNvbWJpbmF0aW9ucyA9IHJlcXVpcmUoJy4vc3JjL2NvbWJpbmF0aW9ucycpO1xuc3MuY29tYmluYXRpb25zUmVwbGFjZW1lbnQgPSByZXF1aXJlKCcuL3NyYy9jb21iaW5hdGlvbnNfcmVwbGFjZW1lbnQnKTtcblxuLy8gbWVhc3VyZXMgb2YgY2VudHJhbGl0eVxuc3MuYWRkVG9NZWFuID0gcmVxdWlyZSgnLi9zcmMvYWRkX3RvX21lYW4nKTtcbnNzLmdlb21ldHJpY01lYW4gPSByZXF1aXJlKCcuL3NyYy9nZW9tZXRyaWNfbWVhbicpO1xuc3MuaGFybW9uaWNNZWFuID0gcmVxdWlyZSgnLi9zcmMvaGFybW9uaWNfbWVhbicpO1xuc3MubWVhbiA9IHNzLmF2ZXJhZ2UgPSByZXF1aXJlKCcuL3NyYy9tZWFuJyk7XG5zcy5tZWRpYW4gPSByZXF1aXJlKCcuL3NyYy9tZWRpYW4nKTtcbnNzLm1lZGlhblNvcnRlZCA9IHJlcXVpcmUoJy4vc3JjL21lZGlhbl9zb3J0ZWQnKTtcblxuc3Mucm9vdE1lYW5TcXVhcmUgPSBzcy5ybXMgPSByZXF1aXJlKCcuL3NyYy9yb290X21lYW5fc3F1YXJlJyk7XG5zcy52YXJpYW5jZSA9IHJlcXVpcmUoJy4vc3JjL3ZhcmlhbmNlJyk7XG5zcy50VGVzdCA9IHJlcXVpcmUoJy4vc3JjL3RfdGVzdCcpO1xuc3MudFRlc3RUd29TYW1wbGUgPSByZXF1aXJlKCcuL3NyYy90X3Rlc3RfdHdvX3NhbXBsZScpO1xuLy8gc3MuY2ttZWFucyA9IHJlcXVpcmUoJy4vc3JjL2NrbWVhbnMnKTtcblxuLy8gQ2xhc3NpZmllcnNcbnNzLmJheWVzaWFuID0gcmVxdWlyZSgnLi9zcmMvYmF5ZXNpYW5fY2xhc3NpZmllcicpO1xuc3MucGVyY2VwdHJvbiA9IHJlcXVpcmUoJy4vc3JjL3BlcmNlcHRyb24nKTtcblxuLy8gRGlzdHJpYnV0aW9uLXJlbGF0ZWQgbWV0aG9kc1xuc3MuZXBzaWxvbiA9IHJlcXVpcmUoJy4vc3JjL2Vwc2lsb24nKTsgLy8gV2UgbWFrZSDOtSBhdmFpbGFibGUgdG8gdGhlIHRlc3Qgc3VpdGUuXG5zcy5mYWN0b3JpYWwgPSByZXF1aXJlKCcuL3NyYy9mYWN0b3JpYWwnKTtcbnNzLmJlcm5vdWxsaURpc3RyaWJ1dGlvbiA9IHJlcXVpcmUoJy4vc3JjL2Jlcm5vdWxsaV9kaXN0cmlidXRpb24nKTtcbnNzLmJpbm9taWFsRGlzdHJpYnV0aW9uID0gcmVxdWlyZSgnLi9zcmMvYmlub21pYWxfZGlzdHJpYnV0aW9uJyk7XG5zcy5wb2lzc29uRGlzdHJpYnV0aW9uID0gcmVxdWlyZSgnLi9zcmMvcG9pc3Nvbl9kaXN0cmlidXRpb24nKTtcbnNzLmNoaVNxdWFyZWRHb29kbmVzc09mRml0ID0gcmVxdWlyZSgnLi9zcmMvY2hpX3NxdWFyZWRfZ29vZG5lc3Nfb2ZfZml0Jyk7XG5cbi8vIE5vcm1hbCBkaXN0cmlidXRpb25cbnNzLnpTY29yZSA9IHJlcXVpcmUoJy4vc3JjL3pfc2NvcmUnKTtcbnNzLmN1bXVsYXRpdmVTdGROb3JtYWxQcm9iYWJpbGl0eSA9IHJlcXVpcmUoJy4vc3JjL2N1bXVsYXRpdmVfc3RkX25vcm1hbF9wcm9iYWJpbGl0eScpO1xuc3Muc3RhbmRhcmROb3JtYWxUYWJsZSA9IHJlcXVpcmUoJy4vc3JjL3N0YW5kYXJkX25vcm1hbF90YWJsZScpO1xuc3MuZXJyb3JGdW5jdGlvbiA9IHNzLmVyZiA9IHJlcXVpcmUoJy4vc3JjL2Vycm9yX2Z1bmN0aW9uJyk7XG5zcy5pbnZlcnNlRXJyb3JGdW5jdGlvbiA9IHJlcXVpcmUoJy4vc3JjL2ludmVyc2VfZXJyb3JfZnVuY3Rpb24nKTtcbnNzLnByb2JpdCA9IHJlcXVpcmUoJy4vc3JjL3Byb2JpdCcpO1xuc3MubWl4aW4gPSByZXF1aXJlKCcuL3NyYy9taXhpbicpO1xuXG4vLyBSb290LWZpbmRpbmcgbWV0aG9kc1xuc3MuYmlzZWN0ID0gcmVxdWlyZSgnLi9zcmMvYmlzZWN0Jyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * When adding a new value to a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the new\n * value to add.\n *\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} newValue the added value\n * @returns {number} the new mean\n *\n * @example\n * addToMean(14, 5, 53); // => 20.5\n */\nfunction addToMean(mean /*: number*/, n/*: number */, newValue/*: number */)/*: number */ {\n    return mean + ((newValue - mean) / (n + 1));\n}\n\nmodule.exports = addToMean;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9hZGRfdG9fbWVhbi5qcz80MzVhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogV2hlbiBhZGRpbmcgYSBuZXcgdmFsdWUgdG8gYSBsaXN0LCBvbmUgZG9lcyBub3QgaGF2ZSB0byBuZWNlc3NhcnlcbiAqIHJlY29tcHV0ZSB0aGUgbWVhbiBvZiB0aGUgbGlzdCBpbiBsaW5lYXIgdGltZS4gVGhleSBjYW4gaW5zdGVhZCB1c2VcbiAqIHRoaXMgZnVuY3Rpb24gdG8gY29tcHV0ZSB0aGUgbmV3IG1lYW4gYnkgcHJvdmlkaW5nIHRoZSBjdXJyZW50IG1lYW4sXG4gKiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBsaXN0IHRoYXQgcHJvZHVjZWQgaXQgYW5kIHRoZSBuZXdcbiAqIHZhbHVlIHRvIGFkZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbWVhbiBjdXJyZW50IG1lYW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuIG51bWJlciBvZiBpdGVtcyBpbiB0aGUgbGlzdFxuICogQHBhcmFtIHtudW1iZXJ9IG5ld1ZhbHVlIHRoZSBhZGRlZCB2YWx1ZVxuICogQHJldHVybnMge251bWJlcn0gdGhlIG5ldyBtZWFuXG4gKlxuICogQGV4YW1wbGVcbiAqIGFkZFRvTWVhbigxNCwgNSwgNTMpOyAvLyA9PiAyMC41XG4gKi9cbmZ1bmN0aW9uIGFkZFRvTWVhbihtZWFuIC8qOiBudW1iZXIqLywgbi8qOiBudW1iZXIgKi8sIG5ld1ZhbHVlLyo6IG51bWJlciAqLykvKjogbnVtYmVyICovIHtcbiAgICByZXR1cm4gbWVhbiArICgobmV3VmFsdWUgLSBtZWFuKSAvIChuICsgMSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZFRvTWVhbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvYWRkX3RvX21lYW4uanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n *\n * This is a naÃ¯ve bayesian classifier that takes\n * singly-nested objects.\n *\n * @class\n * @example\n * var bayes = new BayesianClassifier();\n * bayes.train({\n *   species: 'Cat'\n * }, 'animal');\n * var result = bayes.score({\n *   species: 'Cat'\n * })\n * // result\n * // {\n * //   animal: 1\n * // }\n */\nfunction BayesianClassifier() {\n    // The number of items that are currently\n    // classified in the model\n    this.totalCount = 0;\n    // Every item classified in the model\n    this.data = {};\n}\n\n/**\n * Train the classifier with a new item, which has a single\n * dimension of Javascript literal keys and values.\n *\n * @param {Object} item an object with singly-deep properties\n * @param {string} category the category this item belongs to\n * @return {undefined} adds the item to the classifier\n */\nBayesianClassifier.prototype.train = function(item, category) {\n    // If the data object doesn't have any values\n    // for this category, create a new object for it.\n    if (!this.data[category]) {\n        this.data[category] = {};\n    }\n\n    // Iterate through each key in the item.\n    for (var k in item) {\n        var v = item[k];\n        // Initialize the nested object `data[category][k][item[k]]`\n        // with an object of keys that equal 0.\n        if (this.data[category][k] === undefined) {\n            this.data[category][k] = {};\n        }\n        if (this.data[category][k][v] === undefined) {\n            this.data[category][k][v] = 0;\n        }\n\n        // And increment the key for this key/value combination.\n        this.data[category][k][v]++;\n    }\n\n    // Increment the number of items classified\n    this.totalCount++;\n};\n\n/**\n * Generate a score of how well this item matches all\n * possible categories based on its attributes\n *\n * @param {Object} item an item in the same format as with train\n * @returns {Object} of probabilities that this item belongs to a\n * given category.\n */\nBayesianClassifier.prototype.score = function(item) {\n    // Initialize an empty array of odds per category.\n    var odds = {}, category;\n    // Iterate through each key in the item,\n    // then iterate through each category that has been used\n    // in previous calls to `.train()`\n    for (var k in item) {\n        var v = item[k];\n        for (category in this.data) {\n            // Create an empty object for storing key - value combinations\n            // for this category.\n            odds[category] = {};\n\n            // If this item doesn't even have a property, it counts for nothing,\n            // but if it does have the property that we're looking for from\n            // the item to categorize, it counts based on how popular it is\n            // versus the whole population.\n            if (this.data[category][k]) {\n                odds[category][k + '_' + v] = (this.data[category][k][v] || 0) / this.totalCount;\n            } else {\n                odds[category][k + '_' + v] = 0;\n            }\n        }\n    }\n\n    // Set up a new object that will contain sums of these odds by category\n    var oddsSums = {};\n\n    for (category in odds) {\n        // Tally all of the odds for each category-combination pair -\n        // the non-existence of a category does not add anything to the\n        // score.\n        oddsSums[category] = 0;\n        for (var combination in odds[category]) {\n            oddsSums[category] += odds[category][combination];\n        }\n    }\n\n    return oddsSums;\n};\n\nmodule.exports = BayesianClassifier;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9iYXllc2lhbl9jbGFzc2lmaWVyLmpzPzYyZjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBbQmF5ZXNpYW4gQ2xhc3NpZmllcl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9OYWl2ZV9CYXllc19jbGFzc2lmaWVyKVxuICpcbiAqIFRoaXMgaXMgYSBuYcOvdmUgYmF5ZXNpYW4gY2xhc3NpZmllciB0aGF0IHRha2VzXG4gKiBzaW5nbHktbmVzdGVkIG9iamVjdHMuXG4gKlxuICogQGNsYXNzXG4gKiBAZXhhbXBsZVxuICogdmFyIGJheWVzID0gbmV3IEJheWVzaWFuQ2xhc3NpZmllcigpO1xuICogYmF5ZXMudHJhaW4oe1xuICogICBzcGVjaWVzOiAnQ2F0J1xuICogfSwgJ2FuaW1hbCcpO1xuICogdmFyIHJlc3VsdCA9IGJheWVzLnNjb3JlKHtcbiAqICAgc3BlY2llczogJ0NhdCdcbiAqIH0pXG4gKiAvLyByZXN1bHRcbiAqIC8vIHtcbiAqIC8vICAgYW5pbWFsOiAxXG4gKiAvLyB9XG4gKi9cbmZ1bmN0aW9uIEJheWVzaWFuQ2xhc3NpZmllcigpIHtcbiAgICAvLyBUaGUgbnVtYmVyIG9mIGl0ZW1zIHRoYXQgYXJlIGN1cnJlbnRseVxuICAgIC8vIGNsYXNzaWZpZWQgaW4gdGhlIG1vZGVsXG4gICAgdGhpcy50b3RhbENvdW50ID0gMDtcbiAgICAvLyBFdmVyeSBpdGVtIGNsYXNzaWZpZWQgaW4gdGhlIG1vZGVsXG4gICAgdGhpcy5kYXRhID0ge307XG59XG5cbi8qKlxuICogVHJhaW4gdGhlIGNsYXNzaWZpZXIgd2l0aCBhIG5ldyBpdGVtLCB3aGljaCBoYXMgYSBzaW5nbGVcbiAqIGRpbWVuc2lvbiBvZiBKYXZhc2NyaXB0IGxpdGVyYWwga2V5cyBhbmQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIGFuIG9iamVjdCB3aXRoIHNpbmdseS1kZWVwIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjYXRlZ29yeSB0aGUgY2F0ZWdvcnkgdGhpcyBpdGVtIGJlbG9uZ3MgdG9cbiAqIEByZXR1cm4ge3VuZGVmaW5lZH0gYWRkcyB0aGUgaXRlbSB0byB0aGUgY2xhc3NpZmllclxuICovXG5CYXllc2lhbkNsYXNzaWZpZXIucHJvdG90eXBlLnRyYWluID0gZnVuY3Rpb24oaXRlbSwgY2F0ZWdvcnkpIHtcbiAgICAvLyBJZiB0aGUgZGF0YSBvYmplY3QgZG9lc24ndCBoYXZlIGFueSB2YWx1ZXNcbiAgICAvLyBmb3IgdGhpcyBjYXRlZ29yeSwgY3JlYXRlIGEgbmV3IG9iamVjdCBmb3IgaXQuXG4gICAgaWYgKCF0aGlzLmRhdGFbY2F0ZWdvcnldKSB7XG4gICAgICAgIHRoaXMuZGF0YVtjYXRlZ29yeV0gPSB7fTtcbiAgICB9XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBrZXkgaW4gdGhlIGl0ZW0uXG4gICAgZm9yICh2YXIgayBpbiBpdGVtKSB7XG4gICAgICAgIHZhciB2ID0gaXRlbVtrXTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgbmVzdGVkIG9iamVjdCBgZGF0YVtjYXRlZ29yeV1ba11baXRlbVtrXV1gXG4gICAgICAgIC8vIHdpdGggYW4gb2JqZWN0IG9mIGtleXMgdGhhdCBlcXVhbCAwLlxuICAgICAgICBpZiAodGhpcy5kYXRhW2NhdGVnb3J5XVtrXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbY2F0ZWdvcnldW2tdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YVtjYXRlZ29yeV1ba11bdl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhW2NhdGVnb3J5XVtrXVt2XSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbmQgaW5jcmVtZW50IHRoZSBrZXkgZm9yIHRoaXMga2V5L3ZhbHVlIGNvbWJpbmF0aW9uLlxuICAgICAgICB0aGlzLmRhdGFbY2F0ZWdvcnldW2tdW3ZdKys7XG4gICAgfVxuXG4gICAgLy8gSW5jcmVtZW50IHRoZSBudW1iZXIgb2YgaXRlbXMgY2xhc3NpZmllZFxuICAgIHRoaXMudG90YWxDb3VudCsrO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHNjb3JlIG9mIGhvdyB3ZWxsIHRoaXMgaXRlbSBtYXRjaGVzIGFsbFxuICogcG9zc2libGUgY2F0ZWdvcmllcyBiYXNlZCBvbiBpdHMgYXR0cmlidXRlc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIGFuIGl0ZW0gaW4gdGhlIHNhbWUgZm9ybWF0IGFzIHdpdGggdHJhaW5cbiAqIEByZXR1cm5zIHtPYmplY3R9IG9mIHByb2JhYmlsaXRpZXMgdGhhdCB0aGlzIGl0ZW0gYmVsb25ncyB0byBhXG4gKiBnaXZlbiBjYXRlZ29yeS5cbiAqL1xuQmF5ZXNpYW5DbGFzc2lmaWVyLnByb3RvdHlwZS5zY29yZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAvLyBJbml0aWFsaXplIGFuIGVtcHR5IGFycmF5IG9mIG9kZHMgcGVyIGNhdGVnb3J5LlxuICAgIHZhciBvZGRzID0ge30sIGNhdGVnb3J5O1xuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGtleSBpbiB0aGUgaXRlbSxcbiAgICAvLyB0aGVuIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIGNhdGVnb3J5IHRoYXQgaGFzIGJlZW4gdXNlZFxuICAgIC8vIGluIHByZXZpb3VzIGNhbGxzIHRvIGAudHJhaW4oKWBcbiAgICBmb3IgKHZhciBrIGluIGl0ZW0pIHtcbiAgICAgICAgdmFyIHYgPSBpdGVtW2tdO1xuICAgICAgICBmb3IgKGNhdGVnb3J5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGFuIGVtcHR5IG9iamVjdCBmb3Igc3RvcmluZyBrZXkgLSB2YWx1ZSBjb21iaW5hdGlvbnNcbiAgICAgICAgICAgIC8vIGZvciB0aGlzIGNhdGVnb3J5LlxuICAgICAgICAgICAgb2Rkc1tjYXRlZ29yeV0gPSB7fTtcblxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpdGVtIGRvZXNuJ3QgZXZlbiBoYXZlIGEgcHJvcGVydHksIGl0IGNvdW50cyBmb3Igbm90aGluZyxcbiAgICAgICAgICAgIC8vIGJ1dCBpZiBpdCBkb2VzIGhhdmUgdGhlIHByb3BlcnR5IHRoYXQgd2UncmUgbG9va2luZyBmb3IgZnJvbVxuICAgICAgICAgICAgLy8gdGhlIGl0ZW0gdG8gY2F0ZWdvcml6ZSwgaXQgY291bnRzIGJhc2VkIG9uIGhvdyBwb3B1bGFyIGl0IGlzXG4gICAgICAgICAgICAvLyB2ZXJzdXMgdGhlIHdob2xlIHBvcHVsYXRpb24uXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhW2NhdGVnb3J5XVtrXSkge1xuICAgICAgICAgICAgICAgIG9kZHNbY2F0ZWdvcnldW2sgKyAnXycgKyB2XSA9ICh0aGlzLmRhdGFbY2F0ZWdvcnldW2tdW3ZdIHx8IDApIC8gdGhpcy50b3RhbENvdW50O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvZGRzW2NhdGVnb3J5XVtrICsgJ18nICsgdl0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IHVwIGEgbmV3IG9iamVjdCB0aGF0IHdpbGwgY29udGFpbiBzdW1zIG9mIHRoZXNlIG9kZHMgYnkgY2F0ZWdvcnlcbiAgICB2YXIgb2Rkc1N1bXMgPSB7fTtcblxuICAgIGZvciAoY2F0ZWdvcnkgaW4gb2Rkcykge1xuICAgICAgICAvLyBUYWxseSBhbGwgb2YgdGhlIG9kZHMgZm9yIGVhY2ggY2F0ZWdvcnktY29tYmluYXRpb24gcGFpciAtXG4gICAgICAgIC8vIHRoZSBub24tZXhpc3RlbmNlIG9mIGEgY2F0ZWdvcnkgZG9lcyBub3QgYWRkIGFueXRoaW5nIHRvIHRoZVxuICAgICAgICAvLyBzY29yZS5cbiAgICAgICAgb2Rkc1N1bXNbY2F0ZWdvcnldID0gMDtcbiAgICAgICAgZm9yICh2YXIgY29tYmluYXRpb24gaW4gb2Rkc1tjYXRlZ29yeV0pIHtcbiAgICAgICAgICAgIG9kZHNTdW1zW2NhdGVnb3J5XSArPSBvZGRzW2NhdGVnb3J5XVtjb21iaW5hdGlvbl07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2Rkc1N1bXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJheWVzaWFuQ2xhc3NpZmllcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvYmF5ZXNpYW5fY2xhc3NpZmllci5qc1xuLy8gbW9kdWxlIGlkID0gODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval('\n/* @flow */\n\nvar binomialDistribution = __webpack_require__(28);\n\n/**\n * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n * is the probability discrete\n * distribution of a random variable which takes value 1 with success\n * probability `p` and value 0 with failure\n * probability `q` = 1 - `p`. It can be used, for example, to represent the\n * toss of a coin, where "1" is defined to mean "heads" and "0" is defined\n * to mean "tails" (or vice versa). It is\n * a special case of a Binomial Distribution\n * where `n` = 1.\n *\n * @param {number} p input value, between 0 and 1 inclusive\n * @returns {number} value of bernoulli distribution at this point\n * @example\n * bernoulliDistribution(0.5); // => { \'0\': 0.5, \'1\': 0.5 }\n */\nfunction bernoulliDistribution(p/*: number */) {\n    // Check that `p` is a valid probability (0 â¤ p â¤ 1)\n    if (p < 0 || p > 1 ) { return NaN; }\n\n    return binomialDistribution(1, p);\n}\n\nmodule.exports = bernoulliDistribution;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9iZXJub3VsbGlfZGlzdHJpYnV0aW9uLmpzPzhmNTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIGJpbm9taWFsRGlzdHJpYnV0aW9uID0gcmVxdWlyZSgnLi9iaW5vbWlhbF9kaXN0cmlidXRpb24nKTtcblxuLyoqXG4gKiBUaGUgW0Jlcm5vdWxsaSBkaXN0cmlidXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmVybm91bGxpX2Rpc3RyaWJ1dGlvbilcbiAqIGlzIHRoZSBwcm9iYWJpbGl0eSBkaXNjcmV0ZVxuICogZGlzdHJpYnV0aW9uIG9mIGEgcmFuZG9tIHZhcmlhYmxlIHdoaWNoIHRha2VzIHZhbHVlIDEgd2l0aCBzdWNjZXNzXG4gKiBwcm9iYWJpbGl0eSBgcGAgYW5kIHZhbHVlIDAgd2l0aCBmYWlsdXJlXG4gKiBwcm9iYWJpbGl0eSBgcWAgPSAxIC0gYHBgLiBJdCBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIHRvIHJlcHJlc2VudCB0aGVcbiAqIHRvc3Mgb2YgYSBjb2luLCB3aGVyZSBcIjFcIiBpcyBkZWZpbmVkIHRvIG1lYW4gXCJoZWFkc1wiIGFuZCBcIjBcIiBpcyBkZWZpbmVkXG4gKiB0byBtZWFuIFwidGFpbHNcIiAob3IgdmljZSB2ZXJzYSkuIEl0IGlzXG4gKiBhIHNwZWNpYWwgY2FzZSBvZiBhIEJpbm9taWFsIERpc3RyaWJ1dGlvblxuICogd2hlcmUgYG5gID0gMS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcCBpbnB1dCB2YWx1ZSwgYmV0d2VlbiAwIGFuZCAxIGluY2x1c2l2ZVxuICogQHJldHVybnMge251bWJlcn0gdmFsdWUgb2YgYmVybm91bGxpIGRpc3RyaWJ1dGlvbiBhdCB0aGlzIHBvaW50XG4gKiBAZXhhbXBsZVxuICogYmVybm91bGxpRGlzdHJpYnV0aW9uKDAuNSk7IC8vID0+IHsgJzAnOiAwLjUsICcxJzogMC41IH1cbiAqL1xuZnVuY3Rpb24gYmVybm91bGxpRGlzdHJpYnV0aW9uKHAvKjogbnVtYmVyICovKSB7XG4gICAgLy8gQ2hlY2sgdGhhdCBgcGAgaXMgYSB2YWxpZCBwcm9iYWJpbGl0eSAoMCDiiaQgcCDiiaQgMSlcbiAgICBpZiAocCA8IDAgfHwgcCA+IDEgKSB7IHJldHVybiBOYU47IH1cblxuICAgIHJldHVybiBiaW5vbWlhbERpc3RyaWJ1dGlvbigxLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiZXJub3VsbGlEaXN0cmlidXRpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL2Jlcm5vdWxsaV9kaXN0cmlidXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar sign = __webpack_require__(122);\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding \n * method that repeatedly bisects an interval to find the root.\n * \n * This function returns a numerical approximation to the exact value.\n * \n * @param {Function} func input function\n * @param {Number} start - start of interval\n * @param {Number} end - end of interval\n * @param {Number} maxIterations - the maximum number of iterations\n * @param {Number} errorTolerance - the error tolerance\n * @returns {Number} estimated root value\n * @throws {TypeError} Argument func must be a function\n * \n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\nfunction bisect(\n    func/*: (x: any) => number */,\n    start/*: number */,\n    end/*: number */,\n    maxIterations/*: number */,\n    errorTolerance/*: number */)/*:number*/ {\n\n    if (typeof func !== 'function') throw new TypeError('func must be a function');\n    \n    for (var i = 0; i < maxIterations; i++) {\n        var output = (start + end) / 2;\n\n        if (func(output) === 0 || Math.abs((end - start) / 2) < errorTolerance) {\n            return output;\n        }\n\n        if (sign(func(output)) === sign(func(start))) {\n            start = output;\n        } else {\n            end = output;\n        }\n    }\n    \n    throw new Error('maximum number of iterations exceeded');\n}\n\nmodule.exports = bisect;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9iaXNlY3QuanM/MjU0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vc2lnbicpO1xuLyoqXG4gKiBbQmlzZWN0aW9uIG1ldGhvZF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmlzZWN0aW9uX21ldGhvZCkgaXMgYSByb290LWZpbmRpbmcgXG4gKiBtZXRob2QgdGhhdCByZXBlYXRlZGx5IGJpc2VjdHMgYW4gaW50ZXJ2YWwgdG8gZmluZCB0aGUgcm9vdC5cbiAqIFxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgbnVtZXJpY2FsIGFwcHJveGltYXRpb24gdG8gdGhlIGV4YWN0IHZhbHVlLlxuICogXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIGlucHV0IGZ1bmN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgLSBzdGFydCBvZiBpbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IGVuZCAtIGVuZCBvZiBpbnRlcnZhbFxuICogQHBhcmFtIHtOdW1iZXJ9IG1heEl0ZXJhdGlvbnMgLSB0aGUgbWF4aW11bSBudW1iZXIgb2YgaXRlcmF0aW9uc1xuICogQHBhcmFtIHtOdW1iZXJ9IGVycm9yVG9sZXJhbmNlIC0gdGhlIGVycm9yIHRvbGVyYW5jZVxuICogQHJldHVybnMge051bWJlcn0gZXN0aW1hdGVkIHJvb3QgdmFsdWVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gQXJndW1lbnQgZnVuYyBtdXN0IGJlIGEgZnVuY3Rpb25cbiAqIFxuICogQGV4YW1wbGVcbiAqIGJpc2VjdChNYXRoLmNvcywwLDQsMTAwLDAuMDAzKTsgLy8gPT4gMS41NzIyNjU2MjVcbiAqL1xuZnVuY3Rpb24gYmlzZWN0KFxuICAgIGZ1bmMvKjogKHg6IGFueSkgPT4gbnVtYmVyICovLFxuICAgIHN0YXJ0Lyo6IG51bWJlciAqLyxcbiAgICBlbmQvKjogbnVtYmVyICovLFxuICAgIG1heEl0ZXJhdGlvbnMvKjogbnVtYmVyICovLFxuICAgIGVycm9yVG9sZXJhbmNlLyo6IG51bWJlciAqLykvKjpudW1iZXIqLyB7XG5cbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Z1bmMgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhJdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IChzdGFydCArIGVuZCkgLyAyO1xuXG4gICAgICAgIGlmIChmdW5jKG91dHB1dCkgPT09IDAgfHwgTWF0aC5hYnMoKGVuZCAtIHN0YXJ0KSAvIDIpIDwgZXJyb3JUb2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2lnbihmdW5jKG91dHB1dCkpID09PSBzaWduKGZ1bmMoc3RhcnQpKSkge1xuICAgICAgICAgICAgc3RhcnQgPSBvdXRwdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYXhpbXVtIG51bWJlciBvZiBpdGVyYXRpb25zIGV4Y2VlZGVkJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmlzZWN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9iaXNlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * **Percentage Points of the Ï2 (Chi-Squared) Distribution**\n *\n * The [Ï2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n * deviation of a normal distribution from a sample standard deviation.\n *\n * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n * Engineering and Management Science\", Wiley (1980).\n */\nvar chiSquaredDistributionTable = {\n    '1': {\n        '0.995': 0,\n        '0.99': 0,\n        '0.975': 0,\n        '0.95': 0,\n        '0.9': 0.02,\n        '0.5': 0.45,\n        '0.1': 2.71,\n        '0.05': 3.84,\n        '0.025': 5.02,\n        '0.01': 6.63,\n        '0.005': 7.88\n    },\n    '2': {\n        '0.995': 0.01,\n        '0.99': 0.02,\n        '0.975': 0.05,\n        '0.95': 0.1,\n        '0.9': 0.21,\n        '0.5': 1.39,\n        '0.1': 4.61,\n        '0.05': 5.99,\n        '0.025': 7.38,\n        '0.01': 9.21,\n        '0.005': 10.6\n    },\n    '3': {\n        '0.995': 0.07,\n        '0.99': 0.11,\n        '0.975': 0.22,\n        '0.95': 0.35,\n        '0.9': 0.58,\n        '0.5': 2.37,\n        '0.1': 6.25,\n        '0.05': 7.81,\n        '0.025': 9.35,\n        '0.01': 11.34,\n        '0.005': 12.84\n    },\n    '4': {\n        '0.995': 0.21,\n        '0.99': 0.3,\n        '0.975': 0.48,\n        '0.95': 0.71,\n        '0.9': 1.06,\n        '0.5': 3.36,\n        '0.1': 7.78,\n        '0.05': 9.49,\n        '0.025': 11.14,\n        '0.01': 13.28,\n        '0.005': 14.86\n    },\n    '5': {\n        '0.995': 0.41,\n        '0.99': 0.55,\n        '0.975': 0.83,\n        '0.95': 1.15,\n        '0.9': 1.61,\n        '0.5': 4.35,\n        '0.1': 9.24,\n        '0.05': 11.07,\n        '0.025': 12.83,\n        '0.01': 15.09,\n        '0.005': 16.75\n    },\n    '6': {\n        '0.995': 0.68,\n        '0.99': 0.87,\n        '0.975': 1.24,\n        '0.95': 1.64,\n        '0.9': 2.2,\n        '0.5': 5.35,\n        '0.1': 10.65,\n        '0.05': 12.59,\n        '0.025': 14.45,\n        '0.01': 16.81,\n        '0.005': 18.55\n    },\n    '7': {\n        '0.995': 0.99,\n        '0.99': 1.25,\n        '0.975': 1.69,\n        '0.95': 2.17,\n        '0.9': 2.83,\n        '0.5': 6.35,\n        '0.1': 12.02,\n        '0.05': 14.07,\n        '0.025': 16.01,\n        '0.01': 18.48,\n        '0.005': 20.28\n    },\n    '8': {\n        '0.995': 1.34,\n        '0.99': 1.65,\n        '0.975': 2.18,\n        '0.95': 2.73,\n        '0.9': 3.49,\n        '0.5': 7.34,\n        '0.1': 13.36,\n        '0.05': 15.51,\n        '0.025': 17.53,\n        '0.01': 20.09,\n        '0.005': 21.96\n    },\n    '9': {\n        '0.995': 1.73,\n        '0.99': 2.09,\n        '0.975': 2.7,\n        '0.95': 3.33,\n        '0.9': 4.17,\n        '0.5': 8.34,\n        '0.1': 14.68,\n        '0.05': 16.92,\n        '0.025': 19.02,\n        '0.01': 21.67,\n        '0.005': 23.59\n    },\n    '10': {\n        '0.995': 2.16,\n        '0.99': 2.56,\n        '0.975': 3.25,\n        '0.95': 3.94,\n        '0.9': 4.87,\n        '0.5': 9.34,\n        '0.1': 15.99,\n        '0.05': 18.31,\n        '0.025': 20.48,\n        '0.01': 23.21,\n        '0.005': 25.19\n    },\n    '11': {\n        '0.995': 2.6,\n        '0.99': 3.05,\n        '0.975': 3.82,\n        '0.95': 4.57,\n        '0.9': 5.58,\n        '0.5': 10.34,\n        '0.1': 17.28,\n        '0.05': 19.68,\n        '0.025': 21.92,\n        '0.01': 24.72,\n        '0.005': 26.76\n    },\n    '12': {\n        '0.995': 3.07,\n        '0.99': 3.57,\n        '0.975': 4.4,\n        '0.95': 5.23,\n        '0.9': 6.3,\n        '0.5': 11.34,\n        '0.1': 18.55,\n        '0.05': 21.03,\n        '0.025': 23.34,\n        '0.01': 26.22,\n        '0.005': 28.3\n    },\n    '13': {\n        '0.995': 3.57,\n        '0.99': 4.11,\n        '0.975': 5.01,\n        '0.95': 5.89,\n        '0.9': 7.04,\n        '0.5': 12.34,\n        '0.1': 19.81,\n        '0.05': 22.36,\n        '0.025': 24.74,\n        '0.01': 27.69,\n        '0.005': 29.82\n    },\n    '14': {\n        '0.995': 4.07,\n        '0.99': 4.66,\n        '0.975': 5.63,\n        '0.95': 6.57,\n        '0.9': 7.79,\n        '0.5': 13.34,\n        '0.1': 21.06,\n        '0.05': 23.68,\n        '0.025': 26.12,\n        '0.01': 29.14,\n        '0.005': 31.32\n    },\n    '15': {\n        '0.995': 4.6,\n        '0.99': 5.23,\n        '0.975': 6.27,\n        '0.95': 7.26,\n        '0.9': 8.55,\n        '0.5': 14.34,\n        '0.1': 22.31,\n        '0.05': 25,\n        '0.025': 27.49,\n        '0.01': 30.58,\n        '0.005': 32.8\n    },\n    '16': {\n        '0.995': 5.14,\n        '0.99': 5.81,\n        '0.975': 6.91,\n        '0.95': 7.96,\n        '0.9': 9.31,\n        '0.5': 15.34,\n        '0.1': 23.54,\n        '0.05': 26.3,\n        '0.025': 28.85,\n        '0.01': 32,\n        '0.005': 34.27\n    },\n    '17': {\n        '0.995': 5.7,\n        '0.99': 6.41,\n        '0.975': 7.56,\n        '0.95': 8.67,\n        '0.9': 10.09,\n        '0.5': 16.34,\n        '0.1': 24.77,\n        '0.05': 27.59,\n        '0.025': 30.19,\n        '0.01': 33.41,\n        '0.005': 35.72\n    },\n    '18': {\n        '0.995': 6.26,\n        '0.99': 7.01,\n        '0.975': 8.23,\n        '0.95': 9.39,\n        '0.9': 10.87,\n        '0.5': 17.34,\n        '0.1': 25.99,\n        '0.05': 28.87,\n        '0.025': 31.53,\n        '0.01': 34.81,\n        '0.005': 37.16\n    },\n    '19': {\n        '0.995': 6.84,\n        '0.99': 7.63,\n        '0.975': 8.91,\n        '0.95': 10.12,\n        '0.9': 11.65,\n        '0.5': 18.34,\n        '0.1': 27.2,\n        '0.05': 30.14,\n        '0.025': 32.85,\n        '0.01': 36.19,\n        '0.005': 38.58\n    },\n    '20': {\n        '0.995': 7.43,\n        '0.99': 8.26,\n        '0.975': 9.59,\n        '0.95': 10.85,\n        '0.9': 12.44,\n        '0.5': 19.34,\n        '0.1': 28.41,\n        '0.05': 31.41,\n        '0.025': 34.17,\n        '0.01': 37.57,\n        '0.005': 40\n    },\n    '21': {\n        '0.995': 8.03,\n        '0.99': 8.9,\n        '0.975': 10.28,\n        '0.95': 11.59,\n        '0.9': 13.24,\n        '0.5': 20.34,\n        '0.1': 29.62,\n        '0.05': 32.67,\n        '0.025': 35.48,\n        '0.01': 38.93,\n        '0.005': 41.4\n    },\n    '22': {\n        '0.995': 8.64,\n        '0.99': 9.54,\n        '0.975': 10.98,\n        '0.95': 12.34,\n        '0.9': 14.04,\n        '0.5': 21.34,\n        '0.1': 30.81,\n        '0.05': 33.92,\n        '0.025': 36.78,\n        '0.01': 40.29,\n        '0.005': 42.8\n    },\n    '23': {\n        '0.995': 9.26,\n        '0.99': 10.2,\n        '0.975': 11.69,\n        '0.95': 13.09,\n        '0.9': 14.85,\n        '0.5': 22.34,\n        '0.1': 32.01,\n        '0.05': 35.17,\n        '0.025': 38.08,\n        '0.01': 41.64,\n        '0.005': 44.18\n    },\n    '24': {\n        '0.995': 9.89,\n        '0.99': 10.86,\n        '0.975': 12.4,\n        '0.95': 13.85,\n        '0.9': 15.66,\n        '0.5': 23.34,\n        '0.1': 33.2,\n        '0.05': 36.42,\n        '0.025': 39.36,\n        '0.01': 42.98,\n        '0.005': 45.56\n    },\n    '25': {\n        '0.995': 10.52,\n        '0.99': 11.52,\n        '0.975': 13.12,\n        '0.95': 14.61,\n        '0.9': 16.47,\n        '0.5': 24.34,\n        '0.1': 34.28,\n        '0.05': 37.65,\n        '0.025': 40.65,\n        '0.01': 44.31,\n        '0.005': 46.93\n    },\n    '26': {\n        '0.995': 11.16,\n        '0.99': 12.2,\n        '0.975': 13.84,\n        '0.95': 15.38,\n        '0.9': 17.29,\n        '0.5': 25.34,\n        '0.1': 35.56,\n        '0.05': 38.89,\n        '0.025': 41.92,\n        '0.01': 45.64,\n        '0.005': 48.29\n    },\n    '27': {\n        '0.995': 11.81,\n        '0.99': 12.88,\n        '0.975': 14.57,\n        '0.95': 16.15,\n        '0.9': 18.11,\n        '0.5': 26.34,\n        '0.1': 36.74,\n        '0.05': 40.11,\n        '0.025': 43.19,\n        '0.01': 46.96,\n        '0.005': 49.65\n    },\n    '28': {\n        '0.995': 12.46,\n        '0.99': 13.57,\n        '0.975': 15.31,\n        '0.95': 16.93,\n        '0.9': 18.94,\n        '0.5': 27.34,\n        '0.1': 37.92,\n        '0.05': 41.34,\n        '0.025': 44.46,\n        '0.01': 48.28,\n        '0.005': 50.99\n    },\n    '29': {\n        '0.995': 13.12,\n        '0.99': 14.26,\n        '0.975': 16.05,\n        '0.95': 17.71,\n        '0.9': 19.77,\n        '0.5': 28.34,\n        '0.1': 39.09,\n        '0.05': 42.56,\n        '0.025': 45.72,\n        '0.01': 49.59,\n        '0.005': 52.34\n    },\n    '30': {\n        '0.995': 13.79,\n        '0.99': 14.95,\n        '0.975': 16.79,\n        '0.95': 18.49,\n        '0.9': 20.6,\n        '0.5': 29.34,\n        '0.1': 40.26,\n        '0.05': 43.77,\n        '0.025': 46.98,\n        '0.01': 50.89,\n        '0.005': 53.67\n    },\n    '40': {\n        '0.995': 20.71,\n        '0.99': 22.16,\n        '0.975': 24.43,\n        '0.95': 26.51,\n        '0.9': 29.05,\n        '0.5': 39.34,\n        '0.1': 51.81,\n        '0.05': 55.76,\n        '0.025': 59.34,\n        '0.01': 63.69,\n        '0.005': 66.77\n    },\n    '50': {\n        '0.995': 27.99,\n        '0.99': 29.71,\n        '0.975': 32.36,\n        '0.95': 34.76,\n        '0.9': 37.69,\n        '0.5': 49.33,\n        '0.1': 63.17,\n        '0.05': 67.5,\n        '0.025': 71.42,\n        '0.01': 76.15,\n        '0.005': 79.49\n    },\n    '60': {\n        '0.995': 35.53,\n        '0.99': 37.48,\n        '0.975': 40.48,\n        '0.95': 43.19,\n        '0.9': 46.46,\n        '0.5': 59.33,\n        '0.1': 74.4,\n        '0.05': 79.08,\n        '0.025': 83.3,\n        '0.01': 88.38,\n        '0.005': 91.95\n    },\n    '70': {\n        '0.995': 43.28,\n        '0.99': 45.44,\n        '0.975': 48.76,\n        '0.95': 51.74,\n        '0.9': 55.33,\n        '0.5': 69.33,\n        '0.1': 85.53,\n        '0.05': 90.53,\n        '0.025': 95.02,\n        '0.01': 100.42,\n        '0.005': 104.22\n    },\n    '80': {\n        '0.995': 51.17,\n        '0.99': 53.54,\n        '0.975': 57.15,\n        '0.95': 60.39,\n        '0.9': 64.28,\n        '0.5': 79.33,\n        '0.1': 96.58,\n        '0.05': 101.88,\n        '0.025': 106.63,\n        '0.01': 112.33,\n        '0.005': 116.32\n    },\n    '90': {\n        '0.995': 59.2,\n        '0.99': 61.75,\n        '0.975': 65.65,\n        '0.95': 69.13,\n        '0.9': 73.29,\n        '0.5': 89.33,\n        '0.1': 107.57,\n        '0.05': 113.14,\n        '0.025': 118.14,\n        '0.01': 124.12,\n        '0.005': 128.3\n    },\n    '100': {\n        '0.995': 67.33,\n        '0.99': 70.06,\n        '0.975': 74.22,\n        '0.95': 77.93,\n        '0.9': 82.36,\n        '0.5': 99.33,\n        '0.1': 118.5,\n        '0.05': 124.34,\n        '0.025': 129.56,\n        '0.01': 135.81,\n        '0.005': 140.17\n    }\n};\n\nmodule.exports = chiSquaredDistributionTable;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval('\n/* @flow */\n\nvar mean = __webpack_require__(2);\nvar chiSquaredDistributionTable = __webpack_require__(89);\n\n/**\n * The [Ï2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting Ï2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k â c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // "Probability and Statistics in Engineering and Management Science", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05)); //= false\n */\nfunction chiSquaredGoodnessOfFit(\n    data/*: Array<number> */,\n    distributionType/*: Function */,\n    significance/*: number */)/*: boolean */ {\n    // Estimate from the sample data, a weighted mean.\n    var inputMean = mean(data),\n        // Calculated value of the Ï2 statistic.\n        chiSquared = 0,\n        // Degrees of freedom, calculated as (number of class intervals -\n        // number of hypothesized distribution parameters estimated - 1)\n        degreesOfFreedom,\n        // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n        // Lose one degree of freedom for estimating `lambda` from the sample data.\n        c = 1,\n        // The hypothesized distribution.\n        // Generate the hypothesized distribution.\n        hypothesizedDistribution = distributionType(inputMean),\n        observedFrequencies = [],\n        expectedFrequencies = [],\n        k;\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (var i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (i = 0; i < observedFrequencies.length; i++) {\n        if (observedFrequencies[i] === undefined) {\n            observedFrequencies[i] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (k = expectedFrequencies.length - 1; k >= 0; k--) {\n        if (expectedFrequencies[k] < 3) {\n            expectedFrequencies[k - 1] += expectedFrequencies[k];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k - 1] += observedFrequencies[k];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (k = 0; k < observedFrequencies.length; k++) {\n        chiSquared += Math.pow(\n            observedFrequencies[k] - expectedFrequencies[k], 2) /\n            expectedFrequencies[k];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    degreesOfFreedom = observedFrequencies.length - c - 1;\n    return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;\n}\n\nmodule.exports = chiSquaredGoodnessOfFit;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9jaGlfc3F1YXJlZF9nb29kbmVzc19vZl9maXQuanM/ZGFjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgbWVhbiA9IHJlcXVpcmUoJy4vbWVhbicpO1xudmFyIGNoaVNxdWFyZWREaXN0cmlidXRpb25UYWJsZSA9IHJlcXVpcmUoJy4vY2hpX3NxdWFyZWRfZGlzdHJpYnV0aW9uX3RhYmxlJyk7XG5cbi8qKlxuICogVGhlIFvPhzIgKENoaS1TcXVhcmVkKSBHb29kbmVzcy1vZi1GaXQgVGVzdF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Hb29kbmVzc19vZl9maXQjUGVhcnNvbi4yN3NfY2hpLXNxdWFyZWRfdGVzdClcbiAqIHVzZXMgYSBtZWFzdXJlIG9mIGdvb2RuZXNzIG9mIGZpdCB3aGljaCBpcyB0aGUgc3VtIG9mIGRpZmZlcmVuY2VzIGJldHdlZW4gb2JzZXJ2ZWQgYW5kIGV4cGVjdGVkIG91dGNvbWUgZnJlcXVlbmNpZXNcbiAqICh0aGF0IGlzLCBjb3VudHMgb2Ygb2JzZXJ2YXRpb25zKSwgZWFjaCBzcXVhcmVkIGFuZCBkaXZpZGVkIGJ5IHRoZSBudW1iZXIgb2Ygb2JzZXJ2YXRpb25zIGV4cGVjdGVkIGdpdmVuIHRoZVxuICogaHlwb3RoZXNpemVkIGRpc3RyaWJ1dGlvbi4gVGhlIHJlc3VsdGluZyDPhzIgc3RhdGlzdGljLCBgY2hpU3F1YXJlZGAsIGNhbiBiZSBjb21wYXJlZCB0byB0aGUgY2hpLXNxdWFyZWQgZGlzdHJpYnV0aW9uXG4gKiB0byBkZXRlcm1pbmUgdGhlIGdvb2RuZXNzIG9mIGZpdC4gSW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHRoZSBkZWdyZWVzIG9mIGZyZWVkb20gb2YgdGhlIGNoaS1zcXVhcmVkIGRpc3RyaWJ1dGlvbiwgb25lXG4gKiB0YWtlcyB0aGUgdG90YWwgbnVtYmVyIG9mIG9ic2VydmVkIGZyZXF1ZW5jaWVzIGFuZCBzdWJ0cmFjdHMgdGhlIG51bWJlciBvZiBlc3RpbWF0ZWQgcGFyYW1ldGVycy4gVGhlIHRlc3Qgc3RhdGlzdGljXG4gKiBmb2xsb3dzLCBhcHByb3hpbWF0ZWx5LCBhIGNoaS1zcXVhcmUgZGlzdHJpYnV0aW9uIHdpdGggKGsg4oiSIGMpIGRlZ3JlZXMgb2YgZnJlZWRvbSB3aGVyZSBga2AgaXMgdGhlIG51bWJlciBvZiBub24tZW1wdHlcbiAqIGNlbGxzIGFuZCBgY2AgaXMgdGhlIG51bWJlciBvZiBlc3RpbWF0ZWQgcGFyYW1ldGVycyBmb3IgdGhlIGRpc3RyaWJ1dGlvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3RyaWJ1dGlvblR5cGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwb2ludCBpbiBhIGRpc3RyaWJ1dGlvbjpcbiAqIGZvciBpbnN0YW5jZSwgYmlub21pYWwsIGJlcm5vdWxsaSwgb3IgcG9pc3NvblxuICogQHBhcmFtIHtudW1iZXJ9IHNpZ25pZmljYW5jZVxuICogQHJldHVybnMge251bWJlcn0gY2hpIHNxdWFyZWQgZ29vZG5lc3Mgb2YgZml0XG4gKiBAZXhhbXBsZVxuICogLy8gRGF0YSBmcm9tIFBvaXNzb24gZ29vZG5lc3Mtb2YtZml0IGV4YW1wbGUgMTAtMTkgaW4gV2lsbGlhbSBXLiBIaW5lcyAmIERvdWdsYXMgQy4gTW9udGdvbWVyeSxcbiAqIC8vIFwiUHJvYmFiaWxpdHkgYW5kIFN0YXRpc3RpY3MgaW4gRW5naW5lZXJpbmcgYW5kIE1hbmFnZW1lbnQgU2NpZW5jZVwiLCBXaWxleSAoMTk4MCkuXG4gKiB2YXIgZGF0YTEwMTkgPSBbXG4gKiAgICAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAqICAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLFxuICogICAgIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsXG4gKiAgICAgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMiwgMixcbiAqICAgICAzLCAzLCAzLCAzXG4gKiBdO1xuICogc3MuY2hpU3F1YXJlZEdvb2RuZXNzT2ZGaXQoZGF0YTEwMTksIHNzLnBvaXNzb25EaXN0cmlidXRpb24sIDAuMDUpKTsgLy89IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGNoaVNxdWFyZWRHb29kbmVzc09mRml0KFxuICAgIGRhdGEvKjogQXJyYXk8bnVtYmVyPiAqLyxcbiAgICBkaXN0cmlidXRpb25UeXBlLyo6IEZ1bmN0aW9uICovLFxuICAgIHNpZ25pZmljYW5jZS8qOiBudW1iZXIgKi8pLyo6IGJvb2xlYW4gKi8ge1xuICAgIC8vIEVzdGltYXRlIGZyb20gdGhlIHNhbXBsZSBkYXRhLCBhIHdlaWdodGVkIG1lYW4uXG4gICAgdmFyIGlucHV0TWVhbiA9IG1lYW4oZGF0YSksXG4gICAgICAgIC8vIENhbGN1bGF0ZWQgdmFsdWUgb2YgdGhlIM+HMiBzdGF0aXN0aWMuXG4gICAgICAgIGNoaVNxdWFyZWQgPSAwLFxuICAgICAgICAvLyBEZWdyZWVzIG9mIGZyZWVkb20sIGNhbGN1bGF0ZWQgYXMgKG51bWJlciBvZiBjbGFzcyBpbnRlcnZhbHMgLVxuICAgICAgICAvLyBudW1iZXIgb2YgaHlwb3RoZXNpemVkIGRpc3RyaWJ1dGlvbiBwYXJhbWV0ZXJzIGVzdGltYXRlZCAtIDEpXG4gICAgICAgIGRlZ3JlZXNPZkZyZWVkb20sXG4gICAgICAgIC8vIE51bWJlciBvZiBoeXBvdGhlc2l6ZWQgZGlzdHJpYnV0aW9uIHBhcmFtZXRlcnMgZXN0aW1hdGVkLCBleHBlY3RlZCB0byBiZSBzdXBwbGllZCBpbiB0aGUgZGlzdHJpYnV0aW9uIHRlc3QuXG4gICAgICAgIC8vIExvc2Ugb25lIGRlZ3JlZSBvZiBmcmVlZG9tIGZvciBlc3RpbWF0aW5nIGBsYW1iZGFgIGZyb20gdGhlIHNhbXBsZSBkYXRhLlxuICAgICAgICBjID0gMSxcbiAgICAgICAgLy8gVGhlIGh5cG90aGVzaXplZCBkaXN0cmlidXRpb24uXG4gICAgICAgIC8vIEdlbmVyYXRlIHRoZSBoeXBvdGhlc2l6ZWQgZGlzdHJpYnV0aW9uLlxuICAgICAgICBoeXBvdGhlc2l6ZWREaXN0cmlidXRpb24gPSBkaXN0cmlidXRpb25UeXBlKGlucHV0TWVhbiksXG4gICAgICAgIG9ic2VydmVkRnJlcXVlbmNpZXMgPSBbXSxcbiAgICAgICAgZXhwZWN0ZWRGcmVxdWVuY2llcyA9IFtdLFxuICAgICAgICBrO1xuXG4gICAgLy8gQ3JlYXRlIGFuIGFycmF5IGhvbGRpbmcgYSBoaXN0b2dyYW0gZnJvbSB0aGUgc2FtcGxlIGRhdGEsIG9mXG4gICAgLy8gdGhlIGZvcm0gYHsgdmFsdWU6IG51bWJlck9mT2N1cnJlbmNlcyB9YFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAob2JzZXJ2ZWRGcmVxdWVuY2llc1tkYXRhW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvYnNlcnZlZEZyZXF1ZW5jaWVzW2RhdGFbaV1dID0gMDtcbiAgICAgICAgfVxuICAgICAgICBvYnNlcnZlZEZyZXF1ZW5jaWVzW2RhdGFbaV1dKys7XG4gICAgfVxuXG4gICAgLy8gVGhlIGhpc3RvZ3JhbSB3ZSBjcmVhdGVkIG1pZ2h0IGJlIHNwYXJzZSAtIHRoZXJlIG1pZ2h0IGJlIGdhcHNcbiAgICAvLyBiZXR3ZWVuIHZhbHVlcy4gU28gd2UgaXRlcmF0ZSB0aHJvdWdoIHRoZSBoaXN0b2dyYW0sIG1ha2luZ1xuICAgIC8vIHN1cmUgdGhhdCBpbnN0ZWFkIG9mIHVuZGVmaW5lZCwgZ2FwcyBoYXZlIDAgdmFsdWVzLlxuICAgIGZvciAoaSA9IDA7IGkgPCBvYnNlcnZlZEZyZXF1ZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChvYnNlcnZlZEZyZXF1ZW5jaWVzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9ic2VydmVkRnJlcXVlbmNpZXNbaV0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGFuIGFycmF5IGhvbGRpbmcgYSBoaXN0b2dyYW0gb2YgZXhwZWN0ZWQgZGF0YSBnaXZlbiB0aGVcbiAgICAvLyBzYW1wbGUgc2l6ZSBhbmQgaHlwb3RoZXNpemVkIGRpc3RyaWJ1dGlvbi5cbiAgICBmb3IgKGsgaW4gaHlwb3RoZXNpemVkRGlzdHJpYnV0aW9uKSB7XG4gICAgICAgIGlmIChrIGluIG9ic2VydmVkRnJlcXVlbmNpZXMpIHtcbiAgICAgICAgICAgIGV4cGVjdGVkRnJlcXVlbmNpZXNbK2tdID0gaHlwb3RoZXNpemVkRGlzdHJpYnV0aW9uW2tdICogZGF0YS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBXb3JraW5nIGJhY2t3YXJkIHRocm91Z2ggdGhlIGV4cGVjdGVkIGZyZXF1ZW5jaWVzLCBjb2xsYXBzZSBjbGFzc2VzXG4gICAgLy8gaWYgbGVzcyB0aGFuIHRocmVlIG9ic2VydmF0aW9ucyBhcmUgZXhwZWN0ZWQgZm9yIGEgY2xhc3MuXG4gICAgLy8gVGhpcyB0cmFuc2Zvcm1hdGlvbiBpcyBhcHBsaWVkIHRvIHRoZSBvYnNlcnZlZCBmcmVxdWVuY2llcyBhcyB3ZWxsLlxuICAgIGZvciAoayA9IGV4cGVjdGVkRnJlcXVlbmNpZXMubGVuZ3RoIC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgICAgaWYgKGV4cGVjdGVkRnJlcXVlbmNpZXNba10gPCAzKSB7XG4gICAgICAgICAgICBleHBlY3RlZEZyZXF1ZW5jaWVzW2sgLSAxXSArPSBleHBlY3RlZEZyZXF1ZW5jaWVzW2tdO1xuICAgICAgICAgICAgZXhwZWN0ZWRGcmVxdWVuY2llcy5wb3AoKTtcblxuICAgICAgICAgICAgb2JzZXJ2ZWRGcmVxdWVuY2llc1trIC0gMV0gKz0gb2JzZXJ2ZWRGcmVxdWVuY2llc1trXTtcbiAgICAgICAgICAgIG9ic2VydmVkRnJlcXVlbmNpZXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHNxdWFyZWQgZGlmZmVyZW5jZXMgYmV0d2VlbiBvYnNlcnZlZCAmIGV4cGVjdGVkXG4gICAgLy8gZnJlcXVlbmNpZXMsIGFjY3VtdWxhdGluZyB0aGUgYGNoaVNxdWFyZWRgIHN0YXRpc3RpYy5cbiAgICBmb3IgKGsgPSAwOyBrIDwgb2JzZXJ2ZWRGcmVxdWVuY2llcy5sZW5ndGg7IGsrKykge1xuICAgICAgICBjaGlTcXVhcmVkICs9IE1hdGgucG93KFxuICAgICAgICAgICAgb2JzZXJ2ZWRGcmVxdWVuY2llc1trXSAtIGV4cGVjdGVkRnJlcXVlbmNpZXNba10sIDIpIC9cbiAgICAgICAgICAgIGV4cGVjdGVkRnJlcXVlbmNpZXNba107XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIGRlZ3JlZXMgb2YgZnJlZWRvbSBmb3IgdGhpcyB0ZXN0IGFuZCBsb29rIGl0IHVwIGluIHRoZVxuICAgIC8vIGBjaGlTcXVhcmVkRGlzdHJpYnV0aW9uVGFibGVgIGluIG9yZGVyIHRvXG4gICAgLy8gYWNjZXB0IG9yIHJlamVjdCB0aGUgZ29vZG5lc3Mtb2YtZml0IG9mIHRoZSBoeXBvdGhlc2l6ZWQgZGlzdHJpYnV0aW9uLlxuICAgIGRlZ3JlZXNPZkZyZWVkb20gPSBvYnNlcnZlZEZyZXF1ZW5jaWVzLmxlbmd0aCAtIGMgLSAxO1xuICAgIHJldHVybiBjaGlTcXVhcmVkRGlzdHJpYnV0aW9uVGFibGVbZGVncmVlc09mRnJlZWRvbV1bc2lnbmlmaWNhbmNlXSA8IGNoaVNxdWFyZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2hpU3F1YXJlZEdvb2RuZXNzT2ZGaXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL2NoaV9zcXVhcmVkX2dvb2RuZXNzX29mX2ZpdC5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `sample` is expected to be an array, and `chunkSize` a number.\n * The `sample` array can contain any kind of data.\n *\n * @param {Array} sample any array of values\n * @param {number} chunkSize size of each output array\n * @returns {Array<Array>} a chunked array\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(sample/*:Array<any>*/, chunkSize/*:number*/)/*:?Array<Array<any>>*/ {\n\n    // a list of result chunks, as arrays in an array\n    var output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize <= 0) {\n        throw new Error('chunk size must be a positive integer');\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (var start = 0; start < sample.length; start += chunkSize) {\n\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(sample.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\nmodule.exports = chunk;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9jaHVuay5qcz9jZTY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogU3BsaXQgYW4gYXJyYXkgaW50byBjaHVua3Mgb2YgYSBzcGVjaWZpZWQgc2l6ZS4gVGhpcyBmdW5jdGlvblxuICogaGFzIHRoZSBzYW1lIGJlaGF2aW9yIGFzIFtQSFAncyBhcnJheV9jaHVua10oaHR0cDovL3BocC5uZXQvbWFudWFsL2VuL2Z1bmN0aW9uLmFycmF5LWNodW5rLnBocClcbiAqIGZ1bmN0aW9uLCBhbmQgdGh1cyB3aWxsIGluc2VydCBzbWFsbGVyLXNpemVkIGNodW5rcyBhdCB0aGUgZW5kIGlmXG4gKiB0aGUgaW5wdXQgc2l6ZSBpcyBub3QgZGl2aXNpYmxlIGJ5IHRoZSBjaHVuayBzaXplLlxuICpcbiAqIGBzYW1wbGVgIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5LCBhbmQgYGNodW5rU2l6ZWAgYSBudW1iZXIuXG4gKiBUaGUgYHNhbXBsZWAgYXJyYXkgY2FuIGNvbnRhaW4gYW55IGtpbmQgb2YgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzYW1wbGUgYW55IGFycmF5IG9mIHZhbHVlc1xuICogQHBhcmFtIHtudW1iZXJ9IGNodW5rU2l6ZSBzaXplIG9mIGVhY2ggb3V0cHV0IGFycmF5XG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk+fSBhIGNodW5rZWQgYXJyYXlcbiAqIEBleGFtcGxlXG4gKiBjaHVuayhbMSwgMiwgMywgNCwgNSwgNl0sIDIpO1xuICogLy8gPT4gW1sxLCAyXSwgWzMsIDRdLCBbNSwgNl1dXG4gKi9cbmZ1bmN0aW9uIGNodW5rKHNhbXBsZS8qOkFycmF5PGFueT4qLywgY2h1bmtTaXplLyo6bnVtYmVyKi8pLyo6P0FycmF5PEFycmF5PGFueT4+Ki8ge1xuXG4gICAgLy8gYSBsaXN0IG9mIHJlc3VsdCBjaHVua3MsIGFzIGFycmF5cyBpbiBhbiBhcnJheVxuICAgIHZhciBvdXRwdXQgPSBbXTtcblxuICAgIC8vIGBjaHVua1NpemVgIG11c3QgYmUgemVybyBvciBoaWdoZXIgLSBvdGhlcndpc2UgdGhlIGxvb3AgYmVsb3csXG4gICAgLy8gaW4gd2hpY2ggd2UgY2FsbCBgc3RhcnQgKz0gY2h1bmtTaXplYCwgd2lsbCBsb29wIGluZmluaXRlbHkuXG4gICAgLy8gU28sIHdlJ2xsIGRldGVjdCBhbmQgdGhyb3cgaW4gdGhhdCBjYXNlIHRvIGluZGljYXRlXG4gICAgLy8gaW52YWxpZCBpbnB1dC5cbiAgICBpZiAoY2h1bmtTaXplIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjaHVuayBzaXplIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG4gICAgfVxuXG4gICAgLy8gYHN0YXJ0YCBpcyB0aGUgaW5kZXggYXQgd2hpY2ggYC5zbGljZWAgd2lsbCBzdGFydCBzZWxlY3RpbmdcbiAgICAvLyBuZXcgYXJyYXkgZWxlbWVudHNcbiAgICBmb3IgKHZhciBzdGFydCA9IDA7IHN0YXJ0IDwgc2FtcGxlLmxlbmd0aDsgc3RhcnQgKz0gY2h1bmtTaXplKSB7XG5cbiAgICAgICAgLy8gZm9yIGVhY2ggY2h1bmssIHNsaWNlIHRoYXQgcGFydCBvZiB0aGUgYXJyYXkgYW5kIGFkZCBpdFxuICAgICAgICAvLyB0byB0aGUgb3V0cHV0LiBUaGUgYC5zbGljZWAgZnVuY3Rpb24gZG9lcyBub3QgY2hhbmdlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBhcnJheS5cbiAgICAgICAgb3V0cHV0LnB1c2goc2FtcGxlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNodW5rU2l6ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNodW5rO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9jaHVuay5qc1xuLy8gbW9kdWxlIGlkID0gOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar uniqueCountSorted = __webpack_require__(41),\n    numericSort = __webpack_require__(34);\n\n/**\n * Create a new column x row matrix.\n *\n * @private\n * @param {number} columns\n * @param {number} rows\n * @return {Array<Array<number>>} matrix\n * @example\n * makeMatrix(10, 10);\n */\nfunction makeMatrix(columns, rows) {\n    var matrix = [];\n    for (var i = 0; i < columns; i++) {\n        var column = [];\n        for (var j = 0; j < rows; j++) {\n            column.push(0);\n        }\n        matrix.push(column);\n    }\n    return matrix;\n}\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j, i, sums, sumsOfSquares) {\n    var sji; // s(j, i)\n    if (j > 0) {\n        var muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n        sji = sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n    } else {\n        sji = sumsOfSquares[i] - sums[i] * sums[i] / (i + 1);\n    }\n    if (sji < 0) {\n        return 0;\n    }\n    return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(iMin, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares) {\n    if (iMin > iMax) {\n        return;\n    }\n\n    // Start at midpoint between iMin and iMax\n    var i = Math.floor((iMin + iMax) / 2);\n\n    matrix[cluster][i] = matrix[cluster - 1][i - 1];\n    backtrackMatrix[cluster][i] = i;\n\n    var jlow = cluster; // the lower end for j\n\n    if (iMin > cluster) {\n        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n    }\n    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n    var jhigh = i - 1; // the upper end for j\n    if (iMax < matrix.length - 1) {\n        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n    }\n\n    var sji;\n    var sjlowi;\n    var ssqjlow;\n    var ssqj;\n    for (var j = jhigh; j >= jlow; --j) {\n        sji = ssq(j, i, sums, sumsOfSquares);\n\n        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n            break;\n        }\n\n        // Examine the lower bound of the cluster border\n        sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n        if (ssqjlow < matrix[cluster][i]) {\n            // Shrink the lower bound\n            matrix[cluster][i] = ssqjlow;\n            backtrackMatrix[cluster][i] = jlow;\n        }\n        jlow++;\n\n        ssqj = sji + matrix[cluster - 1][j - 1];\n        if (ssqj < matrix[cluster][i]) {\n            matrix[cluster][i] = ssqj;\n            backtrackMatrix[cluster][i] = j;\n        }\n    }\n\n    fillMatrixColumn(iMin, i - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n    fillMatrixColumn(i + 1, iMax, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices(data, matrix, backtrackMatrix) {\n    var nValues = matrix[0].length;\n\n    // Shift values by the median to improve numeric stability\n    var shift = data[Math.floor(nValues / 2)];\n\n    // Cumulative sum and cumulative sum of squares for all values in data array\n    var sums = [];\n    var sumsOfSquares = [];\n\n    // Initialize first column in matrix & backtrackMatrix\n    for (var i = 0, shiftedValue; i < nValues; ++i) {\n        shiftedValue = data[i] - shift;\n        if (i === 0) {\n            sums.push(shiftedValue);\n            sumsOfSquares.push(shiftedValue * shiftedValue);\n        } else {\n            sums.push(sums[i - 1] + shiftedValue);\n            sumsOfSquares.push(sumsOfSquares[i - 1] + shiftedValue * shiftedValue);\n        }\n\n        // Initialize for cluster = 0\n        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n        backtrackMatrix[0][i] = 0;\n    }\n\n    // Initialize the rest of the columns\n    var iMin;\n    for (var cluster = 1; cluster < matrix.length; ++cluster) {\n        if (cluster < matrix.length - 1) {\n            iMin = cluster;\n        } else {\n            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n            iMin = nValues - 1;\n        }\n\n        fillMatrixColumn(iMin, nValues - 1, cluster, matrix, backtrackMatrix, sums, sumsOfSquares);\n    }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like ckmeans. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nfunction ckmeans(data/*: Array<number> */, nClusters/*: number */)/*: Array<Array<number>> */ {\n\n    if (nClusters > data.length) {\n        throw new Error('Cannot generate more classes than there are data values');\n    }\n\n    var sorted = numericSort(data),\n        // we'll use this as the maximum number of clusters\n        uniqueCount = uniqueCountSorted(sorted);\n\n    // if all of the input values are identical, there's one cluster\n    // with all of the input in it.\n    if (uniqueCount === 1) {\n        return [sorted];\n    }\n\n    // named 'S' originally\n    var matrix = makeMatrix(nClusters, sorted.length),\n        // named 'J' originally\n        backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n    // This is a dynamic programming way to solve the problem of minimizing\n    // within-cluster sum of squares. It's similar to linear regression\n    // in this way, and this calculation incrementally computes the\n    // sum of squares that are later read.\n    fillMatrices(sorted, matrix, backtrackMatrix);\n\n    // The real work of Ckmeans clustering happens in the matrix generation:\n    // the generated matrices encode all possible clustering combinations, and\n    // once they're generated we can solve for the best clustering groups\n    // very quickly.\n    var clusters = [],\n        clusterRight = backtrackMatrix[0].length - 1;\n\n    // Backtrack the clusters from the dynamic programming matrix. This\n    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n    // and moves the cluster target with the loop.\n    for (var cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n\n        var clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n        // fill the cluster from the sorted input by taking a slice of the\n        // array. the backtrack matrix makes this easy - it stores the\n        // indexes where the cluster should start and end.\n        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n        if (cluster > 0) {\n            clusterRight = clusterLeft - 1;\n        }\n    }\n\n    return clusters;\n}\n\nmodule.exports = ckmeans;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval("/* @flow */\n\n/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k elements from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} elements any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(elements /*: Array<any> */, k/*: number */) {\n    var i;\n    var subI;\n    var combinationList = [];\n    var subsetCombinations;\n    var next;\n\n    for (i = 0; i < elements.length; i++) {\n        if (k === 1) {\n            combinationList.push([elements[i]])\n        } else {\n            subsetCombinations = combinations(elements.slice( i + 1, elements.length ), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(elements[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\nmodule.exports = combinations;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9jb21iaW5hdGlvbnMuanM/NmU5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBDb21iaW5hdGlvbnNcbiAqIENvbWJpbmF0aW9ucyBhcmUgdW5pcXVlIHN1YnNldHMgb2YgYSBjb2xsZWN0aW9uIC0gaW4gdGhpcyBjYXNlLCBrIGVsZW1lbnRzIGZyb20gYSBjb2xsZWN0aW9uIGF0IGEgdGltZS5cbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmF0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSBlbGVtZW50cyBhbnkgdHlwZSBvZiBkYXRhXG4gKiBAcGFyYW0ge2ludH0gayB0aGUgbnVtYmVyIG9mIG9iamVjdHMgaW4gZWFjaCBncm91cCAod2l0aG91dCByZXBsYWNlbWVudClcbiAqIEByZXR1cm5zIHtBcnJheTxBcnJheT59IGFycmF5IG9mIHBlcm11dGF0aW9uc1xuICogQGV4YW1wbGVcbiAqIGNvbWJpbmF0aW9ucyhbMSwgMiwgM10sIDIpOyAvLyA9PiBbWzEsMl0sIFsxLDNdLCBbMiwzXV1cbiAqL1xuXG5mdW5jdGlvbiBjb21iaW5hdGlvbnMoZWxlbWVudHMgLyo6IEFycmF5PGFueT4gKi8sIGsvKjogbnVtYmVyICovKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIHN1Ykk7XG4gICAgdmFyIGNvbWJpbmF0aW9uTGlzdCA9IFtdO1xuICAgIHZhciBzdWJzZXRDb21iaW5hdGlvbnM7XG4gICAgdmFyIG5leHQ7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGsgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbWJpbmF0aW9uTGlzdC5wdXNoKFtlbGVtZW50c1tpXV0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJzZXRDb21iaW5hdGlvbnMgPSBjb21iaW5hdGlvbnMoZWxlbWVudHMuc2xpY2UoIGkgKyAxLCBlbGVtZW50cy5sZW5ndGggKSwgayAtIDEpO1xuICAgICAgICAgICAgZm9yIChzdWJJID0gMDsgc3ViSSA8IHN1YnNldENvbWJpbmF0aW9ucy5sZW5ndGg7IHN1YkkrKykge1xuICAgICAgICAgICAgICAgIG5leHQgPSBzdWJzZXRDb21iaW5hdGlvbnNbc3ViSV07XG4gICAgICAgICAgICAgICAgbmV4dC51bnNoaWZ0KGVsZW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICBjb21iaW5hdGlvbkxpc3QucHVzaChuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29tYmluYXRpb25MaXN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbWJpbmF0aW9ucztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvY29tYmluYXRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSA5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("/* @flow */\n\n\n/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k elements from a collection at a time.\n * 'With replacement' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn't matter for combinations.\n * \n * @param {Array} elements any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(\n    elements /*: Array<any> */,\n    k /*: number */) {\n\n    var combinationList = [];\n\n    for (var i = 0; i < elements.length; i++) {\n        if (k === 1) {\n            // If we're requested to find only one element, we don't need\n            // to recurse: just push `elements[i]` onto the list of combinations.\n            combinationList.push([elements[i]])\n        } else {\n            // Otherwise, recursively find combinations, given `k - 1`. Note that\n            // we request `k - 1`, so if you were looking for k=3 combinations, we're\n            // requesting k=2. This -1 gets reversed in the for loop right after this\n            // code, since we concatenate `elements[i]` onto the selected combinations,\n            // bringing `k` back up to your requested level.\n            // This recursion may go many levels deep, since it only stops once\n            // k=1.\n            var subsetCombinations = combinationsReplacement(\n                elements.slice(i, elements.length),\n                k - 1);\n\n            for (var j = 0; j < subsetCombinations.length; j++) {\n                combinationList.push([elements[i]]\n                    .concat(subsetCombinations[j]));\n            }\n        }\n    }\n\n    return combinationList;\n}\n\nmodule.exports = combinationsReplacement;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9jb21iaW5hdGlvbnNfcmVwbGFjZW1lbnQuanM/NDU2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIFtDb21iaW5hdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmF0aW9uKSB3aXRoIHJlcGxhY2VtZW50XG4gKiBDb21iaW5hdGlvbnMgYXJlIHVuaXF1ZSBzdWJzZXRzIG9mIGEgY29sbGVjdGlvbiAtIGluIHRoaXMgY2FzZSwgayBlbGVtZW50cyBmcm9tIGEgY29sbGVjdGlvbiBhdCBhIHRpbWUuXG4gKiAnV2l0aCByZXBsYWNlbWVudCcgbWVhbnMgdGhhdCBhIGdpdmVuIGVsZW1lbnQgY2FuIGJlIGNob3NlbiBtdWx0aXBsZSB0aW1lcy5cbiAqIFVubGlrZSBwZXJtdXRhdGlvbiwgb3JkZXIgZG9lc24ndCBtYXR0ZXIgZm9yIGNvbWJpbmF0aW9ucy5cbiAqIFxuICogQHBhcmFtIHtBcnJheX0gZWxlbWVudHMgYW55IHR5cGUgb2YgZGF0YVxuICogQHBhcmFtIHtpbnR9IGsgdGhlIG51bWJlciBvZiBvYmplY3RzIGluIGVhY2ggZ3JvdXAgKHdpdGhvdXQgcmVwbGFjZW1lbnQpXG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk+fSBhcnJheSBvZiBwZXJtdXRhdGlvbnNcbiAqIEBleGFtcGxlXG4gKiBjb21iaW5hdGlvbnNSZXBsYWNlbWVudChbMSwgMl0sIDIpOyAvLyA9PiBbWzEsIDFdLCBbMSwgMl0sIFsyLCAyXV1cbiAqL1xuZnVuY3Rpb24gY29tYmluYXRpb25zUmVwbGFjZW1lbnQoXG4gICAgZWxlbWVudHMgLyo6IEFycmF5PGFueT4gKi8sXG4gICAgayAvKjogbnVtYmVyICovKSB7XG5cbiAgICB2YXIgY29tYmluYXRpb25MaXN0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChrID09PSAxKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSByZXF1ZXN0ZWQgdG8gZmluZCBvbmx5IG9uZSBlbGVtZW50LCB3ZSBkb24ndCBuZWVkXG4gICAgICAgICAgICAvLyB0byByZWN1cnNlOiBqdXN0IHB1c2ggYGVsZW1lbnRzW2ldYCBvbnRvIHRoZSBsaXN0IG9mIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgICAgIGNvbWJpbmF0aW9uTGlzdC5wdXNoKFtlbGVtZW50c1tpXV0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHJlY3Vyc2l2ZWx5IGZpbmQgY29tYmluYXRpb25zLCBnaXZlbiBgayAtIDFgLiBOb3RlIHRoYXRcbiAgICAgICAgICAgIC8vIHdlIHJlcXVlc3QgYGsgLSAxYCwgc28gaWYgeW91IHdlcmUgbG9va2luZyBmb3Igaz0zIGNvbWJpbmF0aW9ucywgd2UncmVcbiAgICAgICAgICAgIC8vIHJlcXVlc3Rpbmcgaz0yLiBUaGlzIC0xIGdldHMgcmV2ZXJzZWQgaW4gdGhlIGZvciBsb29wIHJpZ2h0IGFmdGVyIHRoaXNcbiAgICAgICAgICAgIC8vIGNvZGUsIHNpbmNlIHdlIGNvbmNhdGVuYXRlIGBlbGVtZW50c1tpXWAgb250byB0aGUgc2VsZWN0ZWQgY29tYmluYXRpb25zLFxuICAgICAgICAgICAgLy8gYnJpbmdpbmcgYGtgIGJhY2sgdXAgdG8geW91ciByZXF1ZXN0ZWQgbGV2ZWwuXG4gICAgICAgICAgICAvLyBUaGlzIHJlY3Vyc2lvbiBtYXkgZ28gbWFueSBsZXZlbHMgZGVlcCwgc2luY2UgaXQgb25seSBzdG9wcyBvbmNlXG4gICAgICAgICAgICAvLyBrPTEuXG4gICAgICAgICAgICB2YXIgc3Vic2V0Q29tYmluYXRpb25zID0gY29tYmluYXRpb25zUmVwbGFjZW1lbnQoXG4gICAgICAgICAgICAgICAgZWxlbWVudHMuc2xpY2UoaSwgZWxlbWVudHMubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICBrIC0gMSk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3Vic2V0Q29tYmluYXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29tYmluYXRpb25MaXN0LnB1c2goW2VsZW1lbnRzW2ldXVxuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHN1YnNldENvbWJpbmF0aW9uc1tqXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbWJpbmF0aW9uTGlzdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21iaW5hdGlvbnNSZXBsYWNlbWVudDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvY29tYmluYXRpb25zX3JlcGxhY2VtZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar standardNormalTable = __webpack_require__(39);\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z /*:number */)/*:number */ {\n\n    // Calculate the position of this value.\n    var absZ = Math.abs(z),\n        // Each row begins with a different\n        // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n        // corresponds to a range of 0.01 in the input values, so the value is\n        // multiplied by 100.\n        index = Math.min(Math.round(absZ * 100), standardNormalTable.length - 1);\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they're computed here.\n        return +(1 - standardNormalTable[index]).toFixed(4);\n    }\n}\n\nmodule.exports = cumulativeStdNormalProbability;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9jdW11bGF0aXZlX3N0ZF9ub3JtYWxfcHJvYmFiaWxpdHkuanM/N2ViYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgc3RhbmRhcmROb3JtYWxUYWJsZSA9IHJlcXVpcmUoJy4vc3RhbmRhcmRfbm9ybWFsX3RhYmxlJyk7XG5cbi8qKlxuICogKipbQ3VtdWxhdGl2ZSBTdGFuZGFyZCBOb3JtYWwgUHJvYmFiaWxpdHldKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3RhbmRhcmRfbm9ybWFsX3RhYmxlKSoqXG4gKlxuICogU2luY2UgcHJvYmFiaWxpdHkgdGFibGVzIGNhbm5vdCBiZVxuICogcHJpbnRlZCBmb3IgZXZlcnkgbm9ybWFsIGRpc3RyaWJ1dGlvbiwgYXMgdGhlcmUgYXJlIGFuIGluZmluaXRlIHZhcmlldHlcbiAqIG9mIG5vcm1hbCBkaXN0cmlidXRpb25zLCBpdCBpcyBjb21tb24gcHJhY3RpY2UgdG8gY29udmVydCBhIG5vcm1hbCB0byBhXG4gKiBzdGFuZGFyZCBub3JtYWwgYW5kIHRoZW4gdXNlIHRoZSBzdGFuZGFyZCBub3JtYWwgdGFibGUgdG8gZmluZCBwcm9iYWJpbGl0aWVzLlxuICpcbiAqIFlvdSBjYW4gdXNlIGAuNSArIC41ICogZXJyb3JGdW5jdGlvbih4IC8gTWF0aC5zcXJ0KDIpKWAgdG8gY2FsY3VsYXRlIHRoZSBwcm9iYWJpbGl0eVxuICogaW5zdGVhZCBvZiBsb29raW5nIGl0IHVwIGluIGEgdGFibGUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGN1bXVsYXRpdmUgc3RhbmRhcmQgbm9ybWFsIHByb2JhYmlsaXR5XG4gKi9cbmZ1bmN0aW9uIGN1bXVsYXRpdmVTdGROb3JtYWxQcm9iYWJpbGl0eSh6IC8qOm51bWJlciAqLykvKjpudW1iZXIgKi8ge1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGlzIHZhbHVlLlxuICAgIHZhciBhYnNaID0gTWF0aC5hYnMoeiksXG4gICAgICAgIC8vIEVhY2ggcm93IGJlZ2lucyB3aXRoIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHNpZ25pZmljYW50IGRpZ2l0OiAwLjUsIDAuNiwgMC43LCBhbmQgc28gb24uIEVhY2ggdmFsdWUgaW4gdGhlIHRhYmxlXG4gICAgICAgIC8vIGNvcnJlc3BvbmRzIHRvIGEgcmFuZ2Ugb2YgMC4wMSBpbiB0aGUgaW5wdXQgdmFsdWVzLCBzbyB0aGUgdmFsdWUgaXNcbiAgICAgICAgLy8gbXVsdGlwbGllZCBieSAxMDAuXG4gICAgICAgIGluZGV4ID0gTWF0aC5taW4oTWF0aC5yb3VuZChhYnNaICogMTAwKSwgc3RhbmRhcmROb3JtYWxUYWJsZS5sZW5ndGggLSAxKTtcblxuICAgIC8vIFRoZSBpbmRleCB3ZSBjYWxjdWxhdGUgbXVzdCBiZSBpbiB0aGUgdGFibGUgYXMgYSBwb3NpdGl2ZSB2YWx1ZSxcbiAgICAvLyBidXQgd2Ugc3RpbGwgcGF5IGF0dGVudGlvbiB0byB3aGV0aGVyIHRoZSBpbnB1dCBpcyBwb3NpdGl2ZVxuICAgIC8vIG9yIG5lZ2F0aXZlLCBhbmQgZmxpcCB0aGUgb3V0cHV0IHZhbHVlIGFzIGEgbGFzdCBzdGVwLlxuICAgIGlmICh6ID49IDApIHtcbiAgICAgICAgcmV0dXJuIHN0YW5kYXJkTm9ybWFsVGFibGVbaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGR1ZSB0byBmbG9hdGluZy1wb2ludCBhcml0aG1ldGljLCB2YWx1ZXMgaW4gdGhlIHRhYmxlIHdpdGhcbiAgICAgICAgLy8gNCBzaWduaWZpY2FudCBmaWd1cmVzIGNhbiBuZXZlcnRoZWxlc3MgZW5kIHVwIGFzIHJlcGVhdGluZ1xuICAgICAgICAvLyBmcmFjdGlvbnMgd2hlbiB0aGV5J3JlIGNvbXB1dGVkIGhlcmUuXG4gICAgICAgIHJldHVybiArKDEgLSBzdGFuZGFyZE5vcm1hbFRhYmxlW2luZGV4XSkudG9GaXhlZCg0KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3VtdWxhdGl2ZVN0ZE5vcm1hbFByb2JhYmlsaXR5O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9jdW11bGF0aXZlX3N0ZF9ub3JtYWxfcHJvYmFiaWxpdHkuanNcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar max = __webpack_require__(30),\n    min = __webpack_require__(32);\n\n/**\n * Given an array of data, this will find the extent of the\n * data and return an array of breaks that can be used\n * to categorize the data into a number of classes. The\n * returned array will always be 1 longer than the number of\n * classes because it includes the minimum value.\n *\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * @example\n * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); //= [1, 2.25, 3.5, 4.75, 6]\n */\nfunction equalIntervalBreaks(data/*: Array<number> */, nClasses/*:number*/)/*: Array<number> */ {\n\n    if (data.length <= 1) {\n        return data;\n    }\n\n    var theMin = min(data),\n        theMax = max(data); \n\n    // the first break will always be the minimum value\n    // in the dataset\n    var breaks = [theMin];\n\n    // The size of each break is the full range of the data\n    // divided by the number of classes requested\n    var breakSize = (theMax - theMin) / nClasses;\n\n    // In the case of nClasses = 1, this loop won't run\n    // and the returned breaks will be [min, max]\n    for (var i = 1; i < nClasses; i++) {\n        breaks.push(breaks[0] + breakSize * i);\n    }\n\n    // the last break will always be the\n    // maximum.\n    breaks.push(theMax);\n\n    return breaks;\n}\n\nmodule.exports = equalIntervalBreaks;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9lcXVhbF9pbnRlcnZhbF9icmVha3MuanM/NjBlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgbWF4ID0gcmVxdWlyZSgnLi9tYXgnKSxcbiAgICBtaW4gPSByZXF1aXJlKCcuL21pbicpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGFycmF5IG9mIGRhdGEsIHRoaXMgd2lsbCBmaW5kIHRoZSBleHRlbnQgb2YgdGhlXG4gKiBkYXRhIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgYnJlYWtzIHRoYXQgY2FuIGJlIHVzZWRcbiAqIHRvIGNhdGVnb3JpemUgdGhlIGRhdGEgaW50byBhIG51bWJlciBvZiBjbGFzc2VzLiBUaGVcbiAqIHJldHVybmVkIGFycmF5IHdpbGwgYWx3YXlzIGJlIDEgbG9uZ2VyIHRoYW4gdGhlIG51bWJlciBvZlxuICogY2xhc3NlcyBiZWNhdXNlIGl0IGluY2x1ZGVzIHRoZSBtaW5pbXVtIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZGF0YSBpbnB1dCBkYXRhLCBhcyBhbiBhcnJheSBvZiBudW1iZXIgdmFsdWVzXG4gKiBAcGFyYW0ge251bWJlcn0gbkNsYXNzZXMgbnVtYmVyIG9mIGRlc2lyZWQgY2xhc3Nlc1xuICogQHJldHVybnMge0FycmF5PG51bWJlcj59IGFycmF5IG9mIGNsYXNzIGJyZWFrIHBvc2l0aW9uc1xuICogQGV4YW1wbGVcbiAqIGVxdWFsSW50ZXJ2YWxCcmVha3MoWzEsIDIsIDMsIDQsIDUsIDZdLCA0KTsgLy89IFsxLCAyLjI1LCAzLjUsIDQuNzUsIDZdXG4gKi9cbmZ1bmN0aW9uIGVxdWFsSW50ZXJ2YWxCcmVha3MoZGF0YS8qOiBBcnJheTxudW1iZXI+ICovLCBuQ2xhc3Nlcy8qOm51bWJlciovKS8qOiBBcnJheTxudW1iZXI+ICovIHtcblxuICAgIGlmIChkYXRhLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHZhciB0aGVNaW4gPSBtaW4oZGF0YSksXG4gICAgICAgIHRoZU1heCA9IG1heChkYXRhKTsgXG5cbiAgICAvLyB0aGUgZmlyc3QgYnJlYWsgd2lsbCBhbHdheXMgYmUgdGhlIG1pbmltdW0gdmFsdWVcbiAgICAvLyBpbiB0aGUgZGF0YXNldFxuICAgIHZhciBicmVha3MgPSBbdGhlTWluXTtcblxuICAgIC8vIFRoZSBzaXplIG9mIGVhY2ggYnJlYWsgaXMgdGhlIGZ1bGwgcmFuZ2Ugb2YgdGhlIGRhdGFcbiAgICAvLyBkaXZpZGVkIGJ5IHRoZSBudW1iZXIgb2YgY2xhc3NlcyByZXF1ZXN0ZWRcbiAgICB2YXIgYnJlYWtTaXplID0gKHRoZU1heCAtIHRoZU1pbikgLyBuQ2xhc3NlcztcblxuICAgIC8vIEluIHRoZSBjYXNlIG9mIG5DbGFzc2VzID0gMSwgdGhpcyBsb29wIHdvbid0IHJ1blxuICAgIC8vIGFuZCB0aGUgcmV0dXJuZWQgYnJlYWtzIHdpbGwgYmUgW21pbiwgbWF4XVxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbkNsYXNzZXM7IGkrKykge1xuICAgICAgICBicmVha3MucHVzaChicmVha3NbMF0gKyBicmVha1NpemUgKiBpKTtcbiAgICB9XG5cbiAgICAvLyB0aGUgbGFzdCBicmVhayB3aWxsIGFsd2F5cyBiZSB0aGVcbiAgICAvLyBtYXhpbXVtLlxuICAgIGJyZWFrcy5wdXNoKHRoZU1heCk7XG5cbiAgICByZXR1cm4gYnJlYWtzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsSW50ZXJ2YWxCcmVha3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL2VxdWFsX2ludGVydmFsX2JyZWFrcy5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n *\n * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n * normal distribution with standard deviation sd is within x of the mean.\n *\n * This function returns a numerical approximation to the exact value.\n *\n * @param {number} x input\n * @return {number} error estimation\n * @example\n * errorFunction(1).toFixed(2); // => '0.84'\n */\nfunction errorFunction(x/*: number */)/*: number */ {\n    var t = 1 / (1 + 0.5 * Math.abs(x));\n    var tau = t * Math.exp(-Math.pow(x, 2) -\n        1.26551223 +\n        1.00002368 * t +\n        0.37409196 * Math.pow(t, 2) +\n        0.09678418 * Math.pow(t, 3) -\n        0.18628806 * Math.pow(t, 4) +\n        0.27886807 * Math.pow(t, 5) -\n        1.13520398 * Math.pow(t, 6) +\n        1.48851587 * Math.pow(t, 7) -\n        0.82215223 * Math.pow(t, 8) +\n        0.17087277 * Math.pow(t, 9));\n    if (x >= 0) {\n        return 1 - tau;\n    } else {\n        return tau - 1;\n    }\n}\n\nmodule.exports = errorFunction;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9lcnJvcl9mdW5jdGlvbi5qcz9mOTUyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogKipbR2F1c3NpYW4gZXJyb3IgZnVuY3Rpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXJyb3JfZnVuY3Rpb24pKipcbiAqXG4gKiBUaGUgYGVycm9yRnVuY3Rpb24oeC8oc2QgKiBNYXRoLnNxcnQoMikpKWAgaXMgdGhlIHByb2JhYmlsaXR5IHRoYXQgYSB2YWx1ZSBpbiBhXG4gKiBub3JtYWwgZGlzdHJpYnV0aW9uIHdpdGggc3RhbmRhcmQgZGV2aWF0aW9uIHNkIGlzIHdpdGhpbiB4IG9mIHRoZSBtZWFuLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIG51bWVyaWNhbCBhcHByb3hpbWF0aW9uIHRvIHRoZSBleGFjdCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCBpbnB1dFxuICogQHJldHVybiB7bnVtYmVyfSBlcnJvciBlc3RpbWF0aW9uXG4gKiBAZXhhbXBsZVxuICogZXJyb3JGdW5jdGlvbigxKS50b0ZpeGVkKDIpOyAvLyA9PiAnMC44NCdcbiAqL1xuZnVuY3Rpb24gZXJyb3JGdW5jdGlvbih4Lyo6IG51bWJlciAqLykvKjogbnVtYmVyICovIHtcbiAgICB2YXIgdCA9IDEgLyAoMSArIDAuNSAqIE1hdGguYWJzKHgpKTtcbiAgICB2YXIgdGF1ID0gdCAqIE1hdGguZXhwKC1NYXRoLnBvdyh4LCAyKSAtXG4gICAgICAgIDEuMjY1NTEyMjMgK1xuICAgICAgICAxLjAwMDAyMzY4ICogdCArXG4gICAgICAgIDAuMzc0MDkxOTYgKiBNYXRoLnBvdyh0LCAyKSArXG4gICAgICAgIDAuMDk2Nzg0MTggKiBNYXRoLnBvdyh0LCAzKSAtXG4gICAgICAgIDAuMTg2Mjg4MDYgKiBNYXRoLnBvdyh0LCA0KSArXG4gICAgICAgIDAuMjc4ODY4MDcgKiBNYXRoLnBvdyh0LCA1KSAtXG4gICAgICAgIDEuMTM1MjAzOTggKiBNYXRoLnBvdyh0LCA2KSArXG4gICAgICAgIDEuNDg4NTE1ODcgKiBNYXRoLnBvdyh0LCA3KSAtXG4gICAgICAgIDAuODIyMTUyMjMgKiBNYXRoLnBvdyh0LCA4KSArXG4gICAgICAgIDAuMTcwODcyNzcgKiBNYXRoLnBvdyh0LCA5KSk7XG4gICAgaWYgKHggPj0gMCkge1xuICAgICAgICByZXR1cm4gMSAtIHRhdTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGF1IC0gMTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXJyb3JGdW5jdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvZXJyb3JfZnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n * a mean function that is more useful for numbers in different\n * ranges.\n *\n * This is the nth root of the input numbers multiplied by each other.\n *\n * The geometric mean is often useful for\n * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n * mean will incorrectly estimate an average growth rate, whereas a geometric\n * mean will correctly estimate a growth rate that, over those years,\n * will yield the same end value.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input array\n * @returns {number} geometric mean\n * @example\n * var growthRates = [1.80, 1.166666, 1.428571];\n * var averageGrowth = geometricMean(growthRates);\n * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n * var startingValue = 10;\n * var startingValueMean = 10;\n * growthRates.forEach(function(rate) {\n *   startingValue *= rate;\n * });\n * averageGrowthRates.forEach(function(rate) {\n *   startingValueMean *= rate;\n * });\n * startingValueMean === startingValue;\n */\nfunction geometricMean(x /*: Array<number> */) {\n    // The mean of no numbers is null\n    if (x.length === 0) { return undefined; }\n\n    // the starting value.\n    var value = 1;\n\n    for (var i = 0; i < x.length; i++) {\n        // the geometric mean is only valid for positive numbers\n        if (x[i] <= 0) { return undefined; }\n\n        // repeatedly multiply the value by each number\n        value *= x[i];\n    }\n\n    return Math.pow(value, 1 / x.length);\n}\n\nmodule.exports = geometricMean;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9nZW9tZXRyaWNfbWVhbi5qcz9hYTJlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFtHZW9tZXRyaWMgTWVhbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR2VvbWV0cmljX21lYW4pIGlzXG4gKiBhIG1lYW4gZnVuY3Rpb24gdGhhdCBpcyBtb3JlIHVzZWZ1bCBmb3IgbnVtYmVycyBpbiBkaWZmZXJlbnRcbiAqIHJhbmdlcy5cbiAqXG4gKiBUaGlzIGlzIHRoZSBudGggcm9vdCBvZiB0aGUgaW5wdXQgbnVtYmVycyBtdWx0aXBsaWVkIGJ5IGVhY2ggb3RoZXIuXG4gKlxuICogVGhlIGdlb21ldHJpYyBtZWFuIGlzIG9mdGVuIHVzZWZ1bCBmb3JcbiAqICoqW3Byb3BvcnRpb25hbCBncm93dGhdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dlb21ldHJpY19tZWFuI1Byb3BvcnRpb25hbF9ncm93dGgpKio6IGdpdmVuXG4gKiBncm93dGggcmF0ZXMgZm9yIG11bHRpcGxlIHllYXJzLCBsaWtlIF84MCUsIDE2LjY2JSBhbmQgNDIuODUlXywgYSBzaW1wbGVcbiAqIG1lYW4gd2lsbCBpbmNvcnJlY3RseSBlc3RpbWF0ZSBhbiBhdmVyYWdlIGdyb3d0aCByYXRlLCB3aGVyZWFzIGEgZ2VvbWV0cmljXG4gKiBtZWFuIHdpbGwgY29ycmVjdGx5IGVzdGltYXRlIGEgZ3Jvd3RoIHJhdGUgdGhhdCwgb3ZlciB0aG9zZSB5ZWFycyxcbiAqIHdpbGwgeWllbGQgdGhlIHNhbWUgZW5kIHZhbHVlLlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhuKWAsIGxpbmVhciB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIGFycmF5XG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0IGFycmF5XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBnZW9tZXRyaWMgbWVhblxuICogQGV4YW1wbGVcbiAqIHZhciBncm93dGhSYXRlcyA9IFsxLjgwLCAxLjE2NjY2NiwgMS40Mjg1NzFdO1xuICogdmFyIGF2ZXJhZ2VHcm93dGggPSBnZW9tZXRyaWNNZWFuKGdyb3d0aFJhdGVzKTtcbiAqIHZhciBhdmVyYWdlR3Jvd3RoUmF0ZXMgPSBbYXZlcmFnZUdyb3d0aCwgYXZlcmFnZUdyb3d0aCwgYXZlcmFnZUdyb3d0aF07XG4gKiB2YXIgc3RhcnRpbmdWYWx1ZSA9IDEwO1xuICogdmFyIHN0YXJ0aW5nVmFsdWVNZWFuID0gMTA7XG4gKiBncm93dGhSYXRlcy5mb3JFYWNoKGZ1bmN0aW9uKHJhdGUpIHtcbiAqICAgc3RhcnRpbmdWYWx1ZSAqPSByYXRlO1xuICogfSk7XG4gKiBhdmVyYWdlR3Jvd3RoUmF0ZXMuZm9yRWFjaChmdW5jdGlvbihyYXRlKSB7XG4gKiAgIHN0YXJ0aW5nVmFsdWVNZWFuICo9IHJhdGU7XG4gKiB9KTtcbiAqIHN0YXJ0aW5nVmFsdWVNZWFuID09PSBzdGFydGluZ1ZhbHVlO1xuICovXG5mdW5jdGlvbiBnZW9tZXRyaWNNZWFuKHggLyo6IEFycmF5PG51bWJlcj4gKi8pIHtcbiAgICAvLyBUaGUgbWVhbiBvZiBubyBudW1iZXJzIGlzIG51bGxcbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuXG4gICAgLy8gdGhlIHN0YXJ0aW5nIHZhbHVlLlxuICAgIHZhciB2YWx1ZSA9IDE7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gdGhlIGdlb21ldHJpYyBtZWFuIGlzIG9ubHkgdmFsaWQgZm9yIHBvc2l0aXZlIG51bWJlcnNcbiAgICAgICAgaWYgKHhbaV0gPD0gMCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG5cbiAgICAgICAgLy8gcmVwZWF0ZWRseSBtdWx0aXBseSB0aGUgdmFsdWUgYnkgZWFjaCBudW1iZXJcbiAgICAgICAgdmFsdWUgKj0geFtpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5wb3codmFsdWUsIDEgLyB4Lmxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VvbWV0cmljTWVhbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvZ2VvbWV0cmljX21lYW4uanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n * a mean function typically used to find the average of rates.\n * This mean is calculated by taking the reciprocal of the arithmetic mean\n * of the reciprocals of the input numbers.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(n)`, linear time in respect to the array.\n *\n * @param {Array<number>} x input\n * @returns {number} harmonic mean\n * @example\n * harmonicMean([2, 3]).toFixed(2) // => '2.40'\n */\nfunction harmonicMean(x /*: Array<number> */) {\n    // The mean of no numbers is null\n    if (x.length === 0) { return undefined; }\n\n    var reciprocalSum = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        // the harmonic mean is only valid for positive numbers\n        if (x[i] <= 0) { return undefined; }\n\n        reciprocalSum += 1 / x[i];\n    }\n\n    // divide n by the the reciprocal sum\n    return x.length / reciprocalSum;\n}\n\nmodule.exports = harmonicMean;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9oYXJtb25pY19tZWFuLmpzP2JiMzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW0hhcm1vbmljIE1lYW5dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hhcm1vbmljX21lYW4pIGlzXG4gKiBhIG1lYW4gZnVuY3Rpb24gdHlwaWNhbGx5IHVzZWQgdG8gZmluZCB0aGUgYXZlcmFnZSBvZiByYXRlcy5cbiAqIFRoaXMgbWVhbiBpcyBjYWxjdWxhdGVkIGJ5IHRha2luZyB0aGUgcmVjaXByb2NhbCBvZiB0aGUgYXJpdGhtZXRpYyBtZWFuXG4gKiBvZiB0aGUgcmVjaXByb2NhbHMgb2YgdGhlIGlucHV0IG51bWJlcnMuXG4gKlxuICogVGhpcyBpcyBhIFttZWFzdXJlIG9mIGNlbnRyYWwgdGVuZGVuY3ldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NlbnRyYWxfdGVuZGVuY3kpOlxuICogYSBtZXRob2Qgb2YgZmluZGluZyBhIHR5cGljYWwgb3IgY2VudHJhbCB2YWx1ZSBvZiBhIHNldCBvZiBudW1iZXJzLlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhuKWAsIGxpbmVhciB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gaGFybW9uaWMgbWVhblxuICogQGV4YW1wbGVcbiAqIGhhcm1vbmljTWVhbihbMiwgM10pLnRvRml4ZWQoMikgLy8gPT4gJzIuNDAnXG4gKi9cbmZ1bmN0aW9uIGhhcm1vbmljTWVhbih4IC8qOiBBcnJheTxudW1iZXI+ICovKSB7XG4gICAgLy8gVGhlIG1lYW4gb2Ygbm8gbnVtYmVycyBpcyBudWxsXG4gICAgaWYgKHgubGVuZ3RoID09PSAwKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cblxuICAgIHZhciByZWNpcHJvY2FsU3VtID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyB0aGUgaGFybW9uaWMgbWVhbiBpcyBvbmx5IHZhbGlkIGZvciBwb3NpdGl2ZSBudW1iZXJzXG4gICAgICAgIGlmICh4W2ldIDw9IDApIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuXG4gICAgICAgIHJlY2lwcm9jYWxTdW0gKz0gMSAvIHhbaV07XG4gICAgfVxuXG4gICAgLy8gZGl2aWRlIG4gYnkgdGhlIHRoZSByZWNpcHJvY2FsIHN1bVxuICAgIHJldHVybiB4Lmxlbmd0aCAvIHJlY2lwcm9jYWxTdW07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFybW9uaWNNZWFuO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9oYXJtb25pY19tZWFuLmpzXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar quantile = __webpack_require__(11);\n\n/**\n * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n * a measure of statistical dispersion, or how scattered, spread, or\n * concentrated a distribution is. It's computed as the difference between\n * the third quartile and first quartile.\n *\n * @param {Array<number>} sample\n * @returns {number} interquartile range: the span between lower and upper quartile,\n * 0.25 and 0.75\n * @example\n * interquartileRange([0, 1, 2, 3]); // => 2\n */\nfunction interquartileRange(sample/*: Array<number> */) {\n    // Interquartile range is the span between the upper quartile,\n    // at `0.75`, and lower quartile, `0.25`\n    var q1 = quantile(sample, 0.75),\n        q2 = quantile(sample, 0.25);\n\n    if (typeof q1 === 'number' && typeof q2 === 'number') {\n        return q1 - q2;\n    }\n}\n\nmodule.exports = interquartileRange;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvaW50ZXJxdWFydGlsZV9yYW5nZS5qcz9jZjIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBxdWFudGlsZSA9IHJlcXVpcmUoJy4vcXVhbnRpbGUnKTtcblxuLyoqXG4gKiBUaGUgW0ludGVycXVhcnRpbGUgcmFuZ2VdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJxdWFydGlsZV9yYW5nZSkgaXNcbiAqIGEgbWVhc3VyZSBvZiBzdGF0aXN0aWNhbCBkaXNwZXJzaW9uLCBvciBob3cgc2NhdHRlcmVkLCBzcHJlYWQsIG9yXG4gKiBjb25jZW50cmF0ZWQgYSBkaXN0cmlidXRpb24gaXMuIEl0J3MgY29tcHV0ZWQgYXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlblxuICogdGhlIHRoaXJkIHF1YXJ0aWxlIGFuZCBmaXJzdCBxdWFydGlsZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNhbXBsZVxuICogQHJldHVybnMge251bWJlcn0gaW50ZXJxdWFydGlsZSByYW5nZTogdGhlIHNwYW4gYmV0d2VlbiBsb3dlciBhbmQgdXBwZXIgcXVhcnRpbGUsXG4gKiAwLjI1IGFuZCAwLjc1XG4gKiBAZXhhbXBsZVxuICogaW50ZXJxdWFydGlsZVJhbmdlKFswLCAxLCAyLCAzXSk7IC8vID0+IDJcbiAqL1xuZnVuY3Rpb24gaW50ZXJxdWFydGlsZVJhbmdlKHNhbXBsZS8qOiBBcnJheTxudW1iZXI+ICovKSB7XG4gICAgLy8gSW50ZXJxdWFydGlsZSByYW5nZSBpcyB0aGUgc3BhbiBiZXR3ZWVuIHRoZSB1cHBlciBxdWFydGlsZSxcbiAgICAvLyBhdCBgMC43NWAsIGFuZCBsb3dlciBxdWFydGlsZSwgYDAuMjVgXG4gICAgdmFyIHExID0gcXVhbnRpbGUoc2FtcGxlLCAwLjc1KSxcbiAgICAgICAgcTIgPSBxdWFudGlsZShzYW1wbGUsIDAuMjUpO1xuXG4gICAgaWYgKHR5cGVvZiBxMSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHEyID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gcTEgLSBxMjtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJxdWFydGlsZVJhbmdlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9pbnRlcnF1YXJ0aWxlX3JhbmdlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data/*: Array<Array<number>> */)/*: { m: number, b: number } */ {\n\n    var m, b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    var dataLength = data.length;\n\n    //if there's only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        var sumX = 0, sumY = 0,\n            sumXX = 0, sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        var point, x, y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (var i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m = ((dataLength * sumXY) - (sumX * sumY)) /\n            ((dataLength * sumXX) - (sumX * sumX));\n\n        // `b` is the y-intercept of the line.\n        b = (sumY / dataLength) - ((m * sumX) / dataLength);\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\n\nmodule.exports = linearRegression;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbGluZWFyX3JlZ3Jlc3Npb24uanM/MDE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFtTaW1wbGUgbGluZWFyIHJlZ3Jlc3Npb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2ltcGxlX2xpbmVhcl9yZWdyZXNzaW9uKVxuICogaXMgYSBzaW1wbGUgd2F5IHRvIGZpbmQgYSBmaXR0ZWQgbGluZVxuICogYmV0d2VlbiBhIHNldCBvZiBjb29yZGluYXRlcy4gVGhpcyBhbGdvcml0aG0gZmluZHMgdGhlIHNsb3BlIGFuZCB5LWludGVyY2VwdCBvZiBhIHJlZ3Jlc3Npb24gbGluZVxuICogdXNpbmcgdGhlIGxlYXN0IHN1bSBvZiBzcXVhcmVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGRhdGEgYW4gYXJyYXkgb2YgdHdvLWVsZW1lbnQgb2YgYXJyYXlzLFxuICogbGlrZSBgW1swLCAxXSwgWzIsIDNdXWBcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHNsb3BlIGFuZCBpbnRlcnNlY3Qgb2YgcmVncmVzc2lvbiBsaW5lXG4gKiBAZXhhbXBsZVxuICogbGluZWFyUmVncmVzc2lvbihbWzAsIDBdLCBbMSwgMV1dKTsgLy8gPT4geyBtOiAxLCBiOiAwIH1cbiAqL1xuZnVuY3Rpb24gbGluZWFyUmVncmVzc2lvbihkYXRhLyo6IEFycmF5PEFycmF5PG51bWJlcj4+ICovKS8qOiB7IG06IG51bWJlciwgYjogbnVtYmVyIH0gKi8ge1xuXG4gICAgdmFyIG0sIGI7XG5cbiAgICAvLyBTdG9yZSBkYXRhIGxlbmd0aCBpbiBhIGxvY2FsIHZhcmlhYmxlIHRvIHJlZHVjZVxuICAgIC8vIHJlcGVhdGVkIG9iamVjdCBwcm9wZXJ0eSBsb29rdXBzXG4gICAgdmFyIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAgIC8vaWYgdGhlcmUncyBvbmx5IG9uZSBwb2ludCwgYXJiaXRyYXJpbHkgY2hvb3NlIGEgc2xvcGUgb2YgMFxuICAgIC8vYW5kIGEgeS1pbnRlcmNlcHQgb2Ygd2hhdGV2ZXIgdGhlIHkgb2YgdGhlIGluaXRpYWwgcG9pbnQgaXNcbiAgICBpZiAoZGF0YUxlbmd0aCA9PT0gMSkge1xuICAgICAgICBtID0gMDtcbiAgICAgICAgYiA9IGRhdGFbMF1bMV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBvdXIgc3VtcyBhbmQgc2NvcGUgdGhlIGBtYCBhbmQgYGJgXG4gICAgICAgIC8vIHZhcmlhYmxlcyB0aGF0IGRlZmluZSB0aGUgbGluZS5cbiAgICAgICAgdmFyIHN1bVggPSAwLCBzdW1ZID0gMCxcbiAgICAgICAgICAgIHN1bVhYID0gMCwgc3VtWFkgPSAwO1xuXG4gICAgICAgIC8vIFVzZSBsb2NhbCB2YXJpYWJsZXMgdG8gZ3JhYiBwb2ludCB2YWx1ZXNcbiAgICAgICAgLy8gd2l0aCBtaW5pbWFsIG9iamVjdCBwcm9wZXJ0eSBsb29rdXBzXG4gICAgICAgIHZhciBwb2ludCwgeCwgeTtcblxuICAgICAgICAvLyBHYXRoZXIgdGhlIHN1bSBvZiBhbGwgeCB2YWx1ZXMsIHRoZSBzdW0gb2YgYWxsXG4gICAgICAgIC8vIHkgdmFsdWVzLCBhbmQgdGhlIHN1bSBvZiB4XjIgYW5kICh4KnkpIGZvciBlYWNoXG4gICAgICAgIC8vIHZhbHVlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJbiBtYXRoIG5vdGF0aW9uLCB0aGVzZSB3b3VsZCBiZSBTU194LCBTU195LCBTU194eCwgYW5kIFNTX3h5XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwb2ludCA9IGRhdGFbaV07XG4gICAgICAgICAgICB4ID0gcG9pbnRbMF07XG4gICAgICAgICAgICB5ID0gcG9pbnRbMV07XG5cbiAgICAgICAgICAgIHN1bVggKz0geDtcbiAgICAgICAgICAgIHN1bVkgKz0geTtcblxuICAgICAgICAgICAgc3VtWFggKz0geCAqIHg7XG4gICAgICAgICAgICBzdW1YWSArPSB4ICogeTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGBtYCBpcyB0aGUgc2xvcGUgb2YgdGhlIHJlZ3Jlc3Npb24gbGluZVxuICAgICAgICBtID0gKChkYXRhTGVuZ3RoICogc3VtWFkpIC0gKHN1bVggKiBzdW1ZKSkgL1xuICAgICAgICAgICAgKChkYXRhTGVuZ3RoICogc3VtWFgpIC0gKHN1bVggKiBzdW1YKSk7XG5cbiAgICAgICAgLy8gYGJgIGlzIHRoZSB5LWludGVyY2VwdCBvZiB0aGUgbGluZS5cbiAgICAgICAgYiA9IChzdW1ZIC8gZGF0YUxlbmd0aCkgLSAoKG0gKiBzdW1YKSAvIGRhdGFMZW5ndGgpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBib3RoIHZhbHVlcyBhcyBhbiBvYmplY3QuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbTogbSxcbiAgICAgICAgYjogYlxuICAgIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBsaW5lYXJSZWdyZXNzaW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9saW5lYXJfcmVncmVzc2lvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\nfunction linearRegressionLine(mb/*: { b: number, m: number }*/)/*: Function */ {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function(x) {\n        return mb.b + (mb.m * x);\n    };\n}\n\nmodule.exports = linearRegressionLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbGluZWFyX3JlZ3Jlc3Npb25fbGluZS5qcz84NTAwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogR2l2ZW4gdGhlIG91dHB1dCBvZiBgbGluZWFyUmVncmVzc2lvbmA6IGFuIG9iamVjdFxuICogd2l0aCBgbWAgYW5kIGBiYCB2YWx1ZXMgaW5kaWNhdGluZyBzbG9wZSBhbmQgaW50ZXJjZXB0LFxuICogcmVzcGVjdGl2ZWx5LCBnZW5lcmF0ZSBhIGxpbmUgZnVuY3Rpb24gdGhhdCB0cmFuc2xhdGVzXG4gKiB4IHZhbHVlcyBpbnRvIHkgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYiBvYmplY3Qgd2l0aCBgbWAgYW5kIGBiYCBtZW1iZXJzLCByZXByZXNlbnRpbmdcbiAqIHNsb3BlIGFuZCBpbnRlcnNlY3Qgb2YgZGVzaXJlZCBsaW5lXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IG1ldGhvZCB0aGF0IGNvbXB1dGVzIHktdmFsdWUgYXQgYW55IGdpdmVuXG4gKiB4LXZhbHVlIG9uIHRoZSBsaW5lLlxuICogQGV4YW1wbGVcbiAqIHZhciBsID0gbGluZWFyUmVncmVzc2lvbkxpbmUobGluZWFyUmVncmVzc2lvbihbWzAsIDBdLCBbMSwgMV1dKSk7XG4gKiBsKDApIC8vID0gMFxuICogbCgyKSAvLyA9IDJcbiAqIGxpbmVhclJlZ3Jlc3Npb25MaW5lKHsgYjogMCwgbTogMSB9KSgxKTsgLy8gPT4gMVxuICogbGluZWFyUmVncmVzc2lvbkxpbmUoeyBiOiAxLCBtOiAxIH0pKDEpOyAvLyA9PiAyXG4gKi9cbmZ1bmN0aW9uIGxpbmVhclJlZ3Jlc3Npb25MaW5lKG1iLyo6IHsgYjogbnVtYmVyLCBtOiBudW1iZXIgfSovKS8qOiBGdW5jdGlvbiAqLyB7XG4gICAgLy8gUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBjb21wdXRlcyBhIGB5YCB2YWx1ZSBmb3IgZWFjaFxuICAgIC8vIHggdmFsdWUgaXQgaXMgZ2l2ZW4sIGJhc2VkIG9uIHRoZSB2YWx1ZXMgb2YgYGJgIGFuZCBgYWBcbiAgICAvLyB0aGF0IHdlIGp1c3QgY29tcHV0ZWQuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIG1iLmIgKyAobWIubSAqIHgpO1xuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGluZWFyUmVncmVzc2lvbkxpbmU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL2xpbmVhcl9yZWdyZXNzaW9uX2xpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDEwMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The maximum is the highest number in the array. With a sorted array,\n * the last element in the array is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * maxSorted([-100, -10, 1, 2, 5]); // => 5\n */\nfunction maxSorted(x /*: Array<number> */)/*:number*/ {\n    return x[x.length - 1];\n}\n\nmodule.exports = maxSorted;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbWF4X3NvcnRlZC5qcz9kZjc0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIG1heGltdW0gaXMgdGhlIGhpZ2hlc3QgbnVtYmVyIGluIHRoZSBhcnJheS4gV2l0aCBhIHNvcnRlZCBhcnJheSxcbiAqIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGFycmF5IGlzIGFsd2F5cyB0aGUgbGFyZ2VzdCwgc28gdGhpcyBjYWxjdWxhdGlvblxuICogY2FuIGJlIGRvbmUgaW4gb25lIHN0ZXAsIG9yIGNvbnN0YW50IHRpbWUuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJucyB7bnVtYmVyfSBtYXhpbXVtIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogbWF4U29ydGVkKFstMTAwLCAtMTAsIDEsIDIsIDVdKTsgLy8gPT4gNVxuICovXG5mdW5jdGlvbiBtYXhTb3J0ZWQoeCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgcmV0dXJuIHhbeC5sZW5ndGggLSAxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXhTb3J0ZWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21heF9zb3J0ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDEwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar median = __webpack_require__(31);\n\n/**\n * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n * a robust measure of statistical\n * dispersion. It is more resilient to outliers than the standard deviation.\n *\n * @param {Array<number>} x input array\n * @returns {number} median absolute deviation\n * @example\n * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1\n */\nfunction medianAbsoluteDeviation(x /*: Array<number> */) {\n    // The mad of nothing is null\n    var medianValue = median(x),\n        medianAbsoluteDeviations = [];\n\n    // Make a list of absolute deviations from the median\n    for (var i = 0; i < x.length; i++) {\n        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n    }\n\n    // Find the median value of that list\n    return median(medianAbsoluteDeviations);\n}\n\nmodule.exports = medianAbsoluteDeviation;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbWVkaWFuX2Fic29sdXRlX2RldmlhdGlvbi5qcz81NDNlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBtZWRpYW4gPSByZXF1aXJlKCcuL21lZGlhbicpO1xuXG4vKipcbiAqIFRoZSBbTWVkaWFuIEFic29sdXRlIERldmlhdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZWRpYW5fYWJzb2x1dGVfZGV2aWF0aW9uKSBpc1xuICogYSByb2J1c3QgbWVhc3VyZSBvZiBzdGF0aXN0aWNhbFxuICogZGlzcGVyc2lvbi4gSXQgaXMgbW9yZSByZXNpbGllbnQgdG8gb3V0bGllcnMgdGhhbiB0aGUgc3RhbmRhcmQgZGV2aWF0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dCBhcnJheVxuICogQHJldHVybnMge251bWJlcn0gbWVkaWFuIGFic29sdXRlIGRldmlhdGlvblxuICogQGV4YW1wbGVcbiAqIG1lZGlhbkFic29sdXRlRGV2aWF0aW9uKFsxLCAxLCAyLCAyLCA0LCA2LCA5XSk7IC8vID0+IDFcbiAqL1xuZnVuY3Rpb24gbWVkaWFuQWJzb2x1dGVEZXZpYXRpb24oeCAvKjogQXJyYXk8bnVtYmVyPiAqLykge1xuICAgIC8vIFRoZSBtYWQgb2Ygbm90aGluZyBpcyBudWxsXG4gICAgdmFyIG1lZGlhblZhbHVlID0gbWVkaWFuKHgpLFxuICAgICAgICBtZWRpYW5BYnNvbHV0ZURldmlhdGlvbnMgPSBbXTtcblxuICAgIC8vIE1ha2UgYSBsaXN0IG9mIGFic29sdXRlIGRldmlhdGlvbnMgZnJvbSB0aGUgbWVkaWFuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1lZGlhbkFic29sdXRlRGV2aWF0aW9ucy5wdXNoKE1hdGguYWJzKHhbaV0gLSBtZWRpYW5WYWx1ZSkpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgdGhlIG1lZGlhbiB2YWx1ZSBvZiB0aGF0IGxpc3RcbiAgICByZXR1cm4gbWVkaWFuKG1lZGlhbkFic29sdXRlRGV2aWF0aW9ucyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVkaWFuQWJzb2x1dGVEZXZpYXRpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21lZGlhbl9hYnNvbHV0ZV9kZXZpYXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar quantileSorted = __webpack_require__(12);\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} sorted input\n * @returns {number} median value\n * @example\n * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5\n */\nfunction medianSorted(sorted /*: Array<number> */)/*:number*/ {\n    return quantileSorted(sorted, 0.5);\n}\n\nmodule.exports = medianSorted;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbWVkaWFuX3NvcnRlZC5qcz81MmRmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBxdWFudGlsZVNvcnRlZCA9IHJlcXVpcmUoJy4vcXVhbnRpbGVfc29ydGVkJyk7XG5cbi8qKlxuICogVGhlIFttZWRpYW5dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVkaWFuKSBpc1xuICogdGhlIG1pZGRsZSBudW1iZXIgb2YgYSBsaXN0LiBUaGlzIGlzIG9mdGVuIGEgZ29vZCBpbmRpY2F0b3Igb2YgJ3RoZSBtaWRkbGUnXG4gKiB3aGVuIHRoZXJlIGFyZSBvdXRsaWVycyB0aGF0IHNrZXcgdGhlIGBtZWFuKClgIHZhbHVlLlxuICogVGhpcyBpcyBhIFttZWFzdXJlIG9mIGNlbnRyYWwgdGVuZGVuY3ldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NlbnRyYWxfdGVuZGVuY3kpOlxuICogYSBtZXRob2Qgb2YgZmluZGluZyBhIHR5cGljYWwgb3IgY2VudHJhbCB2YWx1ZSBvZiBhIHNldCBvZiBudW1iZXJzLlxuICpcbiAqIFRoZSBtZWRpYW4gaXNuJ3QgbmVjZXNzYXJpbHkgb25lIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgbGlzdDogdGhlIHZhbHVlXG4gKiBjYW4gYmUgdGhlIGF2ZXJhZ2Ugb2YgdHdvIGVsZW1lbnRzIGlmIHRoZSBsaXN0IGhhcyBhbiBldmVuIGxlbmd0aFxuICogYW5kIHRoZSB0d28gY2VudHJhbCB2YWx1ZXMgYXJlIGRpZmZlcmVudC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNvcnRlZCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gbWVkaWFuIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogbWVkaWFuU29ydGVkKFsxMCwgMiwgNSwgMTAwLCAyLCAxXSk7IC8vID0+IDUyLjVcbiAqL1xuZnVuY3Rpb24gbWVkaWFuU29ydGVkKHNvcnRlZCAvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgcmV0dXJuIHF1YW50aWxlU29ydGVkKHNvcnRlZCwgMC41KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZWRpYW5Tb3J0ZWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21lZGlhbl9zb3J0ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDEwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The minimum is the lowest number in the array. With a sorted array,\n * the first element in the array is always the smallest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * minSorted([-100, -10, 1, 2, 5]); // => -100\n */\nfunction minSorted(x /*: Array<number> */)/*:number*/ {\n    return x[0];\n}\n\nmodule.exports = minSorted;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbWluX3NvcnRlZC5qcz9iZDk5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIG1pbmltdW0gaXMgdGhlIGxvd2VzdCBudW1iZXIgaW4gdGhlIGFycmF5LiBXaXRoIGEgc29ydGVkIGFycmF5LFxuICogdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGFycmF5IGlzIGFsd2F5cyB0aGUgc21hbGxlc3QsIHNvIHRoaXMgY2FsY3VsYXRpb25cbiAqIGNhbiBiZSBkb25lIGluIG9uZSBzdGVwLCBvciBjb25zdGFudCB0aW1lLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gbWluaW11bSB2YWx1ZVxuICogQGV4YW1wbGVcbiAqIG1pblNvcnRlZChbLTEwMCwgLTEwLCAxLCAyLCA1XSk7IC8vID0+IC0xMDBcbiAqL1xuZnVuY3Rpb24gbWluU29ydGVkKHggLyo6IEFycmF5PG51bWJlcj4gKi8pLyo6bnVtYmVyKi8ge1xuICAgIHJldHVybiB4WzBdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1pblNvcnRlZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbWluX3NvcnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * **Mixin** simple_statistics to a single Array instance if provided\n * or the Array native object if not. This is an optional\n * feature that lets you treat simple_statistics as a native feature\n * of Javascript.\n *\n * @param {Object} ss simple statistics\n * @param {Array} [array=] a single array instance which will be augmented\n * with the extra methods. If omitted, mixin will apply to all arrays\n * by changing the global `Array.prototype`.\n * @returns {*} the extended Array, or Array.prototype if no object\n * is given.\n *\n * @example\n * var myNumbers = [1, 2, 3];\n * mixin(ss, myNumbers);\n * console.log(myNumbers.sum()); // 6\n */\nfunction mixin(ss /*: Object */, array /*: ?Array<any> */)/*: any */ {\n    var support = !!(Object.defineProperty && Object.defineProperties);\n    // Coverage testing will never test this error.\n    /* istanbul ignore next */\n    if (!support) {\n        throw new Error('without defineProperty, simple-statistics cannot be mixed in');\n    }\n\n    // only methods which work on basic arrays in a single step\n    // are supported\n    var arrayMethods = ['median', 'standardDeviation', 'sum', 'product',\n        'sampleSkewness',\n        'mean', 'min', 'max', 'quantile', 'geometricMean',\n        'harmonicMean', 'root_mean_square'];\n\n    // create a closure with a method name so that a reference\n    // like `arrayMethods[i]` doesn't follow the loop increment\n    function wrap(method) {\n        return function() {\n            // cast any arguments into an array, since they're\n            // natively objects\n            var args = Array.prototype.slice.apply(arguments);\n            // make the first argument the array itself\n            args.unshift(this);\n            // return the result of the ss method\n            return ss[method].apply(ss, args);\n        };\n    }\n\n    // select object to extend\n    var extending;\n    if (array) {\n        // create a shallow copy of the array so that our internal\n        // operations do not change it by reference\n        extending = array.slice();\n    } else {\n        extending = Array.prototype;\n    }\n\n    // for each array function, define a function that gets\n    // the array as the first argument.\n    // We use [defineProperty](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty)\n    // because it allows these properties to be non-enumerable:\n    // `for (var in x)` loops will not run into problems with this\n    // implementation.\n    for (var i = 0; i < arrayMethods.length; i++) {\n        Object.defineProperty(extending, arrayMethods[i], {\n            value: wrap(arrayMethods[i]),\n            configurable: true,\n            enumerable: false,\n            writable: true\n        });\n    }\n\n    return extending;\n}\n\nmodule.exports = mixin;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbWl4aW4uanM/MzVlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqICoqTWl4aW4qKiBzaW1wbGVfc3RhdGlzdGljcyB0byBhIHNpbmdsZSBBcnJheSBpbnN0YW5jZSBpZiBwcm92aWRlZFxuICogb3IgdGhlIEFycmF5IG5hdGl2ZSBvYmplY3QgaWYgbm90LiBUaGlzIGlzIGFuIG9wdGlvbmFsXG4gKiBmZWF0dXJlIHRoYXQgbGV0cyB5b3UgdHJlYXQgc2ltcGxlX3N0YXRpc3RpY3MgYXMgYSBuYXRpdmUgZmVhdHVyZVxuICogb2YgSmF2YXNjcmlwdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3Mgc2ltcGxlIHN0YXRpc3RpY3NcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1dIGEgc2luZ2xlIGFycmF5IGluc3RhbmNlIHdoaWNoIHdpbGwgYmUgYXVnbWVudGVkXG4gKiB3aXRoIHRoZSBleHRyYSBtZXRob2RzLiBJZiBvbWl0dGVkLCBtaXhpbiB3aWxsIGFwcGx5IHRvIGFsbCBhcnJheXNcbiAqIGJ5IGNoYW5naW5nIHRoZSBnbG9iYWwgYEFycmF5LnByb3RvdHlwZWAuXG4gKiBAcmV0dXJucyB7Kn0gdGhlIGV4dGVuZGVkIEFycmF5LCBvciBBcnJheS5wcm90b3R5cGUgaWYgbm8gb2JqZWN0XG4gKiBpcyBnaXZlbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogdmFyIG15TnVtYmVycyA9IFsxLCAyLCAzXTtcbiAqIG1peGluKHNzLCBteU51bWJlcnMpO1xuICogY29uc29sZS5sb2cobXlOdW1iZXJzLnN1bSgpKTsgLy8gNlxuICovXG5mdW5jdGlvbiBtaXhpbihzcyAvKjogT2JqZWN0ICovLCBhcnJheSAvKjogP0FycmF5PGFueT4gKi8pLyo6IGFueSAqLyB7XG4gICAgdmFyIHN1cHBvcnQgPSAhIShPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMpO1xuICAgIC8vIENvdmVyYWdlIHRlc3Rpbmcgd2lsbCBuZXZlciB0ZXN0IHRoaXMgZXJyb3IuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoIXN1cHBvcnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aXRob3V0IGRlZmluZVByb3BlcnR5LCBzaW1wbGUtc3RhdGlzdGljcyBjYW5ub3QgYmUgbWl4ZWQgaW4nKTtcbiAgICB9XG5cbiAgICAvLyBvbmx5IG1ldGhvZHMgd2hpY2ggd29yayBvbiBiYXNpYyBhcnJheXMgaW4gYSBzaW5nbGUgc3RlcFxuICAgIC8vIGFyZSBzdXBwb3J0ZWRcbiAgICB2YXIgYXJyYXlNZXRob2RzID0gWydtZWRpYW4nLCAnc3RhbmRhcmREZXZpYXRpb24nLCAnc3VtJywgJ3Byb2R1Y3QnLFxuICAgICAgICAnc2FtcGxlU2tld25lc3MnLFxuICAgICAgICAnbWVhbicsICdtaW4nLCAnbWF4JywgJ3F1YW50aWxlJywgJ2dlb21ldHJpY01lYW4nLFxuICAgICAgICAnaGFybW9uaWNNZWFuJywgJ3Jvb3RfbWVhbl9zcXVhcmUnXTtcblxuICAgIC8vIGNyZWF0ZSBhIGNsb3N1cmUgd2l0aCBhIG1ldGhvZCBuYW1lIHNvIHRoYXQgYSByZWZlcmVuY2VcbiAgICAvLyBsaWtlIGBhcnJheU1ldGhvZHNbaV1gIGRvZXNuJ3QgZm9sbG93IHRoZSBsb29wIGluY3JlbWVudFxuICAgIGZ1bmN0aW9uIHdyYXAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNhc3QgYW55IGFyZ3VtZW50cyBpbnRvIGFuIGFycmF5LCBzaW5jZSB0aGV5J3JlXG4gICAgICAgICAgICAvLyBuYXRpdmVseSBvYmplY3RzXG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgZmlyc3QgYXJndW1lbnQgdGhlIGFycmF5IGl0c2VsZlxuICAgICAgICAgICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIHNzIG1ldGhvZFxuICAgICAgICAgICAgcmV0dXJuIHNzW21ldGhvZF0uYXBwbHkoc3MsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIHNlbGVjdCBvYmplY3QgdG8gZXh0ZW5kXG4gICAgdmFyIGV4dGVuZGluZztcbiAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgLy8gY3JlYXRlIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBhcnJheSBzbyB0aGF0IG91ciBpbnRlcm5hbFxuICAgICAgICAvLyBvcGVyYXRpb25zIGRvIG5vdCBjaGFuZ2UgaXQgYnkgcmVmZXJlbmNlXG4gICAgICAgIGV4dGVuZGluZyA9IGFycmF5LnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZXh0ZW5kaW5nID0gQXJyYXkucHJvdG90eXBlO1xuICAgIH1cblxuICAgIC8vIGZvciBlYWNoIGFycmF5IGZ1bmN0aW9uLCBkZWZpbmUgYSBmdW5jdGlvbiB0aGF0IGdldHNcbiAgICAvLyB0aGUgYXJyYXkgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgIC8vIFdlIHVzZSBbZGVmaW5lUHJvcGVydHldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2RlZmluZVByb3BlcnR5KVxuICAgIC8vIGJlY2F1c2UgaXQgYWxsb3dzIHRoZXNlIHByb3BlcnRpZXMgdG8gYmUgbm9uLWVudW1lcmFibGU6XG4gICAgLy8gYGZvciAodmFyIGluIHgpYCBsb29wcyB3aWxsIG5vdCBydW4gaW50byBwcm9ibGVtcyB3aXRoIHRoaXNcbiAgICAvLyBpbXBsZW1lbnRhdGlvbi5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5TWV0aG9kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXh0ZW5kaW5nLCBhcnJheU1ldGhvZHNbaV0sIHtcbiAgICAgICAgICAgIHZhbHVlOiB3cmFwKGFycmF5TWV0aG9kc1tpXSksXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBleHRlbmRpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWl4aW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21peGluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar numericSort = __webpack_require__(34),\n    modeSorted = __webpack_require__(33);\n\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(nlog(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\nfunction mode(x /*: Array<number> */)/*:number*/ {\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it's new and we'll never\n    // see the same number twice\n    return modeSorted(numericSort(x));\n}\n\nmodule.exports = mode;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbW9kZS5qcz8zOWRkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbnZhciBudW1lcmljU29ydCA9IHJlcXVpcmUoJy4vbnVtZXJpY19zb3J0JyksXG4gICAgbW9kZVNvcnRlZCA9IHJlcXVpcmUoJy4vbW9kZV9zb3J0ZWQnKTtcblxuLyoqXG4gKiBUaGUgW21vZGVdKGh0dHA6Ly9iaXQubHkvVzVLNFl0KSBpcyB0aGUgbnVtYmVyIHRoYXQgYXBwZWFycyBpbiBhIGxpc3QgdGhlIGhpZ2hlc3QgbnVtYmVyIG9mIHRpbWVzLlxuICogVGhlcmUgY2FuIGJlIG11bHRpcGxlIG1vZGVzIGluIGEgbGlzdDogaW4gdGhlIGV2ZW50IG9mIGEgdGllLCB0aGlzXG4gKiBhbGdvcml0aG0gd2lsbCByZXR1cm4gdGhlIG1vc3QgcmVjZW50bHkgc2VlbiBtb2RlLlxuICpcbiAqIFRoaXMgaXMgYSBbbWVhc3VyZSBvZiBjZW50cmFsIHRlbmRlbmN5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DZW50cmFsX3RlbmRlbmN5KTpcbiAqIGEgbWV0aG9kIG9mIGZpbmRpbmcgYSB0eXBpY2FsIG9yIGNlbnRyYWwgdmFsdWUgb2YgYSBzZXQgb2YgbnVtYmVycy5cbiAqXG4gKiBUaGlzIHJ1bnMgb24gYE8obmxvZyhuKSlgIGJlY2F1c2UgaXQgbmVlZHMgdG8gc29ydCB0aGUgYXJyYXkgaW50ZXJuYWxseVxuICogYmVmb3JlIHJ1bm5pbmcgYW4gYE8obilgIHNlYXJjaCB0byBmaW5kIHRoZSBtb2RlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gbW9kZVxuICogQGV4YW1wbGVcbiAqIG1vZGUoWzAsIDAsIDFdKTsgLy8gPT4gMFxuICovXG5mdW5jdGlvbiBtb2RlKHggLyo6IEFycmF5PG51bWJlcj4gKi8pLyo6bnVtYmVyKi8ge1xuICAgIC8vIFNvcnRpbmcgdGhlIGFycmF5IGxldHMgdXMgaXRlcmF0ZSB0aHJvdWdoIGl0IGJlbG93IGFuZCBiZSBzdXJlXG4gICAgLy8gdGhhdCBldmVyeSB0aW1lIHdlIHNlZSBhIG5ldyBudW1iZXIgaXQncyBuZXcgYW5kIHdlJ2xsIG5ldmVyXG4gICAgLy8gc2VlIHRoZSBzYW1lIG51bWJlciB0d2ljZVxuICAgIHJldHVybiBtb2RlU29ydGVkKG51bWVyaWNTb3J0KHgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2RlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9tb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n/* globals Map: false */\n\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x input\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast/*::<T>*/(x /*: Array<T> */)/*: ?T */ {\n\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    var index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    var mode;\n    var modeCount = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        var newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    return mode;\n}\n\nmodule.exports = modeFast;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvbW9kZV9mYXN0LmpzPzU5YTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cbi8qIGdsb2JhbHMgTWFwOiBmYWxzZSAqL1xuXG4vKipcbiAqIFRoZSBbbW9kZV0oaHR0cDovL2JpdC5seS9XNUs0WXQpIGlzIHRoZSBudW1iZXIgdGhhdCBhcHBlYXJzIGluIGEgbGlzdCB0aGUgaGlnaGVzdCBudW1iZXIgb2YgdGltZXMuXG4gKiBUaGVyZSBjYW4gYmUgbXVsdGlwbGUgbW9kZXMgaW4gYSBsaXN0OiBpbiB0aGUgZXZlbnQgb2YgYSB0aWUsIHRoaXNcbiAqIGFsZ29yaXRobSB3aWxsIHJldHVybiB0aGUgbW9zdCByZWNlbnRseSBzZWVuIG1vZGUuXG4gKlxuICogbW9kZUZhc3QgdXNlcyBhIE1hcCBvYmplY3QgdG8ga2VlcCB0cmFjayBvZiB0aGUgbW9kZSwgaW5zdGVhZCBvZiB0aGUgYXBwcm9hY2hcbiAqIHVzZWQgd2l0aCBgbW9kZWAsIGEgc29ydGVkIGFycmF5LiBBcyBhIHJlc3VsdCwgaXQgaXMgZmFzdGVyXG4gKiB0aGFuIGBtb2RlYCBhbmQgc3VwcG9ydHMgYW55IGRhdGEgdHlwZSB0aGF0IGNhbiBiZSBjb21wYXJlZCB3aXRoIGA9PWAuXG4gKiBJdCBhbHNvIHJlcXVpcmVzIGFcbiAqIFtKYXZhU2NyaXB0IGVudmlyb25tZW50IHdpdGggc3VwcG9ydCBmb3IgTWFwXShodHRwczovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8jdGVzdC1NYXApLFxuICogYW5kIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgTWFwIGlzIG5vdCBhdmFpbGFibGUuXG4gKlxuICogVGhpcyBpcyBhIFttZWFzdXJlIG9mIGNlbnRyYWwgdGVuZGVuY3ldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NlbnRyYWxfdGVuZGVuY3kpOlxuICogYSBtZXRob2Qgb2YgZmluZGluZyBhIHR5cGljYWwgb3IgY2VudHJhbCB2YWx1ZSBvZiBhIHNldCBvZiBudW1iZXJzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8Kj59IHggaW5wdXRcbiAqIEByZXR1cm5zIHs/Kn0gbW9kZVxuICogQHRocm93cyB7UmVmZXJlbmNlRXJyb3J9IGlmIHRoZSBKYXZhU2NyaXB0IGVudmlyb25tZW50IGRvZXNuJ3Qgc3VwcG9ydCBNYXBcbiAqIEBleGFtcGxlXG4gKiBtb2RlRmFzdChbJ3JhYmJpdHMnLCAncmFiYml0cycsICdzcXVpcnJlbHMnXSk7IC8vID0+ICdyYWJiaXRzJ1xuICovXG5mdW5jdGlvbiBtb2RlRmFzdC8qOjo8VD4qLyh4IC8qOiBBcnJheTxUPiAqLykvKjogP1QgKi8ge1xuXG4gICAgLy8gVGhpcyBpbmRleCB3aWxsIHJlZmxlY3QgdGhlIGluY2lkZW5jZSBvZiBkaWZmZXJlbnQgdmFsdWVzLCBpbmRleGluZ1xuICAgIC8vIHRoZW0gbGlrZVxuICAgIC8vIHsgdmFsdWU6IGNvdW50IH1cbiAgICB2YXIgaW5kZXggPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBBIHJ1bm5pbmcgYG1vZGVgIGFuZCB0aGUgbnVtYmVyIG9mIHRpbWVzIGl0IGhhcyBiZWVuIGVuY291bnRlcmVkLlxuICAgIHZhciBtb2RlO1xuICAgIHZhciBtb2RlQ291bnQgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDb3VudCA9IGluZGV4LmdldCh4W2ldKTtcbiAgICAgICAgaWYgKG5ld0NvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld0NvdW50ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0NvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0NvdW50ID4gbW9kZUNvdW50KSB7XG4gICAgICAgICAgICBtb2RlID0geFtpXTtcbiAgICAgICAgICAgIG1vZGVDb3VudCA9IG5ld0NvdW50O1xuICAgICAgICB9XG4gICAgICAgIGluZGV4LnNldCh4W2ldLCBuZXdDb3VudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW9kZUZhc3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL21vZGVfZmFzdC5qc1xuLy8gbW9kdWxlIGlkID0gMTA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n * arrays of numbers and predicts whether they should be classified\n * as either 0 or 1 (negative or positive examples).\n * @class\n * @example\n * // Create the model\n * var p = new PerceptronModel();\n * // Train the model with input with a diagonal boundary.\n * for (var i = 0; i < 5; i++) {\n *     p.train([1, 1], 1);\n *     p.train([0, 1], 0);\n *     p.train([1, 0], 0);\n *     p.train([0, 0], 0);\n * }\n * p.predict([0, 0]); // 0\n * p.predict([0, 1]); // 0\n * p.predict([1, 0]); // 0\n * p.predict([1, 1]); // 1\n */\nfunction PerceptronModel() {\n    // The weights, or coefficients of the model;\n    // weights are only populated when training with data.\n    this.weights = [];\n    // The bias term, or intercept; it is also a weight but\n    // it's stored separately for convenience as it is always\n    // multiplied by one.\n    this.bias = 0;\n}\n\n/**\n * **Predict**: Use an array of features with the weight array and bias\n * to predict whether an example is labeled 0 or 1.\n *\n * @param {Array<number>} features an array of features as numbers\n * @returns {number} 1 if the score is over 0, otherwise 0\n */\nPerceptronModel.prototype.predict = function(features) {\n\n    // Only predict if previously trained\n    // on the same size feature array(s).\n    if (features.length !== this.weights.length) { return null; }\n\n    // Calculate the sum of features times weights,\n    // with the bias added (implicitly times one).\n    var score = 0;\n    for (var i = 0; i < this.weights.length; i++) {\n        score += this.weights[i] * features[i];\n    }\n    score += this.bias;\n\n    // Classify as 1 if the score is over 0, otherwise 0.\n    if (score > 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n};\n\n/**\n * **Train** the classifier with a new example, which is\n * a numeric array of features and a 0 or 1 label.\n *\n * @param {Array<number>} features an array of features as numbers\n * @param {number} label either 0 or 1\n * @returns {PerceptronModel} this\n */\nPerceptronModel.prototype.train = function(features, label) {\n    // Require that only labels of 0 or 1 are considered.\n    if (label !== 0 && label !== 1) { return null; }\n    // The length of the feature array determines\n    // the length of the weight array.\n    // The perceptron will continue learning as long as\n    // it keeps seeing feature arrays of the same length.\n    // When it sees a new data shape, it initializes.\n    if (features.length !== this.weights.length) {\n        this.weights = features;\n        this.bias = 1;\n    }\n    // Make a prediction based on current weights.\n    var prediction = this.predict(features);\n    // Update the weights if the prediction is wrong.\n    if (prediction !== label) {\n        var gradient = label - prediction;\n        for (var i = 0; i < this.weights.length; i++) {\n            this.weights[i] += gradient * features[i];\n        }\n        this.bias += gradient;\n    }\n    return this;\n};\n\nmodule.exports = PerceptronModel;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcGVyY2VwdHJvbi5qcz80MGI4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhpcyBpcyBhIHNpbmdsZS1sYXllciBbUGVyY2VwdHJvbiBDbGFzc2lmaWVyXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BlcmNlcHRyb24pIHRoYXQgdGFrZXNcbiAqIGFycmF5cyBvZiBudW1iZXJzIGFuZCBwcmVkaWN0cyB3aGV0aGVyIHRoZXkgc2hvdWxkIGJlIGNsYXNzaWZpZWRcbiAqIGFzIGVpdGhlciAwIG9yIDEgKG5lZ2F0aXZlIG9yIHBvc2l0aXZlIGV4YW1wbGVzKS5cbiAqIEBjbGFzc1xuICogQGV4YW1wbGVcbiAqIC8vIENyZWF0ZSB0aGUgbW9kZWxcbiAqIHZhciBwID0gbmV3IFBlcmNlcHRyb25Nb2RlbCgpO1xuICogLy8gVHJhaW4gdGhlIG1vZGVsIHdpdGggaW5wdXQgd2l0aCBhIGRpYWdvbmFsIGJvdW5kYXJ5LlxuICogZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAqICAgICBwLnRyYWluKFsxLCAxXSwgMSk7XG4gKiAgICAgcC50cmFpbihbMCwgMV0sIDApO1xuICogICAgIHAudHJhaW4oWzEsIDBdLCAwKTtcbiAqICAgICBwLnRyYWluKFswLCAwXSwgMCk7XG4gKiB9XG4gKiBwLnByZWRpY3QoWzAsIDBdKTsgLy8gMFxuICogcC5wcmVkaWN0KFswLCAxXSk7IC8vIDBcbiAqIHAucHJlZGljdChbMSwgMF0pOyAvLyAwXG4gKiBwLnByZWRpY3QoWzEsIDFdKTsgLy8gMVxuICovXG5mdW5jdGlvbiBQZXJjZXB0cm9uTW9kZWwoKSB7XG4gICAgLy8gVGhlIHdlaWdodHMsIG9yIGNvZWZmaWNpZW50cyBvZiB0aGUgbW9kZWw7XG4gICAgLy8gd2VpZ2h0cyBhcmUgb25seSBwb3B1bGF0ZWQgd2hlbiB0cmFpbmluZyB3aXRoIGRhdGEuXG4gICAgdGhpcy53ZWlnaHRzID0gW107XG4gICAgLy8gVGhlIGJpYXMgdGVybSwgb3IgaW50ZXJjZXB0OyBpdCBpcyBhbHNvIGEgd2VpZ2h0IGJ1dFxuICAgIC8vIGl0J3Mgc3RvcmVkIHNlcGFyYXRlbHkgZm9yIGNvbnZlbmllbmNlIGFzIGl0IGlzIGFsd2F5c1xuICAgIC8vIG11bHRpcGxpZWQgYnkgb25lLlxuICAgIHRoaXMuYmlhcyA9IDA7XG59XG5cbi8qKlxuICogKipQcmVkaWN0Kio6IFVzZSBhbiBhcnJheSBvZiBmZWF0dXJlcyB3aXRoIHRoZSB3ZWlnaHQgYXJyYXkgYW5kIGJpYXNcbiAqIHRvIHByZWRpY3Qgd2hldGhlciBhbiBleGFtcGxlIGlzIGxhYmVsZWQgMCBvciAxLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZmVhdHVyZXMgYW4gYXJyYXkgb2YgZmVhdHVyZXMgYXMgbnVtYmVyc1xuICogQHJldHVybnMge251bWJlcn0gMSBpZiB0aGUgc2NvcmUgaXMgb3ZlciAwLCBvdGhlcndpc2UgMFxuICovXG5QZXJjZXB0cm9uTW9kZWwucHJvdG90eXBlLnByZWRpY3QgPSBmdW5jdGlvbihmZWF0dXJlcykge1xuXG4gICAgLy8gT25seSBwcmVkaWN0IGlmIHByZXZpb3VzbHkgdHJhaW5lZFxuICAgIC8vIG9uIHRoZSBzYW1lIHNpemUgZmVhdHVyZSBhcnJheShzKS5cbiAgICBpZiAoZmVhdHVyZXMubGVuZ3RoICE9PSB0aGlzLndlaWdodHMubGVuZ3RoKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHN1bSBvZiBmZWF0dXJlcyB0aW1lcyB3ZWlnaHRzLFxuICAgIC8vIHdpdGggdGhlIGJpYXMgYWRkZWQgKGltcGxpY2l0bHkgdGltZXMgb25lKS5cbiAgICB2YXIgc2NvcmUgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53ZWlnaHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNjb3JlICs9IHRoaXMud2VpZ2h0c1tpXSAqIGZlYXR1cmVzW2ldO1xuICAgIH1cbiAgICBzY29yZSArPSB0aGlzLmJpYXM7XG5cbiAgICAvLyBDbGFzc2lmeSBhcyAxIGlmIHRoZSBzY29yZSBpcyBvdmVyIDAsIG90aGVyd2lzZSAwLlxuICAgIGlmIChzY29yZSA+IDApIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufTtcblxuLyoqXG4gKiAqKlRyYWluKiogdGhlIGNsYXNzaWZpZXIgd2l0aCBhIG5ldyBleGFtcGxlLCB3aGljaCBpc1xuICogYSBudW1lcmljIGFycmF5IG9mIGZlYXR1cmVzIGFuZCBhIDAgb3IgMSBsYWJlbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGZlYXR1cmVzIGFuIGFycmF5IG9mIGZlYXR1cmVzIGFzIG51bWJlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBsYWJlbCBlaXRoZXIgMCBvciAxXG4gKiBAcmV0dXJucyB7UGVyY2VwdHJvbk1vZGVsfSB0aGlzXG4gKi9cblBlcmNlcHRyb25Nb2RlbC5wcm90b3R5cGUudHJhaW4gPSBmdW5jdGlvbihmZWF0dXJlcywgbGFiZWwpIHtcbiAgICAvLyBSZXF1aXJlIHRoYXQgb25seSBsYWJlbHMgb2YgMCBvciAxIGFyZSBjb25zaWRlcmVkLlxuICAgIGlmIChsYWJlbCAhPT0gMCAmJiBsYWJlbCAhPT0gMSkgeyByZXR1cm4gbnVsbDsgfVxuICAgIC8vIFRoZSBsZW5ndGggb2YgdGhlIGZlYXR1cmUgYXJyYXkgZGV0ZXJtaW5lc1xuICAgIC8vIHRoZSBsZW5ndGggb2YgdGhlIHdlaWdodCBhcnJheS5cbiAgICAvLyBUaGUgcGVyY2VwdHJvbiB3aWxsIGNvbnRpbnVlIGxlYXJuaW5nIGFzIGxvbmcgYXNcbiAgICAvLyBpdCBrZWVwcyBzZWVpbmcgZmVhdHVyZSBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoLlxuICAgIC8vIFdoZW4gaXQgc2VlcyBhIG5ldyBkYXRhIHNoYXBlLCBpdCBpbml0aWFsaXplcy5cbiAgICBpZiAoZmVhdHVyZXMubGVuZ3RoICE9PSB0aGlzLndlaWdodHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMud2VpZ2h0cyA9IGZlYXR1cmVzO1xuICAgICAgICB0aGlzLmJpYXMgPSAxO1xuICAgIH1cbiAgICAvLyBNYWtlIGEgcHJlZGljdGlvbiBiYXNlZCBvbiBjdXJyZW50IHdlaWdodHMuXG4gICAgdmFyIHByZWRpY3Rpb24gPSB0aGlzLnByZWRpY3QoZmVhdHVyZXMpO1xuICAgIC8vIFVwZGF0ZSB0aGUgd2VpZ2h0cyBpZiB0aGUgcHJlZGljdGlvbiBpcyB3cm9uZy5cbiAgICBpZiAocHJlZGljdGlvbiAhPT0gbGFiZWwpIHtcbiAgICAgICAgdmFyIGdyYWRpZW50ID0gbGFiZWwgLSBwcmVkaWN0aW9uO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMud2VpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy53ZWlnaHRzW2ldICs9IGdyYWRpZW50ICogZmVhdHVyZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iaWFzICs9IGdyYWRpZW50O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGVyY2VwdHJvbk1vZGVsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9wZXJjZXB0cm9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("/* @flow */\n\n\n\n/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap/*:: <T> */(elements /*: Array<T> */)/*: Array<Array<T>> */ {\n    var indexes = new Array(elements.length);\n    var permutations = [elements.slice()];\n\n    for (var i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (i = 0; i < elements.length;) {\n        if (indexes[i] < i) {\n\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            var swapFrom = 0;\n            if (i % 2 !== 0) {\n                swapFrom = indexes[i];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            var temp = elements[swapFrom];\n            elements[swapFrom] = elements[i];\n            elements[i] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i]++;\n            i = 0;\n\n        } else {\n            indexes[i] = 0;\n            i++;\n        }\n    }\n\n    return permutations;\n}\n\nmodule.exports = permutationsHeap;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcGVybXV0YXRpb25zX2hlYXAuanM/N2ZhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgW0hlYXAncyBBbGdvcml0aG1dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hlYXAlMjdzX2FsZ29yaXRobSlcbiAqIGZvciBnZW5lcmF0aW5nIHBlcm11dGF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBlbGVtZW50cyBhbnkgdHlwZSBvZiBkYXRhXG4gKiBAcmV0dXJucyB7QXJyYXk8QXJyYXk+fSBhcnJheSBvZiBwZXJtdXRhdGlvbnNcbiAqL1xuZnVuY3Rpb24gcGVybXV0YXRpb25zSGVhcC8qOjogPFQ+ICovKGVsZW1lbnRzIC8qOiBBcnJheTxUPiAqLykvKjogQXJyYXk8QXJyYXk8VD4+ICovIHtcbiAgICB2YXIgaW5kZXhlcyA9IG5ldyBBcnJheShlbGVtZW50cy5sZW5ndGgpO1xuICAgIHZhciBwZXJtdXRhdGlvbnMgPSBbZWxlbWVudHMuc2xpY2UoKV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluZGV4ZXNbaV0gPSAwO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7KSB7XG4gICAgICAgIGlmIChpbmRleGVzW2ldIDwgaSkge1xuXG4gICAgICAgICAgICAvLyBBdCBvZGQgaW5kZXhlcywgc3dhcCBmcm9tIGluZGV4ZXNbaV0gaW5zdGVhZFxuICAgICAgICAgICAgLy8gb2YgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICAgICAgICAgICAgdmFyIHN3YXBGcm9tID0gMDtcbiAgICAgICAgICAgIGlmIChpICUgMiAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHN3YXBGcm9tID0gaW5kZXhlc1tpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc3dhcCBiZXR3ZWVuIHN3YXBGcm9tIGFuZCBpLCB1c2luZ1xuICAgICAgICAgICAgLy8gYSB0ZW1wb3JhcnkgdmFyaWFibGUgYXMgc3RvcmFnZS5cbiAgICAgICAgICAgIHZhciB0ZW1wID0gZWxlbWVudHNbc3dhcEZyb21dO1xuICAgICAgICAgICAgZWxlbWVudHNbc3dhcEZyb21dID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICBlbGVtZW50c1tpXSA9IHRlbXA7XG5cbiAgICAgICAgICAgIHBlcm11dGF0aW9ucy5wdXNoKGVsZW1lbnRzLnNsaWNlKCkpO1xuICAgICAgICAgICAgaW5kZXhlc1tpXSsrO1xuICAgICAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ZXNbaV0gPSAwO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlcm11dGF0aW9ucztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwZXJtdXRhdGlvbnNIZWFwO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9wZXJtdXRhdGlvbnNfaGVhcC5qc1xuLy8gbW9kdWxlIGlkID0gMTExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar epsilon = __webpack_require__(5);\nvar factorial = __webpack_require__(10);\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `Î»`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number} value of poisson distribution at that point\n */\nfunction poissonDistribution(lambda/*: number */) {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) { return undefined; }\n\n    // our current place in the distribution\n    var x = 0,\n        // and we keep track of the current cumulative probability, in\n        // order to know when to stop calculating chances.\n        cumulativeProbability = 0,\n        // the calculated cells to be returned\n        cells = {};\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.pow(Math.E, -lambda) * Math.pow(lambda, x)) / factorial(x);\n        cumulativeProbability += cells[x];\n        x++;\n    // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nmodule.exports = poissonDistribution;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcG9pc3Nvbl9kaXN0cmlidXRpb24uanM/MjA1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgZXBzaWxvbiA9IHJlcXVpcmUoJy4vZXBzaWxvbicpO1xudmFyIGZhY3RvcmlhbCA9IHJlcXVpcmUoJy4vZmFjdG9yaWFsJyk7XG5cbi8qKlxuICogVGhlIFtQb2lzc29uIERpc3RyaWJ1dGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb2lzc29uX2Rpc3RyaWJ1dGlvbilcbiAqIGlzIGEgZGlzY3JldGUgcHJvYmFiaWxpdHkgZGlzdHJpYnV0aW9uIHRoYXQgZXhwcmVzc2VzIHRoZSBwcm9iYWJpbGl0eVxuICogb2YgYSBnaXZlbiBudW1iZXIgb2YgZXZlbnRzIG9jY3VycmluZyBpbiBhIGZpeGVkIGludGVydmFsIG9mIHRpbWVcbiAqIGFuZC9vciBzcGFjZSBpZiB0aGVzZSBldmVudHMgb2NjdXIgd2l0aCBhIGtub3duIGF2ZXJhZ2UgcmF0ZSBhbmRcbiAqIGluZGVwZW5kZW50bHkgb2YgdGhlIHRpbWUgc2luY2UgdGhlIGxhc3QgZXZlbnQuXG4gKlxuICogVGhlIFBvaXNzb24gRGlzdHJpYnV0aW9uIGlzIGNoYXJhY3Rlcml6ZWQgYnkgdGhlIHN0cmljdGx5IHBvc2l0aXZlXG4gKiBtZWFuIGFycml2YWwgb3Igb2NjdXJyZW5jZSByYXRlLCBgzrtgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsYW1iZGEgbG9jYXRpb24gcG9pc3NvbiBkaXN0cmlidXRpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IHZhbHVlIG9mIHBvaXNzb24gZGlzdHJpYnV0aW9uIGF0IHRoYXQgcG9pbnRcbiAqL1xuZnVuY3Rpb24gcG9pc3NvbkRpc3RyaWJ1dGlvbihsYW1iZGEvKjogbnVtYmVyICovKSB7XG4gICAgLy8gQ2hlY2sgdGhhdCBsYW1iZGEgaXMgc3RyaWN0bHkgcG9zaXRpdmVcbiAgICBpZiAobGFtYmRhIDw9IDApIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuXG4gICAgLy8gb3VyIGN1cnJlbnQgcGxhY2UgaW4gdGhlIGRpc3RyaWJ1dGlvblxuICAgIHZhciB4ID0gMCxcbiAgICAgICAgLy8gYW5kIHdlIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgY3VtdWxhdGl2ZSBwcm9iYWJpbGl0eSwgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8ga25vdyB3aGVuIHRvIHN0b3AgY2FsY3VsYXRpbmcgY2hhbmNlcy5cbiAgICAgICAgY3VtdWxhdGl2ZVByb2JhYmlsaXR5ID0gMCxcbiAgICAgICAgLy8gdGhlIGNhbGN1bGF0ZWQgY2VsbHMgdG8gYmUgcmV0dXJuZWRcbiAgICAgICAgY2VsbHMgPSB7fTtcblxuICAgIC8vIFRoaXMgYWxnb3JpdGhtIGl0ZXJhdGVzIHRocm91Z2ggZWFjaCBwb3RlbnRpYWwgb3V0Y29tZSxcbiAgICAvLyB1bnRpbCB0aGUgYGN1bXVsYXRpdmVQcm9iYWJpbGl0eWAgaXMgdmVyeSBjbG9zZSB0byAxLCBhdFxuICAgIC8vIHdoaWNoIHBvaW50IHdlJ3ZlIGRlZmluZWQgdGhlIHZhc3QgbWFqb3JpdHkgb2Ygb3V0Y29tZXNcbiAgICBkbyB7XG4gICAgICAgIC8vIGEgW3Byb2JhYmlsaXR5IG1hc3MgZnVuY3Rpb25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Byb2JhYmlsaXR5X21hc3NfZnVuY3Rpb24pXG4gICAgICAgIGNlbGxzW3hdID0gKE1hdGgucG93KE1hdGguRSwgLWxhbWJkYSkgKiBNYXRoLnBvdyhsYW1iZGEsIHgpKSAvIGZhY3RvcmlhbCh4KTtcbiAgICAgICAgY3VtdWxhdGl2ZVByb2JhYmlsaXR5ICs9IGNlbGxzW3hdO1xuICAgICAgICB4Kys7XG4gICAgLy8gd2hlbiB0aGUgY3VtdWxhdGl2ZVByb2JhYmlsaXR5IGlzIG5lYXJseSAxLCB3ZSd2ZSBjYWxjdWxhdGVkXG4gICAgLy8gdGhlIHVzZWZ1bCByYW5nZSBvZiB0aGlzIGRpc3RyaWJ1dGlvblxuICAgIH0gd2hpbGUgKGN1bXVsYXRpdmVQcm9iYWJpbGl0eSA8IDEgLSBlcHNpbG9uKTtcblxuICAgIHJldHVybiBjZWxscztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwb2lzc29uRGlzdHJpYnV0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9wb2lzc29uX2Rpc3RyaWJ1dGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar epsilon = __webpack_require__(5);\nvar inverseErrorFunction = __webpack_require__(29);\n\n/**\n * The [Probit](http://en.wikipedia.org/wiki/Probit)\n * is the inverse of cumulativeStdNormalProbability(),\n * and is also known as the normal quantile function.\n *\n * It returns the number of standard deviations from the mean\n * where the p'th quantile of values can be found in a normal distribution.\n * So, for example, probit(0.5 + 0.6827/2) â 1 because 68.27% of values are\n * normally found within 1 standard deviation above or below the mean.\n *\n * @param {number} p\n * @returns {number} probit\n */\nfunction probit(p /*: number */)/*: number */ {\n    if (p === 0) {\n        p = epsilon;\n    } else if (p >= 1) {\n        p = 1 - epsilon;\n    }\n    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n}\n\nmodule.exports = probit;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcHJvYml0LmpzPzFkZGMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIGVwc2lsb24gPSByZXF1aXJlKCcuL2Vwc2lsb24nKTtcbnZhciBpbnZlcnNlRXJyb3JGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaW52ZXJzZV9lcnJvcl9mdW5jdGlvbicpO1xuXG4vKipcbiAqIFRoZSBbUHJvYml0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Byb2JpdClcbiAqIGlzIHRoZSBpbnZlcnNlIG9mIGN1bXVsYXRpdmVTdGROb3JtYWxQcm9iYWJpbGl0eSgpLFxuICogYW5kIGlzIGFsc28ga25vd24gYXMgdGhlIG5vcm1hbCBxdWFudGlsZSBmdW5jdGlvbi5cbiAqXG4gKiBJdCByZXR1cm5zIHRoZSBudW1iZXIgb2Ygc3RhbmRhcmQgZGV2aWF0aW9ucyBmcm9tIHRoZSBtZWFuXG4gKiB3aGVyZSB0aGUgcCd0aCBxdWFudGlsZSBvZiB2YWx1ZXMgY2FuIGJlIGZvdW5kIGluIGEgbm9ybWFsIGRpc3RyaWJ1dGlvbi5cbiAqIFNvLCBmb3IgZXhhbXBsZSwgcHJvYml0KDAuNSArIDAuNjgyNy8yKSDiiYggMSBiZWNhdXNlIDY4LjI3JSBvZiB2YWx1ZXMgYXJlXG4gKiBub3JtYWxseSBmb3VuZCB3aXRoaW4gMSBzdGFuZGFyZCBkZXZpYXRpb24gYWJvdmUgb3IgYmVsb3cgdGhlIG1lYW4uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHByb2JpdFxuICovXG5mdW5jdGlvbiBwcm9iaXQocCAvKjogbnVtYmVyICovKS8qOiBudW1iZXIgKi8ge1xuICAgIGlmIChwID09PSAwKSB7XG4gICAgICAgIHAgPSBlcHNpbG9uO1xuICAgIH0gZWxzZSBpZiAocCA+PSAxKSB7XG4gICAgICAgIHAgPSAxIC0gZXBzaWxvbjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguc3FydCgyKSAqIGludmVyc2VFcnJvckZ1bmN0aW9uKDIgKiBwIC0gMSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvYml0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9wcm9iaXQuanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array\n * is the result of multiplying all numbers together, starting using one as the multiplicative identity.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @return {number} product of all input numbers\n * @example\n * product([1, 2, 3, 4]); // => 24\n */\nfunction product(x/*: Array<number> */)/*: number */ {\n    var value = 1;\n    for (var i = 0; i < x.length; i++) {\n        value *= x[i];\n    }\n    return value;\n}\n\nmodule.exports = product;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcHJvZHVjdC5qcz8yYTAyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFtwcm9kdWN0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qcm9kdWN0XyhtYXRoZW1hdGljcykpIG9mIGFuIGFycmF5XG4gKiBpcyB0aGUgcmVzdWx0IG9mIG11bHRpcGx5aW5nIGFsbCBudW1iZXJzIHRvZ2V0aGVyLCBzdGFydGluZyB1c2luZyBvbmUgYXMgdGhlIG11bHRpcGxpY2F0aXZlIGlkZW50aXR5LlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhuKWAsIGxpbmVhciB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIGFycmF5XG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJuIHtudW1iZXJ9IHByb2R1Y3Qgb2YgYWxsIGlucHV0IG51bWJlcnNcbiAqIEBleGFtcGxlXG4gKiBwcm9kdWN0KFsxLCAyLCAzLCA0XSk7IC8vID0+IDI0XG4gKi9cbmZ1bmN0aW9uIHByb2R1Y3QoeC8qOiBBcnJheTxudW1iZXI+ICovKS8qOiBudW1iZXIgKi8ge1xuICAgIHZhciB2YWx1ZSA9IDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlICo9IHhbaV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9kdWN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9wcm9kdWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nmodule.exports = quickselect;\n\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @private\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} left left index\n * @param {number} right right index\n * @returns {undefined}\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr /*: Array<number> */, k /*: number */, left /*: number */, right /*: number */) {\n    left = left || 0;\n    right = right || (arr.length - 1);\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);\n            if (m - n / 2 < 0) sd *= -1;\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) i++;\n            while (arr[j] > t) j--;\n        }\n\n        if (arr[left] === t) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcXVpY2tzZWxlY3QuanM/MzJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHF1aWNrc2VsZWN0O1xuXG4vKipcbiAqIFJlYXJyYW5nZSBpdGVtcyBpbiBgYXJyYCBzbyB0aGF0IGFsbCBpdGVtcyBpbiBgW2xlZnQsIGtdYCByYW5nZSBhcmUgdGhlIHNtYWxsZXN0LlxuICogVGhlIGBrYC10aCBlbGVtZW50IHdpbGwgaGF2ZSB0aGUgYChrIC0gbGVmdCArIDEpYC10aCBzbWFsbGVzdCB2YWx1ZSBpbiBgW2xlZnQsIHJpZ2h0XWAuXG4gKlxuICogSW1wbGVtZW50cyBGbG95ZC1SaXZlc3Qgc2VsZWN0aW9uIGFsZ29yaXRobSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GbG95ZC1SaXZlc3RfYWxnb3JpdGhtXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYXJyIGlucHV0IGFycmF5XG4gKiBAcGFyYW0ge251bWJlcn0gayBwaXZvdCBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgbGVmdCBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IHJpZ2h0IGluZGV4XG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQGV4YW1wbGVcbiAqIHZhciBhcnIgPSBbNjUsIDI4LCA1OSwgMzMsIDIxLCA1NiwgMjIsIDk1LCA1MCwgMTIsIDkwLCA1MywgMjgsIDc3LCAzOV07XG4gKiBxdWlja3NlbGVjdChhcnIsIDgpO1xuICogLy8gPSBbMzksIDI4LCAyOCwgMzMsIDIxLCAxMiwgMjIsIDUwLCA1MywgNTYsIDU5LCA2NSwgOTAsIDc3LCA5NV1cbiAqL1xuZnVuY3Rpb24gcXVpY2tzZWxlY3QoYXJyIC8qOiBBcnJheTxudW1iZXI+ICovLCBrIC8qOiBudW1iZXIgKi8sIGxlZnQgLyo6IG51bWJlciAqLywgcmlnaHQgLyo6IG51bWJlciAqLykge1xuICAgIGxlZnQgPSBsZWZ0IHx8IDA7XG4gICAgcmlnaHQgPSByaWdodCB8fCAoYXJyLmxlbmd0aCAtIDEpO1xuXG4gICAgd2hpbGUgKHJpZ2h0ID4gbGVmdCkge1xuICAgICAgICAvLyA2MDAgYW5kIDAuNSBhcmUgYXJiaXRyYXJ5IGNvbnN0YW50cyBjaG9zZW4gaW4gdGhlIG9yaWdpbmFsIHBhcGVyIHRvIG1pbmltaXplIGV4ZWN1dGlvbiB0aW1lXG4gICAgICAgIGlmIChyaWdodCAtIGxlZnQgPiA2MDApIHtcbiAgICAgICAgICAgIHZhciBuID0gcmlnaHQgLSBsZWZ0ICsgMTtcbiAgICAgICAgICAgIHZhciBtID0gayAtIGxlZnQgKyAxO1xuICAgICAgICAgICAgdmFyIHogPSBNYXRoLmxvZyhuKTtcbiAgICAgICAgICAgIHZhciBzID0gMC41ICogTWF0aC5leHAoMiAqIHogLyAzKTtcbiAgICAgICAgICAgIHZhciBzZCA9IDAuNSAqIE1hdGguc3FydCh6ICogcyAqIChuIC0gcykgLyBuKTtcbiAgICAgICAgICAgIGlmIChtIC0gbiAvIDIgPCAwKSBzZCAqPSAtMTtcbiAgICAgICAgICAgIHZhciBuZXdMZWZ0ID0gTWF0aC5tYXgobGVmdCwgTWF0aC5mbG9vcihrIC0gbSAqIHMgLyBuICsgc2QpKTtcbiAgICAgICAgICAgIHZhciBuZXdSaWdodCA9IE1hdGgubWluKHJpZ2h0LCBNYXRoLmZsb29yKGsgKyAobiAtIG0pICogcyAvIG4gKyBzZCkpO1xuICAgICAgICAgICAgcXVpY2tzZWxlY3QoYXJyLCBrLCBuZXdMZWZ0LCBuZXdSaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdCA9IGFycltrXTtcbiAgICAgICAgdmFyIGkgPSBsZWZ0O1xuICAgICAgICB2YXIgaiA9IHJpZ2h0O1xuXG4gICAgICAgIHN3YXAoYXJyLCBsZWZ0LCBrKTtcbiAgICAgICAgaWYgKGFycltyaWdodF0gPiB0KSBzd2FwKGFyciwgbGVmdCwgcmlnaHQpO1xuXG4gICAgICAgIHdoaWxlIChpIDwgaikge1xuICAgICAgICAgICAgc3dhcChhcnIsIGksIGopO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgd2hpbGUgKGFycltpXSA8IHQpIGkrKztcbiAgICAgICAgICAgIHdoaWxlIChhcnJbal0gPiB0KSBqLS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJyW2xlZnRdID09PSB0KSBzd2FwKGFyciwgbGVmdCwgaik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgc3dhcChhcnIsIGosIHJpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqIDw9IGspIGxlZnQgPSBqICsgMTtcbiAgICAgICAgaWYgKGsgPD0gaikgcmlnaHQgPSBqIC0gMTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN3YXAoYXJyLCBpLCBqKSB7XG4gICAgdmFyIHRtcCA9IGFycltpXTtcbiAgICBhcnJbaV0gPSBhcnJbal07XG4gICAgYXJyW2pdID0gdG1wO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9xdWlja3NlbGVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} data input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\nfunction rSquared(data /*: Array<Array<number>> */, func /*: Function */) /*: number */ {\n    if (data.length < 2) { return 1; }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    var sum = 0, average;\n    for (var i = 0; i < data.length; i++) {\n        sum += data[i][1];\n    }\n    average = sum / data.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    var sumOfSquares = 0;\n    for (var j = 0; j < data.length; j++) {\n        sumOfSquares += Math.pow(average - data[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    var err = 0;\n    for (var k = 0; k < data.length; k++) {\n        err += Math.pow(data[k][1] - func(data[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\nmodule.exports = rSquared;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcl9zcXVhcmVkLmpzPzRlYzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxuLyoqXG4gKiBUaGUgW1IgU3F1YXJlZF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db2VmZmljaWVudF9vZl9kZXRlcm1pbmF0aW9uKVxuICogdmFsdWUgb2YgZGF0YSBjb21wYXJlZCB3aXRoIGEgZnVuY3Rpb24gYGZgXG4gKiBpcyB0aGUgc3VtIG9mIHRoZSBzcXVhcmVkIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIHByZWRpY3Rpb25cbiAqIGFuZCB0aGUgYWN0dWFsIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGRhdGEgaW5wdXQgZGF0YTogdGhpcyBzaG91bGQgYmUgZG91Ymx5LW5lc3RlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBmdW5jdGlvbiBjYWxsZWQgb24gYFtpXVswXWAgdmFsdWVzIHdpdGhpbiB0aGUgZGF0YXNldFxuICogQHJldHVybnMge251bWJlcn0gci1zcXVhcmVkIHZhbHVlXG4gKiBAZXhhbXBsZVxuICogdmFyIHNhbXBsZXMgPSBbWzAsIDBdLCBbMSwgMV1dO1xuICogdmFyIHJlZ3Jlc3Npb25MaW5lID0gbGluZWFyUmVncmVzc2lvbkxpbmUobGluZWFyUmVncmVzc2lvbihzYW1wbGVzKSk7XG4gKiByU3F1YXJlZChzYW1wbGVzLCByZWdyZXNzaW9uTGluZSk7IC8vID0gMSB0aGlzIGxpbmUgaXMgYSBwZXJmZWN0IGZpdFxuICovXG5mdW5jdGlvbiByU3F1YXJlZChkYXRhIC8qOiBBcnJheTxBcnJheTxudW1iZXI+PiAqLywgZnVuYyAvKjogRnVuY3Rpb24gKi8pIC8qOiBudW1iZXIgKi8ge1xuICAgIGlmIChkYXRhLmxlbmd0aCA8IDIpIHsgcmV0dXJuIDE7IH1cblxuICAgIC8vIENvbXB1dGUgdGhlIGF2ZXJhZ2UgeSB2YWx1ZSBmb3IgdGhlIGFjdHVhbFxuICAgIC8vIGRhdGEgc2V0IGluIG9yZGVyIHRvIGNvbXB1dGUgdGhlXG4gICAgLy8gX3RvdGFsIHN1bSBvZiBzcXVhcmVzX1xuICAgIHZhciBzdW0gPSAwLCBhdmVyYWdlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdW0gKz0gZGF0YVtpXVsxXTtcbiAgICB9XG4gICAgYXZlcmFnZSA9IHN1bSAvIGRhdGEubGVuZ3RoO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgdG90YWwgc3VtIG9mIHNxdWFyZXMgLSB0aGVcbiAgICAvLyBzcXVhcmVkIGRpZmZlcmVuY2UgYmV0d2VlbiBlYWNoIHBvaW50XG4gICAgLy8gYW5kIHRoZSBhdmVyYWdlIG9mIGFsbCBwb2ludHMuXG4gICAgdmFyIHN1bU9mU3F1YXJlcyA9IDA7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHN1bU9mU3F1YXJlcyArPSBNYXRoLnBvdyhhdmVyYWdlIC0gZGF0YVtqXVsxXSwgMik7XG4gICAgfVxuXG4gICAgLy8gRmluYWxseSBlc3RpbWF0ZSB0aGUgZXJyb3I6IHRoZSBzcXVhcmVkXG4gICAgLy8gZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBlc3RpbWF0ZSBhbmQgdGhlIGFjdHVhbCBkYXRhXG4gICAgLy8gdmFsdWUgYXQgZWFjaCBwb2ludC5cbiAgICB2YXIgZXJyID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGRhdGEubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgZXJyICs9IE1hdGgucG93KGRhdGFba11bMV0gLSBmdW5jKGRhdGFba11bMF0pLCAyKTtcbiAgICB9XG5cbiAgICAvLyBBcyB0aGUgZXJyb3IgZ3Jvd3MgbGFyZ2VyLCBpdHMgcmF0aW8gdG8gdGhlXG4gICAgLy8gc3VtIG9mIHNxdWFyZXMgaW5jcmVhc2VzIGFuZCB0aGUgciBzcXVhcmVkXG4gICAgLy8gdmFsdWUgZ3Jvd3MgbG93ZXIuXG4gICAgcmV0dXJuIDEgLSBlcnIgLyBzdW1PZlNxdWFyZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gclNxdWFyZWQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3Jfc3F1YXJlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The Root Mean Square (RMS) is\n * a mean function used as a measure of the magnitude of a set\n * of numbers, regardless of their sign.\n * This is the square root of the mean of the squares of the\n * input numbers.\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @returns {number} root mean square\n * @example\n * rootMeanSquare([-1, 1, -1, 1]); // => 1\n */\nfunction rootMeanSquare(x /*: Array<number> */)/*:number*/ {\n    if (x.length === 0) { return NaN; }\n\n    var sumOfSquares = 0;\n    for (var i = 0; i < x.length; i++) {\n        sumOfSquares += Math.pow(x[i], 2);\n    }\n\n    return Math.sqrt(sumOfSquares / x.length);\n}\n\nmodule.exports = rootMeanSquare;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcm9vdF9tZWFuX3NxdWFyZS5qcz9lMTliIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFJvb3QgTWVhbiBTcXVhcmUgKFJNUykgaXNcbiAqIGEgbWVhbiBmdW5jdGlvbiB1c2VkIGFzIGEgbWVhc3VyZSBvZiB0aGUgbWFnbml0dWRlIG9mIGEgc2V0XG4gKiBvZiBudW1iZXJzLCByZWdhcmRsZXNzIG9mIHRoZWlyIHNpZ24uXG4gKiBUaGlzIGlzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgbWVhbiBvZiB0aGUgc3F1YXJlcyBvZiB0aGVcbiAqIGlucHV0IG51bWJlcnMuXG4gKiBUaGlzIHJ1bnMgb24gYE8obilgLCBsaW5lYXIgdGltZSBpbiByZXNwZWN0IHRvIHRoZSBhcnJheVxuICpcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geCBpbnB1dFxuICogQHJldHVybnMge251bWJlcn0gcm9vdCBtZWFuIHNxdWFyZVxuICogQGV4YW1wbGVcbiAqIHJvb3RNZWFuU3F1YXJlKFstMSwgMSwgLTEsIDFdKTsgLy8gPT4gMVxuICovXG5mdW5jdGlvbiByb290TWVhblNxdWFyZSh4IC8qOiBBcnJheTxudW1iZXI+ICovKS8qOm51bWJlciovIHtcbiAgICBpZiAoeC5sZW5ndGggPT09IDApIHsgcmV0dXJuIE5hTjsgfVxuXG4gICAgdmFyIHN1bU9mU3F1YXJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN1bU9mU3F1YXJlcyArPSBNYXRoLnBvdyh4W2ldLCAyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KHN1bU9mU3F1YXJlcyAvIHgubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByb290TWVhblNxdWFyZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvcm9vdF9tZWFuX3NxdWFyZS5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar shuffle = __webpack_require__(36);\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array} array input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample/*:: <T> */(\n    array /*: Array<T> */,\n    n /*: number */,\n    randomSource /*: Function */) /*: Array<T> */ {\n    // shuffle the original array using a fisher-yates shuffle\n    var shuffled = shuffle(array, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\nmodule.exports = sample;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc2FtcGxlLmpzPzllNmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIHNodWZmbGUgPSByZXF1aXJlKCcuL3NodWZmbGUnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBbc2ltcGxlIHJhbmRvbSBzYW1wbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2ltcGxlX3JhbmRvbV9zYW1wbGUpXG4gKiBmcm9tIGEgZ2l2ZW4gYXJyYXkgb2YgYG5gIGVsZW1lbnRzLlxuICpcbiAqIFRoZSBzYW1wbGVkIHZhbHVlcyB3aWxsIGJlIGluIGFueSBvcmRlciwgbm90IG5lY2Vzc2FyaWx5IHRoZSBvcmRlclxuICogdGhleSBhcHBlYXIgaW4gdGhlIGlucHV0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IGlucHV0IGFycmF5LiBjYW4gY29udGFpbiBhbnkgdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gY291bnQgb2YgaG93IG1hbnkgZWxlbWVudHMgdG8gdGFrZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JhbmRvbVNvdXJjZT1NYXRoLnJhbmRvbV0gYW4gb3B0aW9uYWwgZW50cm9weSBzb3VyY2UgdGhhdFxuICogcmV0dXJucyBudW1iZXJzIGJldHdlZW4gMCBpbmNsdXNpdmUgYW5kIDEgZXhjbHVzaXZlOiB0aGUgcmFuZ2UgWzAsIDEpXG4gKiBAcmV0dXJuIHtBcnJheX0gc3Vic2V0IG9mIG4gZWxlbWVudHMgaW4gb3JpZ2luYWwgYXJyYXlcbiAqIEBleGFtcGxlXG4gKiB2YXIgdmFsdWVzID0gWzEsIDIsIDQsIDUsIDYsIDcsIDgsIDldO1xuICogc2FtcGxlKHZhbHVlcywgMyk7IC8vIHJldHVybnMgMyByYW5kb20gdmFsdWVzLCBsaWtlIFsyLCA1LCA4XTtcbiAqL1xuZnVuY3Rpb24gc2FtcGxlLyo6OiA8VD4gKi8oXG4gICAgYXJyYXkgLyo6IEFycmF5PFQ+ICovLFxuICAgIG4gLyo6IG51bWJlciAqLyxcbiAgICByYW5kb21Tb3VyY2UgLyo6IEZ1bmN0aW9uICovKSAvKjogQXJyYXk8VD4gKi8ge1xuICAgIC8vIHNodWZmbGUgdGhlIG9yaWdpbmFsIGFycmF5IHVzaW5nIGEgZmlzaGVyLXlhdGVzIHNodWZmbGVcbiAgICB2YXIgc2h1ZmZsZWQgPSBzaHVmZmxlKGFycmF5LCByYW5kb21Tb3VyY2UpO1xuXG4gICAgLy8gYW5kIHRoZW4gcmV0dXJuIGEgc3Vic2V0IG9mIGl0IC0gdGhlIGZpcnN0IGBuYCBlbGVtZW50cy5cbiAgICByZXR1cm4gc2h1ZmZsZWQuc2xpY2UoMCwgbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FtcGxlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGUuanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar sampleCovariance = __webpack_require__(35);\nvar sampleStandardDeviation = __webpack_require__(13);\n\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);\n * // => '0.69'\n */\nfunction sampleCorrelation(x/*: Array<number> */, y/*: Array<number> */)/*:number*/ {\n    var cov = sampleCovariance(x, y),\n        xstd = sampleStandardDeviation(x),\n        ystd = sampleStandardDeviation(y);\n\n    return cov / xstd / ystd;\n}\n\nmodule.exports = sampleCorrelation;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc2FtcGxlX2NvcnJlbGF0aW9uLmpzPzYzYzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIHNhbXBsZUNvdmFyaWFuY2UgPSByZXF1aXJlKCcuL3NhbXBsZV9jb3ZhcmlhbmNlJyk7XG52YXIgc2FtcGxlU3RhbmRhcmREZXZpYXRpb24gPSByZXF1aXJlKCcuL3NhbXBsZV9zdGFuZGFyZF9kZXZpYXRpb24nKTtcblxuLyoqXG4gKiBUaGUgW2NvcnJlbGF0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvcnJlbGF0aW9uX2FuZF9kZXBlbmRlbmNlKSBpc1xuICogYSBtZWFzdXJlIG9mIGhvdyBjb3JyZWxhdGVkIHR3byBkYXRhc2V0cyBhcmUsIGJldHdlZW4gLTEgYW5kIDFcbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggZmlyc3QgaW5wdXRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geSBzZWNvbmQgaW5wdXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNhbXBsZSBjb3JyZWxhdGlvblxuICogQGV4YW1wbGVcbiAqIHNhbXBsZUNvcnJlbGF0aW9uKFsxLCAyLCAzLCA0LCA1LCA2XSwgWzIsIDIsIDMsIDQsIDUsIDYwXSkudG9GaXhlZCgyKTtcbiAqIC8vID0+ICcwLjY5J1xuICovXG5mdW5jdGlvbiBzYW1wbGVDb3JyZWxhdGlvbih4Lyo6IEFycmF5PG51bWJlcj4gKi8sIHkvKjogQXJyYXk8bnVtYmVyPiAqLykvKjpudW1iZXIqLyB7XG4gICAgdmFyIGNvdiA9IHNhbXBsZUNvdmFyaWFuY2UoeCwgeSksXG4gICAgICAgIHhzdGQgPSBzYW1wbGVTdGFuZGFyZERldmlhdGlvbih4KSxcbiAgICAgICAgeXN0ZCA9IHNhbXBsZVN0YW5kYXJkRGV2aWF0aW9uKHkpO1xuXG4gICAgcmV0dXJuIGNvdiAvIHhzdGQgLyB5c3RkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhbXBsZUNvcnJlbGF0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGVfY29ycmVsYXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDExOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval('\n/* @flow */\n\nvar sumNthPowerDeviations = __webpack_require__(6);\nvar sampleStandardDeviation = __webpack_require__(13);\n\n/**\n * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n * a measure of the extent to which a probability distribution of a\n * real-valued random variable "leans" to one side of the mean.\n * The skewness value can be positive or negative, or even undefined.\n *\n * Implementation is based on the adjusted Fisher-Pearson standardized\n * moment coefficient, which is the version found in Excel and several\n * statistical packages including Minitab, SAS and SPSS.\n *\n * @param {Array<number>} x input\n * @returns {number} sample skewness\n * @example\n * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365\n */\nfunction sampleSkewness(x /*: Array<number> */)/*:number*/ {\n    // The skewness of less than three arguments is null\n    var theSampleStandardDeviation = sampleStandardDeviation(x);\n\n    if (isNaN(theSampleStandardDeviation) || x.length < 3) {\n        return NaN;\n    }\n\n    var n = x.length,\n        cubedS = Math.pow(theSampleStandardDeviation, 3),\n        sumCubedDeviations = sumNthPowerDeviations(x, 3);\n\n    return n * sumCubedDeviations / ((n - 1) * (n - 2) * cubedS);\n}\n\nmodule.exports = sampleSkewness;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc2FtcGxlX3NrZXduZXNzLmpzP2M4OWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIHN1bU50aFBvd2VyRGV2aWF0aW9ucyA9IHJlcXVpcmUoJy4vc3VtX250aF9wb3dlcl9kZXZpYXRpb25zJyk7XG52YXIgc2FtcGxlU3RhbmRhcmREZXZpYXRpb24gPSByZXF1aXJlKCcuL3NhbXBsZV9zdGFuZGFyZF9kZXZpYXRpb24nKTtcblxuLyoqXG4gKiBbU2tld25lc3NdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2tld25lc3MpIGlzXG4gKiBhIG1lYXN1cmUgb2YgdGhlIGV4dGVudCB0byB3aGljaCBhIHByb2JhYmlsaXR5IGRpc3RyaWJ1dGlvbiBvZiBhXG4gKiByZWFsLXZhbHVlZCByYW5kb20gdmFyaWFibGUgXCJsZWFuc1wiIHRvIG9uZSBzaWRlIG9mIHRoZSBtZWFuLlxuICogVGhlIHNrZXduZXNzIHZhbHVlIGNhbiBiZSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSwgb3IgZXZlbiB1bmRlZmluZWQuXG4gKlxuICogSW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdGhlIGFkanVzdGVkIEZpc2hlci1QZWFyc29uIHN0YW5kYXJkaXplZFxuICogbW9tZW50IGNvZWZmaWNpZW50LCB3aGljaCBpcyB0aGUgdmVyc2lvbiBmb3VuZCBpbiBFeGNlbCBhbmQgc2V2ZXJhbFxuICogc3RhdGlzdGljYWwgcGFja2FnZXMgaW5jbHVkaW5nIE1pbml0YWIsIFNBUyBhbmQgU1BTUy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHggaW5wdXRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNhbXBsZSBza2V3bmVzc1xuICogQGV4YW1wbGVcbiAqIHNhbXBsZVNrZXduZXNzKFsyLCA0LCA2LCAzLCAxXSk7IC8vID0+IDAuNTkwMTI4NjU2Mzg0MzY1XG4gKi9cbmZ1bmN0aW9uIHNhbXBsZVNrZXduZXNzKHggLyo6IEFycmF5PG51bWJlcj4gKi8pLyo6bnVtYmVyKi8ge1xuICAgIC8vIFRoZSBza2V3bmVzcyBvZiBsZXNzIHRoYW4gdGhyZWUgYXJndW1lbnRzIGlzIG51bGxcbiAgICB2YXIgdGhlU2FtcGxlU3RhbmRhcmREZXZpYXRpb24gPSBzYW1wbGVTdGFuZGFyZERldmlhdGlvbih4KTtcblxuICAgIGlmIChpc05hTih0aGVTYW1wbGVTdGFuZGFyZERldmlhdGlvbikgfHwgeC5sZW5ndGggPCAzKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuXG4gICAgdmFyIG4gPSB4Lmxlbmd0aCxcbiAgICAgICAgY3ViZWRTID0gTWF0aC5wb3codGhlU2FtcGxlU3RhbmRhcmREZXZpYXRpb24sIDMpLFxuICAgICAgICBzdW1DdWJlZERldmlhdGlvbnMgPSBzdW1OdGhQb3dlckRldmlhdGlvbnMoeCwgMyk7XG5cbiAgICByZXR1cm4gbiAqIHN1bUN1YmVkRGV2aWF0aW9ucyAvICgobiAtIDEpICogKG4gLSAyKSAqIGN1YmVkUyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FtcGxlU2tld25lc3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3NhbXBsZV9za2V3bmVzcy5qc1xuLy8gbW9kdWxlIGlkID0gMTIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9')},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * Sampling with replacement is a type of sampling that allows the same\n * item to be picked out of a population more than once.\n *\n * @param {Array} population an array of any kind of element\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} n sampled items from the population\n * @example\n * var sample = sampleWithReplacement([1, 2, 3, 4], 2);\n * sampleWithReplacement; // = [2, 4] or any other random sample of 2 items\n */\nfunction sampleWithReplacement/*::<T>*/(population/*:Array<T>*/,\n    n /*: number */,\n    randomSource/*:Function*/) {\n\n    if (population.length === 0) {\n        return [];\n    }\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    var length = population.length;\n    var sample = [];\n\n    for (var i = 0; i < n; i++) {\n        var index = Math.floor(randomSource() * length);\n\n        sample.push(population[index]);\n    }\n\n    return sample;\n}\n\nmodule.exports = sampleWithReplacement;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc2FtcGxlX3dpdGhfcmVwbGFjZW1lbnQuanM/YzgwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG4vKipcbiAqIFNhbXBsaW5nIHdpdGggcmVwbGFjZW1lbnQgaXMgYSB0eXBlIG9mIHNhbXBsaW5nIHRoYXQgYWxsb3dzIHRoZSBzYW1lXG4gKiBpdGVtIHRvIGJlIHBpY2tlZCBvdXQgb2YgYSBwb3B1bGF0aW9uIG1vcmUgdGhhbiBvbmNlLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBvcHVsYXRpb24gYW4gYXJyYXkgb2YgYW55IGtpbmQgb2YgZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IG4gY291bnQgb2YgaG93IG1hbnkgZWxlbWVudHMgdG8gdGFrZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JhbmRvbVNvdXJjZT1NYXRoLnJhbmRvbV0gYW4gb3B0aW9uYWwgZW50cm9weSBzb3VyY2UgdGhhdFxuICogcmV0dXJucyBudW1iZXJzIGJldHdlZW4gMCBpbmNsdXNpdmUgYW5kIDEgZXhjbHVzaXZlOiB0aGUgcmFuZ2UgWzAsIDEpXG4gKiBAcmV0dXJuIHtBcnJheX0gbiBzYW1wbGVkIGl0ZW1zIGZyb20gdGhlIHBvcHVsYXRpb25cbiAqIEBleGFtcGxlXG4gKiB2YXIgc2FtcGxlID0gc2FtcGxlV2l0aFJlcGxhY2VtZW50KFsxLCAyLCAzLCA0XSwgMik7XG4gKiBzYW1wbGVXaXRoUmVwbGFjZW1lbnQ7IC8vID0gWzIsIDRdIG9yIGFueSBvdGhlciByYW5kb20gc2FtcGxlIG9mIDIgaXRlbXNcbiAqL1xuZnVuY3Rpb24gc2FtcGxlV2l0aFJlcGxhY2VtZW50Lyo6OjxUPiovKHBvcHVsYXRpb24vKjpBcnJheTxUPiovLFxuICAgIG4gLyo6IG51bWJlciAqLyxcbiAgICByYW5kb21Tb3VyY2UvKjpGdW5jdGlvbiovKSB7XG5cbiAgICBpZiAocG9wdWxhdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIGEgY3VzdG9tIHJhbmRvbSBudW1iZXIgc291cmNlIGNhbiBiZSBwcm92aWRlZCBpZiB5b3Ugd2FudCB0byB1c2VcbiAgICAvLyBhIGZpeGVkIHNlZWQgb3IgYW5vdGhlciByYW5kb20gbnVtYmVyIGdlbmVyYXRvciwgbGlrZVxuICAgIC8vIFtyYW5kb20tanNdKGh0dHBzOi8vd3d3Lm5wbWpzLm9yZy9wYWNrYWdlL3JhbmRvbS1qcylcbiAgICByYW5kb21Tb3VyY2UgPSByYW5kb21Tb3VyY2UgfHwgTWF0aC5yYW5kb207XG5cbiAgICB2YXIgbGVuZ3RoID0gcG9wdWxhdGlvbi5sZW5ndGg7XG4gICAgdmFyIHNhbXBsZSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGluZGV4ID0gTWF0aC5mbG9vcihyYW5kb21Tb3VyY2UoKSAqIGxlbmd0aCk7XG5cbiAgICAgICAgc2FtcGxlLnB1c2gocG9wdWxhdGlvbltpbmRleF0pO1xuICAgIH1cblxuICAgIHJldHVybiBzYW1wbGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FtcGxlV2l0aFJlcGxhY2VtZW50O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy9zYW1wbGVfd2l0aF9yZXBsYWNlbWVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function \n * that extracts the sign of a real number\n * \n * @param {Number} x input value\n * @returns {Number} sign value either 1, 0 or -1\n * @throws {TypeError} if the input argument x is not a number\n * @private\n * \n * @example\n * sign(2); // => 1\n */\nfunction sign(x/*: number */)/*: number */ {\n    if (typeof x === 'number') {\n        if (x < 0) {\n            return -1;\n        } else if (x === 0) {\n            return 0\n        } else {\n            return 1;\n        }\n    } else {\n        throw new TypeError('not a number');\n    }\n}\n\nmodule.exports = sign;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc2lnbi5qcz9lNDJlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogW1NpZ25dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NpZ25fZnVuY3Rpb24pIGlzIGEgZnVuY3Rpb24gXG4gKiB0aGF0IGV4dHJhY3RzIHRoZSBzaWduIG9mIGEgcmVhbCBudW1iZXJcbiAqIFxuICogQHBhcmFtIHtOdW1iZXJ9IHggaW5wdXQgdmFsdWVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNpZ24gdmFsdWUgZWl0aGVyIDEsIDAgb3IgLTFcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgdGhlIGlucHV0IGFyZ3VtZW50IHggaXMgbm90IGEgbnVtYmVyXG4gKiBAcHJpdmF0ZVxuICogXG4gKiBAZXhhbXBsZVxuICogc2lnbigyKTsgLy8gPT4gMVxuICovXG5mdW5jdGlvbiBzaWduKHgvKjogbnVtYmVyICovKS8qOiBudW1iZXIgKi8ge1xuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKHggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoeCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgbnVtYmVyJyk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNpZ247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDEyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array\n * is the result of adding all numbers together, starting from zero.\n *\n * This runs on `O(n)`, linear time in respect to the array\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sumSimple([1, 2, 3]); // => 6\n */\nfunction sumSimple(x/*: Array<number> */)/*: number */ {\n    var value = 0;\n    for (var i = 0; i < x.length; i++) {\n        value += x[i];\n    }\n    return value;\n}\n\nmodule.exports = sumSimple;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc3VtX3NpbXBsZS5qcz8xOThmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIHNpbXBsZSBbc3VtXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdW1tYXRpb24pIG9mIGFuIGFycmF5XG4gKiBpcyB0aGUgcmVzdWx0IG9mIGFkZGluZyBhbGwgbnVtYmVycyB0b2dldGhlciwgc3RhcnRpbmcgZnJvbSB6ZXJvLlxuICpcbiAqIFRoaXMgcnVucyBvbiBgTyhuKWAsIGxpbmVhciB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIGFycmF5XG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4IGlucHV0XG4gKiBAcmV0dXJuIHtudW1iZXJ9IHN1bSBvZiBhbGwgaW5wdXQgbnVtYmVyc1xuICogQGV4YW1wbGVcbiAqIHN1bVNpbXBsZShbMSwgMiwgM10pOyAvLyA9PiA2XG4gKi9cbmZ1bmN0aW9uIHN1bVNpbXBsZSh4Lyo6IEFycmF5PG51bWJlcj4gKi8pLyo6IG51bWJlciAqLyB7XG4gICAgdmFyIHZhbHVlID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgKz0geFtpXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN1bVNpbXBsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvc3VtX3NpbXBsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar standardDeviation = __webpack_require__(38);\nvar mean = __webpack_require__(2);\n\n/**\n * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n * of a sample to a known value, x.\n *\n * in this case, we're trying to determine whether the\n * population mean is equal to the value that we know, which is `x`\n * here. usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * @param {Array<number>} sample an array of numbers as input\n * @param {number} x expected value of the population mean\n * @returns {number} value\n * @example\n * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => '0.16'\n */\nfunction tTest(sample/*: Array<number> */, x/*: number */)/*:number*/ {\n    // The mean of the sample\n    var sampleMean = mean(sample);\n\n    // The standard deviation of the sample\n    var sd = standardDeviation(sample);\n\n    // Square root the length of the sample\n    var rootN = Math.sqrt(sample.length);\n\n    // returning the t value\n    return (sampleMean - x) / (sd / rootN);\n}\n\nmodule.exports = tTest;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvdF90ZXN0LmpzPzIyYTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyogQGZsb3cgKi9cblxudmFyIHN0YW5kYXJkRGV2aWF0aW9uID0gcmVxdWlyZSgnLi9zdGFuZGFyZF9kZXZpYXRpb24nKTtcbnZhciBtZWFuID0gcmVxdWlyZSgnLi9tZWFuJyk7XG5cbi8qKlxuICogVGhpcyBpcyB0byBjb21wdXRlIFthIG9uZS1zYW1wbGUgdC10ZXN0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdHVkZW50JTI3c190LXRlc3QjT25lLXNhbXBsZV90LXRlc3QpLCBjb21wYXJpbmcgdGhlIG1lYW5cbiAqIG9mIGEgc2FtcGxlIHRvIGEga25vd24gdmFsdWUsIHguXG4gKlxuICogaW4gdGhpcyBjYXNlLCB3ZSdyZSB0cnlpbmcgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlXG4gKiBwb3B1bGF0aW9uIG1lYW4gaXMgZXF1YWwgdG8gdGhlIHZhbHVlIHRoYXQgd2Uga25vdywgd2hpY2ggaXMgYHhgXG4gKiBoZXJlLiB1c3VhbGx5IHRoZSByZXN1bHRzIGhlcmUgYXJlIHVzZWQgdG8gbG9vayB1cCBhXG4gKiBbcC12YWx1ZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QLXZhbHVlKSwgd2hpY2gsIGZvclxuICogYSBjZXJ0YWluIGxldmVsIG9mIHNpZ25pZmljYW5jZSwgd2lsbCBsZXQgeW91IGRldGVybWluZSB0aGF0IHRoZVxuICogbnVsbCBoeXBvdGhlc2lzIGNhbiBvciBjYW5ub3QgYmUgcmVqZWN0ZWQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzYW1wbGUgYW4gYXJyYXkgb2YgbnVtYmVycyBhcyBpbnB1dFxuICogQHBhcmFtIHtudW1iZXJ9IHggZXhwZWN0ZWQgdmFsdWUgb2YgdGhlIHBvcHVsYXRpb24gbWVhblxuICogQHJldHVybnMge251bWJlcn0gdmFsdWVcbiAqIEBleGFtcGxlXG4gKiB0VGVzdChbMSwgMiwgMywgNCwgNSwgNl0sIDMuMzg1KS50b0ZpeGVkKDIpOyAvLyA9PiAnMC4xNidcbiAqL1xuZnVuY3Rpb24gdFRlc3Qoc2FtcGxlLyo6IEFycmF5PG51bWJlcj4gKi8sIHgvKjogbnVtYmVyICovKS8qOm51bWJlciovIHtcbiAgICAvLyBUaGUgbWVhbiBvZiB0aGUgc2FtcGxlXG4gICAgdmFyIHNhbXBsZU1lYW4gPSBtZWFuKHNhbXBsZSk7XG5cbiAgICAvLyBUaGUgc3RhbmRhcmQgZGV2aWF0aW9uIG9mIHRoZSBzYW1wbGVcbiAgICB2YXIgc2QgPSBzdGFuZGFyZERldmlhdGlvbihzYW1wbGUpO1xuXG4gICAgLy8gU3F1YXJlIHJvb3QgdGhlIGxlbmd0aCBvZiB0aGUgc2FtcGxlXG4gICAgdmFyIHJvb3ROID0gTWF0aC5zcXJ0KHNhbXBsZS5sZW5ndGgpO1xuXG4gICAgLy8gcmV0dXJuaW5nIHRoZSB0IHZhbHVlXG4gICAgcmV0dXJuIChzYW1wbGVNZWFuIC0geCkgLyAoc2QgLyByb290Tik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdFRlc3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3RfdGVzdC5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\nvar mean = __webpack_require__(2);\nvar sampleVariance = __webpack_require__(14);\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number} test result\n * @example\n * ss.tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); //= -2.1908902300206643\n */\nfunction tTestTwoSample(\n    sampleX/*: Array<number> */,\n    sampleY/*: Array<number> */,\n    difference/*: number */) {\n    var n = sampleX.length,\n        m = sampleY.length;\n\n    // If either sample doesn't actually have any values, we can't\n    // compute this at all, so we return `null`.\n    if (!n || !m) { return null; }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    var meanX = mean(sampleX),\n        meanY = mean(sampleY),\n        sampleVarianceX = sampleVariance(sampleX),\n        sampleVarianceY = sampleVariance(sampleY);\n\n    if (typeof meanX === 'number' &&\n        typeof meanY === 'number' &&\n        typeof sampleVarianceX === 'number' &&\n        typeof sampleVarianceY === 'number') {\n        var weightedVariance = ((n - 1) * sampleVarianceX +\n            (m - 1) * sampleVarianceY) / (n + m - 2);\n\n        return (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m));\n    }\n}\n\nmodule.exports = tTestTwoSample;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvdF90ZXN0X3R3b19zYW1wbGUuanM/ZjE4NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vKiBAZmxvdyAqL1xuXG52YXIgbWVhbiA9IHJlcXVpcmUoJy4vbWVhbicpO1xudmFyIHNhbXBsZVZhcmlhbmNlID0gcmVxdWlyZSgnLi9zYW1wbGVfdmFyaWFuY2UnKTtcblxuLyoqXG4gKiBUaGlzIGlzIHRvIGNvbXB1dGUgW3R3byBzYW1wbGUgdC10ZXN0XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N0dWRlbnQnc190LXRlc3QpLlxuICogVGVzdHMgd2hldGhlciBcIm1lYW4oWCktbWVhbihZKSA9IGRpZmZlcmVuY2VcIiwgKFxuICogaW4gdGhlIG1vc3QgY29tbW9uIGNhc2UsIHdlIG9mdGVuIGhhdmUgYGRpZmZlcmVuY2UgPT0gMGAgdG8gdGVzdCBpZiB0d28gc2FtcGxlc1xuICogYXJlIGxpa2VseSB0byBiZSB0YWtlbiBmcm9tIHBvcHVsYXRpb25zIHdpdGggdGhlIHNhbWUgbWVhbiB2YWx1ZSkgd2l0aFxuICogbm8gcHJpb3Iga25vd2xlZGdlIG9uIHN0YW5kYXJkIGRldmlhdGlvbnMgb2YgYm90aCBzYW1wbGVzXG4gKiBvdGhlciB0aGFuIHRoZSBmYWN0IHRoYXQgdGhleSBoYXZlIHRoZSBzYW1lIHN0YW5kYXJkIGRldmlhdGlvbi5cbiAqXG4gKiBVc3VhbGx5IHRoZSByZXN1bHRzIGhlcmUgYXJlIHVzZWQgdG8gbG9vayB1cCBhXG4gKiBbcC12YWx1ZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QLXZhbHVlKSwgd2hpY2gsIGZvclxuICogYSBjZXJ0YWluIGxldmVsIG9mIHNpZ25pZmljYW5jZSwgd2lsbCBsZXQgeW91IGRldGVybWluZSB0aGF0IHRoZVxuICogbnVsbCBoeXBvdGhlc2lzIGNhbiBvciBjYW5ub3QgYmUgcmVqZWN0ZWQuXG4gKlxuICogYGRpZmZgIGNhbiBiZSBvbWl0dGVkIGlmIGl0IGVxdWFscyAwLlxuICpcbiAqIFtUaGlzIGlzIHVzZWQgdG8gY29uZmlybSBvciBkZW55XShodHRwOi8vd3d3Lm1vbmFyY2hsYWIub3JnL0xhYi9SZXNlYXJjaC9TdGF0cy8yU2FtcGxlVC5hc3B4KVxuICogYSBudWxsIGh5cG90aGVzaXMgdGhhdCB0aGUgdHdvIHBvcHVsYXRpb25zIHRoYXQgaGF2ZSBiZWVuIHNhbXBsZWQgaW50b1xuICogYHNhbXBsZVhgIGFuZCBgc2FtcGxlWWAgYXJlIGVxdWFsIHRvIGVhY2ggb3RoZXIuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBzYW1wbGVYIGEgc2FtcGxlIGFzIGFuIGFycmF5IG9mIG51bWJlcnNcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc2FtcGxlWSBhIHNhbXBsZSBhcyBhbiBhcnJheSBvZiBudW1iZXJzXG4gKiBAcGFyYW0ge251bWJlcn0gW2RpZmZlcmVuY2U9MF1cbiAqIEByZXR1cm5zIHtudW1iZXJ9IHRlc3QgcmVzdWx0XG4gKiBAZXhhbXBsZVxuICogc3MudFRlc3RUd29TYW1wbGUoWzEsIDIsIDMsIDRdLCBbMywgNCwgNSwgNl0sIDApOyAvLz0gLTIuMTkwODkwMjMwMDIwNjY0M1xuICovXG5mdW5jdGlvbiB0VGVzdFR3b1NhbXBsZShcbiAgICBzYW1wbGVYLyo6IEFycmF5PG51bWJlcj4gKi8sXG4gICAgc2FtcGxlWS8qOiBBcnJheTxudW1iZXI+ICovLFxuICAgIGRpZmZlcmVuY2UvKjogbnVtYmVyICovKSB7XG4gICAgdmFyIG4gPSBzYW1wbGVYLmxlbmd0aCxcbiAgICAgICAgbSA9IHNhbXBsZVkubGVuZ3RoO1xuXG4gICAgLy8gSWYgZWl0aGVyIHNhbXBsZSBkb2Vzbid0IGFjdHVhbGx5IGhhdmUgYW55IHZhbHVlcywgd2UgY2FuJ3RcbiAgICAvLyBjb21wdXRlIHRoaXMgYXQgYWxsLCBzbyB3ZSByZXR1cm4gYG51bGxgLlxuICAgIGlmICghbiB8fCAhbSkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgLy8gZGVmYXVsdCBkaWZmZXJlbmNlIChtdSkgaXMgemVyb1xuICAgIGlmICghZGlmZmVyZW5jZSkge1xuICAgICAgICBkaWZmZXJlbmNlID0gMDtcbiAgICB9XG5cbiAgICB2YXIgbWVhblggPSBtZWFuKHNhbXBsZVgpLFxuICAgICAgICBtZWFuWSA9IG1lYW4oc2FtcGxlWSksXG4gICAgICAgIHNhbXBsZVZhcmlhbmNlWCA9IHNhbXBsZVZhcmlhbmNlKHNhbXBsZVgpLFxuICAgICAgICBzYW1wbGVWYXJpYW5jZVkgPSBzYW1wbGVWYXJpYW5jZShzYW1wbGVZKTtcblxuICAgIGlmICh0eXBlb2YgbWVhblggPT09ICdudW1iZXInICYmXG4gICAgICAgIHR5cGVvZiBtZWFuWSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIHNhbXBsZVZhcmlhbmNlWCA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgdHlwZW9mIHNhbXBsZVZhcmlhbmNlWSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIHdlaWdodGVkVmFyaWFuY2UgPSAoKG4gLSAxKSAqIHNhbXBsZVZhcmlhbmNlWCArXG4gICAgICAgICAgICAobSAtIDEpICogc2FtcGxlVmFyaWFuY2VZKSAvIChuICsgbSAtIDIpO1xuXG4gICAgICAgIHJldHVybiAobWVhblggLSBtZWFuWSAtIGRpZmZlcmVuY2UpIC9cbiAgICAgICAgICAgIE1hdGguc3FydCh3ZWlnaHRlZFZhcmlhbmNlICogKDEgLyBuICsgMSAvIG0pKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdFRlc3RUd29TYW1wbGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc2ltcGxlLXN0YXRpc3RpY3Mvc3JjL3RfdGVzdF90d29fc2FtcGxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){"use strict";eval("\n/* @flow */\n\n/**\n * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n *\n * The standard score is the number of standard deviations an observation\n * or datum is above or below the mean. Thus, a positive standard score\n * represents a datum above the mean, while a negative standard score\n * represents a datum below the mean. It is a dimensionless quantity\n * obtained by subtracting the population mean from an individual raw\n * score and then dividing the difference by the population standard\n * deviation.\n *\n * The z-score is only defined if one knows the population parameters;\n * if one only has a sample set, then the analogous computation with\n * sample mean and sample standard deviation yields the\n * Student's t-statistic.\n *\n * @param {number} x\n * @param {number} mean\n * @param {number} standardDeviation\n * @return {number} z score\n * @example\n * zScore(78, 80, 5); // => -0.4\n */\nfunction zScore(x/*:number*/, mean/*:number*/, standardDeviation/*:number*/)/*:number*/ {\n    return (x - mean) / standardDeviation;\n}\n\nmodule.exports = zScore;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9zaW1wbGUtc3RhdGlzdGljcy9zcmMvel9zY29yZS5qcz9lZDY3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qIEBmbG93ICovXG5cbi8qKlxuICogVGhlIFtaLVNjb3JlLCBvciBTdGFuZGFyZCBTY29yZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TdGFuZGFyZF9zY29yZSkuXG4gKlxuICogVGhlIHN0YW5kYXJkIHNjb3JlIGlzIHRoZSBudW1iZXIgb2Ygc3RhbmRhcmQgZGV2aWF0aW9ucyBhbiBvYnNlcnZhdGlvblxuICogb3IgZGF0dW0gaXMgYWJvdmUgb3IgYmVsb3cgdGhlIG1lYW4uIFRodXMsIGEgcG9zaXRpdmUgc3RhbmRhcmQgc2NvcmVcbiAqIHJlcHJlc2VudHMgYSBkYXR1bSBhYm92ZSB0aGUgbWVhbiwgd2hpbGUgYSBuZWdhdGl2ZSBzdGFuZGFyZCBzY29yZVxuICogcmVwcmVzZW50cyBhIGRhdHVtIGJlbG93IHRoZSBtZWFuLiBJdCBpcyBhIGRpbWVuc2lvbmxlc3MgcXVhbnRpdHlcbiAqIG9idGFpbmVkIGJ5IHN1YnRyYWN0aW5nIHRoZSBwb3B1bGF0aW9uIG1lYW4gZnJvbSBhbiBpbmRpdmlkdWFsIHJhd1xuICogc2NvcmUgYW5kIHRoZW4gZGl2aWRpbmcgdGhlIGRpZmZlcmVuY2UgYnkgdGhlIHBvcHVsYXRpb24gc3RhbmRhcmRcbiAqIGRldmlhdGlvbi5cbiAqXG4gKiBUaGUgei1zY29yZSBpcyBvbmx5IGRlZmluZWQgaWYgb25lIGtub3dzIHRoZSBwb3B1bGF0aW9uIHBhcmFtZXRlcnM7XG4gKiBpZiBvbmUgb25seSBoYXMgYSBzYW1wbGUgc2V0LCB0aGVuIHRoZSBhbmFsb2dvdXMgY29tcHV0YXRpb24gd2l0aFxuICogc2FtcGxlIG1lYW4gYW5kIHNhbXBsZSBzdGFuZGFyZCBkZXZpYXRpb24geWllbGRzIHRoZVxuICogU3R1ZGVudCdzIHQtc3RhdGlzdGljLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0gbWVhblxuICogQHBhcmFtIHtudW1iZXJ9IHN0YW5kYXJkRGV2aWF0aW9uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHogc2NvcmVcbiAqIEBleGFtcGxlXG4gKiB6U2NvcmUoNzgsIDgwLCA1KTsgLy8gPT4gLTAuNFxuICovXG5mdW5jdGlvbiB6U2NvcmUoeC8qOm51bWJlciovLCBtZWFuLyo6bnVtYmVyKi8sIHN0YW5kYXJkRGV2aWF0aW9uLyo6bnVtYmVyKi8pLyo6bnVtYmVyKi8ge1xuICAgIHJldHVybiAoeCAtIG1lYW4pIC8gc3RhbmRhcmREZXZpYXRpb247XG59XG5cbm1vZHVsZS5leHBvcnRzID0gelNjb3JlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3NpbXBsZS1zdGF0aXN0aWNzL3NyYy96X3Njb3JlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=")},,,,function(n,g,I){I(52),n.exports=I(16)}],[130]);